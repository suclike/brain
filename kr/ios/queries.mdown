# 쿼리

`getObjectWithId:`로 `PFQuery`를 수행하여 Parse에서 싱글 `%{ParseObject}`를 검색하는 방법을 살펴보았습니다. `PFQuery`를 사용하여 데이터를 검색할 수 있는 방법은 많습니다. 한 번에 여러 개체를 즉시 검색할 수도 있고 검색할 개체에 조건을 넣거나 쿼리를 자동으로 캐시하여 해당 코드를 직접 작성하지 않게 할 수도 있습니다.

## 기본 쿼리

검색할 개체를 지정하기에는 `getObjectInBackgroundWithId:block:`만으로는 충분하지 않은 경우가 많습니다. `PFQuery`에서는 다양한 방법으로 싱글 개체가 아닌 개체 목록을 검색할 수 있습니다.

일반적인 패턴은 `PFQuery`를 만들고 조건을 지정한 다음 `findObjectsInBackgroundWithBlock:` 또는 `findObjectsInBackgroundWithTarget:selector:`를 사용하여 일치하는 `%{ParseObject}`의 `NSArray`를 가져오는 것입니다. 예를 들어 특정 `playerName`의 점수를 검색하려면 `whereKey:equalTo:` 메서드를 사용하여 키의 값을 제한합니다.

```objc
PFQuery *query = [PFQuery queryWithClassName:@"GameScore"];
[query whereKey:@"playerName" equalTo:@"Dan Stemkoski"];
[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
    if (!error) {
        // The find succeeded.
        NSLog(@"Successfully retrieved %d scores.", objects.count);
        // Do something with the found objects
        for (PFObject *object in objects) {
            NSLog(@"%@", object.objectId);
        }
    } else {
        // Log details of the failure
        NSLog(@"Error: %@ %@", error, [error userInfo]);
    }
}];
```

`findObjectsInBackgroundWithBlock:` 및 `findObjectsInBackgroundWithTarget:selector:`는 모두 네트워크 요청이 차단 없이 이루어진다는 가정하에서 유사하게 작동하며 기본 스레드에서 차단/콜백을 실행합니다. 이미 백그라운드 스레드 상태인 경우 호출하는 스레드를 차단하는 해당 `findObjects` 메서드가 있습니다.

```objc
// Only use this code if you are already running it in a background
// thread, or for testing purposes!
PFQuery *query = [PFQuery queryWithClassName:@"GameScore"];
[query whereKey:@"playerName" equalTo:@"Dan Stemkoski"];
NSArray* scoreArray = [query findObjects];
```

## NSPredicate로 조건 지정

`PFQuery`를 최대한 활용하려면 아래에 표시된 메서드를 사용하여 조건을 추가하는 것이 좋습니다. 그렇지만 `NSPredicate`를 사용하고 싶은 경우 `PFQuery`를 만들 때 `NSPredicate`를 제공하여 일부 조건을 지정할 수 있습니다.

```objc
NSPredicate *predicate = [NSPredicate predicateWithFormat:
    @"playerName = 'Dan Stemkosk'"];
PFQuery *query = [PFQuery queryWithClassName:@"GameScore" predicate:predicate];
```

다음과 같은 기능이 지원됩니다.

*   키와 상수를 사용하여 `=`, `!=`, `<`, `>`, `<=`, `>=` 및 `BETWEEN` 등 간단한 비교
*   `x IN {1, 2, 3}`과 같은 포함 조건자
*   `x IN SELF`와 같은 키 존재 조건자
*   `BEGINSWITH` 표현식
*   `AND`, `OR` 및 `NOT`을 사용한 복합 조건자
*   `"key IN %@", subquery`를 사용하는 하위 쿼리

다음 조건자 유형은 지원되지 **않습니다**.

*   `ANY`, `SOME`, `ALL` 또는 `NONE` 등 집계 연산
*   `LIKE`, `MATCHES`, `CONTAINS` 또는 `ENDSWITH` 등 정규 표현식
*   한 키를 다른 키와 비교하는 조건자
*   여러 `OR` 절을 사용하는 복합 조건자

## 쿼리 조건

`PFQuery`에서 찾은 개체에 조건을 지정하는 방법에는 여러 가지가 있습니다. 다음과 같이 `whereKey:notEqualTo`로 특정 키-값 쌍을 사용하여 개체를 필터링할 수 있습니다.:

```objc
[query whereKey:@"playerName" notEqualTo:@"Michael Yabuti"];
$toggle$ NSPredicate *predicate = [NSPredicate predicateWithFormat:
    @"playerName != 'Michael Yabuti'"];
PFQuery *query = [PFQuery queryWithClassName:@"GameScore" predicate:predicate];
```

여러 조건을 지정할 수 있으며 개체는 모든 조건에 일치하는 경우에만 결과에 포함됩니다.  즉, AND 조건과 같습니다.

```objc
[query whereKey:@"playerName" notEqualTo:@"Michael Yabuti"];
[query whereKey:@"playerAge" greaterThan:@18];
```

`limit`를 설정하여 결과 개수를 제한할 수 있습니다. 기본적으로 결과는 100개로 제한되지만 유효한 제한 개수는 1~1000개입니다.

```objc
query.limit = 10; // limit to at most 10 results
```

정확히 1개의 결과를 원하는 경우 `findObject`를 사용하는 대신 `getFirstObject` 또는 `getFirstObjectInBackground`를 사용하는 것이 더욱 편리할 수 있습니다.

```objc
PFQuery *query = [PFQuery queryWithClassName:@"GameScore"];
[query whereKey:@"playerEmail" equalTo:@"dstemkoski@example.com"];
[query getFirstObjectInBackgroundWithBlock:^(PFObject *object, NSError *error) {
    if (!object) {
        NSLog(@"The getFirstObject request failed.");
    } else {
        // The find succeeded.
        NSLog(@"Successfully retrieved the object.");
    }
}];
```

`skip`을 설정하여 첫 번째 결과를 건너뛸 수 있습니다. 이 방법은 페이지를 매길 때 유용할 수 있습니다.

```objc
query.skip = 10; // skip the first 10 results
```

숫자와 문자열 같이 정렬할 수 있는 유형의 경우 다음과 같이 결과가 반환되는 순서를 제어할 수 있습니다.

```objc
// Sorts the results in ascending order by the score field
[query orderByAscending:@"score"];
// Sorts the results in descending order by the score field
[query orderByDescending:@"score"];
```

다음과 같이 쿼리에 대한 정렬 키를 추가할 수 있습니다.

```objc
// Sorts the results in ascending order by the score field if the previous sort keys are equal.
[query addAscendingOrder:@"score"];
// Sorts the results in descending order by the score field if the previous sort keys are equal.
[query addDescendingOrder:@"score"];
```

또한 다음과 같이 정렬 가능한 유형의 쿼리에서 비교를 사용할 수 있습니다.

```objc
// Restricts to wins < 50
[query whereKey:@"wins" lessThan:@50];
// Restricts to wins <= 50
[query whereKey:@"wins" lessThanOrEqualTo:@50];
// Restricts to wins > 50
[query whereKey:@"wins" greaterThan:@50];
// Restricts to wins >= 50
[query whereKey:@"wins" greaterThanOrEqualTo:@50];
```

여러 다른 값이 일치하는 개체를 검색하려면 허용 가능한 값의 배열을 제공하는 `whereKey:containedIn:`을 사용할 수 있습니다. 주로 여러 쿼리를 싱글 쿼리로 대체하는 데 유용합니다. 예를 들어 다음과 같이 특정 목록에서 모든 플레이어의 점수를 검색하려는 경우 쿼리는 다음과 같습니다.

```objc
// Finds scores from any of Jonathan, Dario, or Shawn
NSArray *names = @[@"Jonathan Walsh",
                   @"Dario Wunsch",
                   @"Shawn Simon"];
[query whereKey:@"playerName" containedIn:names];
```

여러 값 중 아무 값과도 일치하지 않는 개체를 검색하려면 허용 가능한 값의 배열을 제공하는 `whereKey:notContainedIn:`을 사용할 수 있습니다. 예를 들어 다음과 같이 목록에 없는 플레이어의 점수를 검색하려는 경우 다음과 같이 할 수 있습니다.

```objc
// Finds scores from anyone who is neither Jonathan, Dario, nor Shawn
NSArray *names = @[@"Jonathan Walsh",
                   @"Dario Wunsch",
                   @"Shawn Simon"];
[query whereKey:@"playerName" notContainedIn:names];
```

특정 키 세트가 있는 개체를 검색하려는 경우 `whereKeyExists`를 사용할 수 있습니다. 반대로 특정 키 세트가 없는 개체를 검색하려는 경우 `whereKeyDoesNotExist`를 사용할 수 있습니다.

```objc
// Finds objects that have the score set
[query whereKeyExists:@"score"];
// Finds objects that don't have the score set
[query whereKeyDoesNotExist:@"score"];
```

`whereKey:matchesKey:inQuery:` 메서드를 사용하여 키가 다른 쿼리 결과에서 가져온 개체 세트에 있는 키의 값과 일치하는 개체를 가져올 수 있습니다.  예를 들어 스포츠 팀이 포함된 클래스가 있고 사용자 클래스에 사용자의 연고지를 저장하는 경우 하나의 쿼리로 우승 기록이 있는 연고지 팀의 사용자 목록을 찾을 수 있습니다.  쿼리는 다음과 같습니다.

```objc
PFQuery *teamQuery = [PFQuery queryWithClassName:@"Team"];
[teamQuery whereKey:@"winPct" greaterThan:@(0.5)];
PFQuery *userQuery = [PFQuery queryForUser];
[userQuery whereKey:@"hometown" matchesKey:@"city" inQuery:teamQuery];
[userQuery findObjectsInBackgroundWithBlock:^(NSArray *results, NSError *error) {
    // results will contain users with a hometown team with a winning record
}];
```

이와 반대로 키가 다른 쿼리 결과에서 가져온 개체 세트에 있는 키의 값과 일치하지 않는 개체를 가져오려면 `whereKey:doesNotMatchKey:inQuery:`를 사용할 수 있습니다.  예를 들어 패배 기록이 있는 연고지 팀의 사용자를 찾으려는 경우 쿼리는 다음과 같습니다.

```objc
PFQuery *losingUserQuery = [PFQuery queryForUser];
[losingUserQuery whereKey:@"hometown" doesNotMatchKey:@"city" inQuery:teamQuery];
[losingUserQuery findObjectsInBackgroundWithBlock:^(NSArray *results, NSError *error) {
    // results will contain users with a hometown team with a losing record
}];
```

키의 `NSArray`를 사용하여 `selectKeys:`를 호출하면 반환되는 필드를 제한할 수 있습니다. `score`와 `playerName` 필드(및 `objectId`, `createdAt`, `updatedAt` 등 기본 제공되는 특수 필드)만 포함된 문서를 가져오려는 경우 쿼리는 다음과 같습니다.

```objc
PFQuery *query = [PFQuery queryWithClassName:@"GameScore"];
[query selectKeys:@[@"playerName", @"score"]];
[query findObjectsInBackgroundWithBlock:^(NSArray *results, NSError *error) {
    // objects in results will only contain the playerName and score fields
}];
```

나머지 필드는 나중에 반환된 개체의 `fetchIfNeeded` 변형 중 하나를 호출하여 가져올 수 있습니다.

```objc
PFObject *object = (PFObject*)results[0];
[object fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
    // all fields of the object will now be available here.
}];
```

## 배열 쿼리

배열 유형인 키의 경우 다음과 같이 쿼리하여 키의 배열 값에 2가 포함된 개체를 찾을 수 있습니다.

```objc
// Find objects where the array in arrayKey contains 2.
[query whereKey:@"arrayKey" equalTo:@2];
```

또한 다음과 같이 키의 배열 값에 값 2, 3, 4가 각각 포함된 개체를 찾을 수 있습니다. 

```objc
// Find objects where the array in arrayKey contains each of the
// elements 2, 3, and 4.
[query whereKey:@"arrayKey" containsAllObjectsInArray:@[@2, @3, @4]];
```

## 문자열 쿼리

`whereKey:hasPrefix:`를 사용하여 특정 문자열로 시작하는 문자열 값으로 제한할 수 있습니다. MySQL LIKE 연산자와 마찬가지로 색인이 생성되므로 큰 데이터 세트에 효율적입니다.

```objc
// Finds barbecue sauces that start with "Big Daddy's".
PFQuery *query = [PFQuery queryWithClassName:@"BarbecueSauce"];
[query whereKey:@"name" hasPrefix:@"Big Daddy's"];
```

## 관계형 쿼리

관계형 데이터를 쿼리하는 방법에는 여러 가지가 있습니다. 필드가 특정 `%{ParseObject}`와 일치하는 개체를 검색하려는 경우 다른 데이터 유형과 마찬가지로 `whereKey:equalTo:`를 사용할 수 있습니다. 예를 들어 각 `Comment`의 `post` 필드에 `Post` 개체가 있는 경우 특정 `Post`에 대한 댓글을 가져올 수 있습니다.

```objc
// Assume PFObject *myPost was previously created.
PFQuery *query = [PFQuery queryWithClassName:@"Comment"];
[query whereKey:@"post" equalTo:myPost];
[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {
    // comments now contains the comments for myPost
}];
```

또한 다음과 같이 `objectId`별로 관계형 쿼리를 수행할 수 있습니다.

```objc
[query whereKey:@"post"
       equalTo:[PFObject objectWithoutDataWithClassName:@"Post" objectId:@"1zEcyElZ80"]];
```

필드에 다른 쿼리와 일치하는 `%{ParseObject}`가 포함된 개체를 검색하려는 경우 `whereKey:matchesQuery`를 사용할 수 있습니다. 기본 한도 100개와 최대 한도 1000개가 내부 쿼리에도 적용되므로 데이터 세트가 큰 경우 쿼리를 신중하게 구성해야 원하는 동작을 얻을 수 있습니다. 이미지가 있는 게시물에 대한 댓글을 찾으려면 다음 쿼리를 수행하세요.

```objc
PFQuery *innerQuery = [PFQuery queryWithClassName:@"Post"];
[innerQuery whereKeyExists:@"image"];
PFQuery *query = [PFQuery queryWithClassName:@"Comment"];
[query whereKey:@"post" matchesQuery:innerQuery];
[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {
    // comments now contains the comments for posts with images
}];
```

필드에 다른 쿼리와 일치하지 않는 `%{ParseObject}`가 포함된 개체를 가져오려면 `whereKey:doesNotMatchQuery`를 사용할 수 있습니다.  이미지가 없는 게시물에 대한 댓글을 찾으려면 다음 쿼리를 수행하세요.

```objc
PFQuery *innerQuery = [PFQuery queryWithClassName:@"Post"];
[innerQuery whereKeyExists:@"image"];
PFQuery *query = [PFQuery queryWithClassName:@"Comment"];
[query whereKey:@"post" doesNotMatchQuery:innerQuery];
[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {
    // comments now contains the comments for posts without images
}];
```

하나의 쿼리로 관계된 개체의 여러 유형을 반환하려는 경우 `includeKey:` 메서드로 수행할 수 있습니다. 예를 들어 최근 10개의 댓글을 가져오면서 동시에 관련된 게시물을 가져오려면 다음과 같이 쿼리합니다.

```objc
PFQuery *query = [PFQuery queryWithClassName:@"Comment"];
// Retrieve the most recent ones
[query orderByDescending:@"createdAt"];

// Only retrieve the last ten
query.limit = 10;

// Include the post data with each comment
[query includeKey:@"post"];

[query findObjectsInBackgroundWithBlock:^(NSArray *comments, NSError *error) {
    // Comments now contains the last ten comments, and the "post" field
    // has been populated. For example:
    for (PFObject *comment in comments) {
        // This does not require a network access.
        PFObject *post = comment[@"post"];
        NSLog(@"retrieved related post: %@", post);
    }
}];
```

또한 점 표시를 사용하여 여러 수준 포함을 수행할 수 있습니다.  댓글에 대한 게시물과 게시물 작성자를 포함하려면 다음과 같이 쿼리합니다.

```objc
[query includeKey:@"post.author"];
```

`includeKey:`를 여러 번 호출하여 여러 필드가 포함된 쿼리를 수행할 수 있습니다. 이 기능은 `getFirstObject`와 `getObjectInBackground` 등의 PFQuery 헬퍼에서도 작동합니다.

## 쿼리 캐싱

쿼리 결과를 디스크에 캐시하면 유용한 경우가 많습니다. 이렇게 하면 사용자 기기가 오프라인이거나 앱이 방금 시작되어 아직 네트워크 요청을 완료할 시간이 없을 때 데이터를 표시할 수 있습니다. 쿼리가 공간을 너무 많이 차지하면 Parse에서 자동으로 캐시에서 쿼리를 삭제합니다.

기본적으로 쿼리는 캐시를 사용하지 않지만, `query.cachePolicy`를 설정하여 캐시를 활성화할 수 있습니다. 예를 들어 네트워크를 통해 쿼리를 시도하고 네트워크를 사용할 수 없는 경우 캐시된 데이터에 시도하려는 경우 다음과 같이 수행합니다.

```objc
PFQuery *query = [PFQuery queryWithClassName:@"GameScore"];
query.cachePolicy = kPFCachePolicyNetworkElseCache;
[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
    if (!error) {
        // Results were successfully found, looking first on the
        // network and then on disk.
    } else {
        // The network was inaccessible and we have no cached data for
        // this query.
    }
}];
```

Parse에서는 다양한 캐시 정책을 제공합니다.

*   `kPFCachePolicyIgnoreCache` 쿼리는 캐시에서 로드하지 않거나 캐시에 결과를 저장하지 않습니다. `kPFCachePolicyIgnoreCache`는 기본 캐시 정책입니다.
*   `kPFCachePolicyCacheOnly` 쿼리는 캐시에서만 로드하고 네트워크를 무시합니다. 캐시된 결과가 없는 경우 `PFError`가 발생합니다.
*   `kPFCachePolicyNetworkOnly` 쿼리가 캐시에서 로드되지 않지만 결과는 캐시에 저장합니다.
*   `kPFCachePolicyCacheElseNetwork` 쿼리는 먼저 캐시에서 로드를 시도하며 실패하면 네트워크에서 결과를 로드합니다. 캐시나 네트워크에서 모두 성공하지 못하면 `PFError`가 발생합니다.
*   `kPFCachePolicyNetworkElseCache` 쿼리는 네트워크에서 먼저 로드를 시도하고 실패하면 캐시에서 결과를 로드합니다. 네트워크나 캐시에서 모두 성공하지 못하면 `PFError`가 발생합니다.
*   `kPFCachePolicyCacheThenNetwork` 쿼리는 먼저 캐시에서 로드한 다음 네트워크에서 로드합니다. 이 경우 콜백이 먼저 캐시된 결과에서 호출된 다음 네트워크 결과에서 호출되어 실제로 두 번 호출됩니다. 두 결과를 서로 다른 시간에 반환하므로 이 캐시 정책은 `findObjects`와 동기적으로 사용할 수 없습니다.

캐시 동작을 제어해야 하는 경우 PFQuery에 지정된 메서드를 사용하여 캐시와 상호 작용할 수 있습니다.  캐시에서 다음 작업을 수행할 수 있습니다.

*   쿼리에 대한 캐시된 결과가 있는지 확인합니다.```objc BOOL isInCache = [query hasCachedResult];```*   쿼리에 대한 모든 캐시된 결과를 삭제합니다.```objc [query clearCachedResult];```
*   쿼리에 대한 캐시된 결과를 삭제합니다.```objc [PFQuery clearAllCachedResults];```

또한 쿼리 캐싱은 `getFirstObject` 및 `getObjectInBackground`를 비롯한 PFQuery 헬퍼에서도 작동합니다.

## 개체 계산

쿼리와 일치하는 개체 수만 계산하면 되고 일치하는 개체를 검색할 필요가 없는 경우 `findObjects` 대신 `countObjects`를 사용할 수 있습니다. 예를 들어 특정 플레이어가 한 게임 수를 계산하려면 다음과 같이 쿼리합니다.

```objc
PFQuery *query = [PFQuery queryWithClassName:@"GameScore"];
[query whereKey:@"playername" equalTo:@"Sean Plott"];
[query countObjectsInBackgroundWithBlock:^(int count, NSError *error) {
    if (!error) {
        // The count request succeeded. Log the count
        NSLog(@"Sean has played %d games", count);
    } else {
        // The request failed
    }
}];
```

스레드 호출을 차단하려면 동기적 `countObjects` 메서드를 사용할 수도 있습니다.

개체 수가 1,000개 이상인 클래스의 경우 시간 초과로 계산 작업이 제한됩니다. 이 경우 일상적으로 시간 초과 오류가 발생하거나 대략적인 결과만 반환할 수도 있습니다. 따라서 앱에서 이러한 종류의 계산 작업을 방지하도록 설계하는 것이 좋습니다.

## 복합 쿼리

여러 쿼리 중 하나와 일치하는 개체를 찾으려면 `orQueryWithSubqueries:` 메서드를 사용할 수 있습니다.  예를 들어 우승을 많이 한 플레이어나 적게 한 플레이어를 찾으려면 다음과 같이 쿼리합니다.

```objc
PFQuery *lotsOfWins = [PFQuery queryWithClassName:@"Player"];
[lotsOfWins whereKey:@"wins" greaterThan:@150];
PFQuery *fewWins = [PFQuery queryWithClassName:@"Player"];
[fewWins whereKey:@"wins" lessThan:@5];
PFQuery *query = [PFQuery orQueryWithSubqueries:@[fewWins,lotsOfWins]];
[query findObjectsInBackgroundWithBlock:^(NSArray *results, NSError *error) {
    // results contains players with lots of wins or only a few wins.
}];
```

새로 생성된 `PFQuery`에 'and' 연산자처럼 작동하는 조건을 추가할 수 있습니다.

하지만 복합 쿼리의 하위 쿼리에서 필터링되지 않은 조건(예: `limit`, `skip`, `orderBy...:`, `includeKey:`)은 지원되지 않습니다.

