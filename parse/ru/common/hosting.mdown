# Хостинг

Parse Hosting предоставляет услуги для хостинга статических и динамических веб-сайтов. Вы можете загружать произвольные статические веб-материалы или создавать динамические веб-приложения с помощью JavaScript SDK со стороны клиента, а также с помощью Cloud Code и Express со стороны сервера. Таким образом вы сможете создавать сопутствующие веб-приложения для исходного приложения, целевые страницы для мобильной версии приложения или даже предоставлять хостинг для двоичных файлов Unity Web Player.

## Начало работы

На компьютере, с помощью которого осуществляется разработка, необходимо будет установить инструмент Parse, запускаемый из командной строки. С его помощью вы сможете управлять своим веб-сайтом в Parse Cloud. Версия инструмента с запуском из командной строки должна быть не ниже 1.1.0.

### Установка или обновление инструмента (Mac/Linux)

Чтобы получить инструмент Parse в среде Mac OS и Linux/Unix, выполните команду:

```bash
curl -s https://www.parse.com/downloads/cloud_code/installer.sh | sudo /bin/bash
```

Инструмент под названием &quot;parse&quot; будет установлен в папку `/usr/local/bin/parse`. В папке отсутствуют другие остаточные файлы, поэтому, чтобы деинсталлировать инструмент, просто удалите файл. Если инструмент уже установлен, то вместо инсталляции выполняется обновление.

### Установка инструмента (Windows)

Инструмент Parse с запуском из командной строки для Windows можно найти [здесь](/downloads/windows/console/parse.zip). После загрузки и распаковки zip-файла дважды нажмите файл ParseConsole.exe, чтобы запустить сеанс PowerShell с поддержкой Parse. После первого запуска ParseConsole можно также начать сеанс PowerShell путём нажатия комбинации клавиш &quot;Win + R&quot; и ввода &quot;parse&quot; в открывшемся стандартном диалоговом окне &laquo;Выполнить&raquo;.

### Создание каталога для проекта

Далее необходимо создать каталог для хранения веб-сайта, который будет работать в облаке. Создайте каталог с помощью команды `parse new`, после чего вы сможете выбрать приложение, для которого организуется хостинг:

```bash
$ parse new MyWebsite
Email: ninja@gmail.com
Password:
1:MyApp
Select an App: 1
$ cd MyWebsite
```

Войдите в аккаунт Parse с помощью адреса электронной почты и пароля. Если вы зарегистрировались через OAuth и никогда не использовали пароль &mdash; теперь вам потребуется изменить настройки аккаунта, чтобы установить его. В существующем каталоге будет создан новый под названием `MyWebsite`. Автоматически будут созданы несколько файлов:

```bash
-config/
  global.json
-cloud/
  main.js
-public/
  index.html
```

Каталог `config` содержит файл конфигурации JSON, с которым обычно ничего не нужно делать, в каталоге `cloud` находится код динамических веб-сайтов, а каталог `public` хранит все статические материалы, которые нужно размещать в Parse. Пока просто проверьте, были ли созданы эти файлы. Если вы используете систему контроля исходных кодов, то с ее помощью можно проверить все эти файлы.

### Простой веб-сайт

Хостинг статических материалов с помощью Parse не представляет сложностей. Все файлы в каталоге `public` будут размещены по адресу `your-custom-subdomain.parseapp.com`. Этот каталог находится рядом с папками `cloud` и `config`.

Чтобы развернуть несложный веб-сайт вроде Hello World, просто выполните следующие действия:

```bash
$ echo "Hello World" > public/index.html
$ parse deploy
```

Чтобы получить доступ к развёрнутому веб-сайту, необходимо создать поддомен.

### Выбор названия поддомена

Чтобы получить доступ к размещенным материалам, сначала необходимо выбрать поддомен ParseApp. Свой поддомен можно настроить в настройках приложения в разделе &laquo;Веб-хостинг&raquo;. В этом разделе находится поле, в которое надо ввести название ParseApp. Название поддомена, в отличие от названия приложения, должно быть уникальным во всей системе Parse, при этом регистр не учитывается. Название может состоять от 3 до 20 букв, цифр и тире, при этом последнее не может находиться в начале или конце. Если при выборе уникального названия поддомена вы видите галочку &mdash; значит, оно еще не занято.

Например, для своего веб-сайта вы выбрали название поддомена `at-the-movies`. Теперь к нему можно получить доступ по корневому URL-адресу `at-the-movies.parseapp.com`. Если вы загружаете другой размещённый файл из `public/images/background.png`, то доступ к нему можно получить, введя в адресную строку браузера URL `at-the-movies.parseapp.com/images/background.png`.

### Ограничения загрузки

Существует несколько ограничений по хостингу файлов:

*   Размер файлов не должен превышать 500 мегабайт.
*   Общее количество загруженных файлов ограничивается 500.*   Названия файлов должны начинаться с буквы или цифры и содержать только буквы, цифры, тире, символы подчеркивания, пробелы и символы &quot;@&quot;.
*   Инструмент с запуском из командной строки автоматически пропустит файлы автосохранения emacs и vim.

Вы можете загружать контент любого типа. Parse определит тип контента по расширению файла.

## Индивидуальные названия доменов

Пользователи также могут размещать контент с индивидуальным названием домена. Если вы выбрали название ParseApp `at-the-movies` и хотите разместить свои материалы на веб-сайте `www.example.com`, необходимо выполнить три действия.

1.  Докажите, что вы имеете доступ к управлению записями DNS для `www.example.com`. Для этого добавьте CNAME к `at-the-movies.parseapp.com` с `www.example.com` или с `[your_host_name_key].www.example.com`. Ключ названия узла&nbsp;&mdash; это строка из 12 символов, которая находится в настройках приложения в разделе &laquo;Веб-хостинг&raquo;. Распространение новой записи DNS может занять от 15 минут до нескольких часов. В этот промежуток следующее действие завершить нельзя. Если в настоящее время веб-сайт размещен по адресу `www.example.com`, лучше воспользоваться методом ключа названия хоста. В противном случае для тех пользователей, которые увидят новую запись DNS, прежде чем вы завершите следующее действие, веб-сайт будет недоступен.
2.  По завершении распространения новой записи DNS в настройках хостинга приложения можно установить название хоста `www.example.com`. После завершения первого действия появится галочка. В противном случае вы увидите сообщение об ошибке.3.  Если вы подтвердили право собственности с помощью ключа названия хоста, вам все равно нужно добавить CNAME с `www.example.com` к `at-the-movies.parseapp.com`, чтобы начать направлять трафик размещенному приложению.

После выполнения этих шагов `www.example.com` будет содержать тот же контент, что и `at-the-movies.parseapp.com`.

Если вы хотите предоставлять контент на домене apex, например `example.com`, то выполнить эти действия будет невозможно, потому что корневые домены не поддерживают записи CNAME. В этом случае Parse предлагает воспользоваться службой, которая будет перенаправлять трафик от корневых доменов, например `example.com`, к поддомену `www.example.com`. Чтобы воспользоваться этой службой, выполните описанные выше шаги, используя домен с префиксом www, например `www.example.com`, а затем создайте записи `A` с `example.com` для одного или обоих приведенных IP-адресов:

*   `54.85.233.145`
*   `54.85.226.190`

Записи `A` можно создать на странице настроек службы, предоставляющей вам имя домена. После создания записей `A` запросы к `example.com` повлекут за собой перенаправление 301 (постоянное) на адрес `www.example.com`. При этом путь запроса будет сохранен.

Если вы зайдете на размещенный сайт по протоколу HTTPS с помощью своего пользовательского домена, вы можете увидеть предупреждение о том, что веб-сайт предлагает контент с использованием сертификата SSL, принадлежащего `*.parseapp.com`. Если у вас есть сертификат SSL, принадлежащий вашему пользовательскому домену, загрузите файл общего сертификата и файл закрытого ключа в раздел &laquo;Веб-хостинг&raquo; в настройках приложения. В этом случае предупреждения не появятся. Если для общего сертификата вашего домена необходимы промежуточные сертификаты, то вы должны добавить свой​ общий сертификат, промежуточные сертификаты и корневой сертификат в один файл (именно в этом порядке) и загрузить его в настройки приложения как &laquo;Общий сертификат SSL&raquo;.  Через 10&ndash;30 минут ваш сертификат будет передан на серверы хостинга Parse и предоставлен пользователям, которые посещают размещенный сайт по протоколу HTTPS.

## Динамические веб-сайты

Для создания многостраничных динамических веб-приложений можно использовать Cloud Code и Express. В [Express](http://expressjs.com/) имеется много полезных инструментов, например, маршрутизация запросов, обработка файлов cookie и подготовка шаблона. C [Cloud Code](/docs/cloud_code_guide) вы можете, например, взаимодействовать с данными Parse и [отправлять HTTP-запросы](/docs/cloud_code_guide#networking).

Используя Parse, можно создать либо многостраничное веб-приложение с Express, либо одностраничное приложение Backbone с Parse JavaScript SDK со стороны клиента.  Преимущество Express в том, что ваш веб-сайт может сканироваться поисковыми системами, а с помощью клиентской программы Backbone можно создавать более быстро работающие приложения.  Подробную информацию о Express и Cloud Code можно найти в [документации Express API](/docs/js/api/symbols/express.html).

Express помогает быстро запускать и налаживать работу приложения. Кроме этого, мы можем предложить вам низкоуровневый интерфейс HTTP типа [Node.js](http://nodejs.org/).  Более подробную информацию см. в [документации API интерфейса HTTP](/docs/js/api/symbols/http.html). Если вы выберете Express или Node.js, то сначала нужно удалить `public/index.html`, чтобы запросы могли доходить до пользовательского обработчика.

В этом руководстве мы сосредоточимся на создании веб-приложений с помощью Express API.

### Начало работы

Чтобы создать начальное веб-приложение, после [установки](#started-project) хостинга Parse введите следующую команду в папке проекта parse.

```bash
$ parse generate
```

Эта команда создаёт следующую структуру каталогов в вашей облачной папке.  Существующий файл main.js при этом не затрагивается.

```bash
-cloud/
  app.js
  -views/
    hello.ejs
  main.js (not touched)
```

Затем нужно добавить следующую строку в верхней части `main.js`.  Она обеспечивает загрузку кода из файла `app.js`.

```js
require('cloud/app.js');
```

Затем выполните команду `parse deploy`, чтобы развернуть веб-приложение. После развёртывания ваше веб-приложение будет находиться по адресу `your-custom-subdomain.parseapp.com/hello`.  Рассмотрим этот пример приложения подробнее.

### Пример веб-приложения

Чтобы получить представление о возможностях Express, рассмотрим начальное веб-приложение.  Если вы все ещё не создали таковое, следуйте [этим инструкциям](#webapp-started).

Точкой входа верхнего уровня для приложения Express является файл `app.js`. В нём выполняется инициализация приложения, а пути запроса подключаются к соответствующему логическому элементу через API, выполняющий маршрутизацию Express.  Необходимо вызвать этот файл из `main.js`, потому что Cloud Code начинается в `main.js` при загрузке JavaScript. Мы рекомендуем разместить Cloud Functions в `main.js`, а весь код Express&nbsp;&mdash; в `app.js`.

В примере приложения файл `app.js` должен выглядеть следующим образом:

```js
// These two lines are required to initialize Express.
var express = require('express');
var app = express();

// Global app configuration section
app.set('views', 'cloud/views');  // Specify the folder to find templates
app.set('view engine', 'ejs');    // Set the template engine
app.use(express.bodyParser());    // Middleware for reading request body

// This is an example of hooking up a request handler with a specific request
// path and HTTP verb using the Express routing API.
app.get('/hello', function(req, res) {
  res.render('hello', { message: 'Congrats, you just set up your app!' });
});

// This line is required to make Express respond to http requests.
app.listen();
```

В верхней части раздела глобальной конфигурации приложения указываются некоторые настройки приложения и инициализируется ПО промежуточного уровня Express.  В настройках приложения можно найти модуль создания шаблонов для подготовки веб-страниц и расположение​ исходных файлов шаблона.  ПО промежуточного уровня Express&nbsp;&mdash; это дополнительные компоненты, которые выполняют предварительную обработку входящего запроса.  ПО, описанное в этом разделе, применяется ко всем путям запроса.

В примере приложения также есть папка `cloud/views` с файлом шаблона EJS (`hello.ejs`). В этом шаблоне переменная `message` будет заменена значением, указанным в строке `res.render()` файла `app.js`.

### Обработка запросов

Давайте рассмотрим простой обработчик запросов, который считывает текст запроса и отвечает сообщением, содержащим исходный текст последнего.

```js
app.post('/echo', function(req, res) {
  res.set('Content-Type', 'text/plain');
  res.send('echoing: ' + req.body.message);
});
```

Каждый обработчик запросов начинается с `app.VERB`, где `VERB`&nbsp;&mdash; любая из стандартных HTTP-команд, например `get`, `post`, `put` или `delete`. Таким образом Express распознает, на какой тип запроса HTTP должен реагировать обработчик.

Далее, параметр `'/echo'` указывает URL-адрес (или маршрут), на который должен реагировать обработчик запросов.  Затем указывается, с помощью какой функции принимаются запрос и объект ответа для выполнения логической схемы обработки запроса. При использовании ПО `express.bodyParser` `req.body` нужно заполнять входными данными. Например, если текст необработанного запроса состоит из `{ "message": "hi" }`, то `req.body.message` выше будет иметь значение `'hi'`.  Наконец, [`res.send()`](/docs/js/api/symbols/express.Response.html#send) отправляет Express команду внести указанную строку в объект ответа.

### ПО промежуточного уровня Express

ПО промежуточного уровня&nbsp;&mdash; это модули, которые обрабатывают запрос, прежде чем его получит обработчик запросов.  Эти компоненты преобразовывают необработанный запрос HTTP в объект запроса, с которым можно легко работать в обработчике запросов. Cloud Code поддерживает ряд программ промежуточного уровня, предоставляемых Express:

*   [`express.basicAuth()`](/docs/js/api/symbols/express.html#.basicAuth) позволяет настроить базовую HTTP-аутентификацию для веб-сайта.
*   [`express.bodyParser()`](/docs/js/api/symbols/express.html#.bodyParser) преобразует текст запроса HTTP (JSON или с кодировкой формы www) в объект `request.body`.
*   [`express.methodOverride()`](/docs/js/api/symbols/express.html#.methodOverride)&nbsp;&mdash; стандартная веб-форма, которая поддерживает только HTTP POST.  С помощью этого ПО промежуточного уровня веб-форма может выдавать Express запросы HTTP PUT/DELETE.  Эта функция помогает строго придерживаться принципов RESTful.
*   [`express.cookieParser()`](/docs/js/api/symbols/express.html#.cookieParser) считывает cookie-файл запроса, отправленный браузером, и помещает его в объекты `request.cookies` и `express.request.signedCookies`.
*   [`express.cookieSession()`](/docs/js/api/symbols/express.html#.cookieSession) позволяет хранить данные сеанса в подписанном cookie-файле за счет установки объекта `request.session`.
*   [`express.csrf()`](/docs/js/api/symbols/express.html#.csrf) защищает от межсайтовой подделки запросов.

Кроме того, мы предоставляем следующее пользовательское ПО промежуточного уровня:

*   [`parseExpressRawBody()`](/docs/js/api/symbols/parseExpressRawBody.html) позволяет получить доступ к тексту необработанного запроса как к объекту [`Buffer`](/docs/js/api/symbols/Buffer.html) в `req.body`.  Эта функция поможет получить прямой доступ к байтам в запросе или считать текст запроса в другом формате данных (например, XML) с помощью собственного средства синтаксического анализа в обработчике запросов.

Добавить ПО промежуточного уровня к приложению можно с помощью [`app.use()`](/docs/js/api/symbols/express.Application.html#use).  Стандартное ПО промежуточного уровня Express представляет собой функции, поэтому убедитесь, что их вызов осуществляется соответственно (например, `app.use(express.csrf()`). ПО промежуточного уровня приложения нужно добавить до регистрации каких-либо обработчиков запросов с помощью `app.VERB()`.

При настройке ПО промежуточного уровня Express в разделе глобальной конфигурации приложения придерживайтесь порядка, указанного выше.  Ненужное вам ПО можно не добавлять.  Соблюдать порядок необходимо, потому что более позднее ПО промежуточного уровня может зависеть от данных, созданных более ранним.

### Подготовка шаблонов

Шаблоны&nbsp;&mdash; это удобный способ динамического создания веб-материалов, который помогает сократить дублирование кода.  Cloud Code предоставляет модули для шаблонизаторов EJS и Jade.

Шаблонизатор определяется в разделе глобальной конфигурации приложения с помощью `app.set('view engine', ENGINE_NAME)`, где `ENGINE_NAME`&nbsp;&mdash; это либо `'ejs'`, либо `'jade'`. Расширение файла шаблона в папке `cloud/views` должно соответствовать `ENGINE_NAME`. Пример шаблона приложения в EJS (`hello.ejs`) или Jade (`hello.jade`) выглядит следующим образом:

```html
// Using EJS syntax
<!DOCTYPE html>
<html>
  <head>
    <title>Sample App</title>
  </head>
  <body>

# Hello World

<%%= message %>

  </body>
</html>
```

```html
// Using Jade syntax
doctype 5
html
  head
    title Sample App
  body
    h1 Hello World
    p= message
```

Более подробную информацию о синтаксисе для каждого шаблонизатора можно найти на домашних страницах [EJS](https://github.com/visionmedia/ejs) и [Jade](https://github.com/visionmedia/jade).

Подготовка шаблонов выполняется с помощью команды [`res.render()`](/docs/js/api/symbols/express.Response.html#render). Первый аргумент&nbsp;&mdash; это имя файла шаблона.  Если расширение не указано, то Express будет искать файл с расширением, соответствующим настройке шаблонизатора приложения. Второй аргумент&nbsp;&mdash; это объект JSON, который содержит все переменные в шаблоне и соответствующие им значения.  Каждая переменная в шаблоне служит в качестве прототипа и во время подготовки шаблона заменяется на фактическое значение.

### Получение входных данных пользователя

Получение входных данных пользователя с помощью Express в Cloud Code не представляет труда.  Можно создать элемент формы в шаблоне, чтобы пользователь мог вводить текст, а затем добавить обработчик для запроса, выданного при отправке формы.

Теперь добавим простую форму для готового примера шаблона приложения.  Замените `hello.ejs` или `hello.jade` на следующий код:

```html
// Using EJS syntax
<!DOCTYPE html>
<html>
  <head>
    <title>Sample App</title>
  </head>
  <body>

# Hello World

    <p><%%= message %>

    <form method="post" action="/hello">

        <input name="message"></input>
        <input class="button" type="submit" value="Update Greeting">

    </form>
  </body>
</html>
```
```html
// Using Jade syntax
doctype 5
html
  head
    title Sample App
  body
    h1 Hello World
    p= message
    form(method="post", action="/hello")
      p
        input(type="text", name="message")
        input(type="submit", name="submit", value="Update Greeting")
```

Затем нужно добавить в `app.js` обработчик для запроса HTTP POST.

```js
app.post('/hello', function(req, res) {
  res.render('hello', { message: req.body.message });
});
```

Предположим, что пользователь вводит &laquo;привет&raquo; в текстовое поле, а затем нажимает кнопку &laquo;Обновить приветствие&raquo;.  Форма отправит запрос HTTP POST на URL-адрес `http://example.parseapp.com/hello` с текстом запроса `message=hi`.  ПО промежуточного уровня `express.bodyParser` считает текст запроса и установит для `req.body.message` значение `'hi'`. Затем запрос запускает обработчик, который упоминался выше, потому что команда HTTP и URL-путь совпадают.  Наконец, обработчик запросов создаёт шаблон `hello.ejs`. Для этого в прототип вставляется `'hi'` для переменной `message`.

### Управление сеансами пользователя

С помощью ПО промежуточного уровня `parseExpressCookieSession` в приложение Express можно добавить управление сеансами и аутентификацией[`Parse.User`](/docs/js_guide#users). Нужно только выполнить команду `Parse.User.logIn()` в Cloud Code, и ПО промежуточного уровня будет автоматически управлять сеансами пользователя.

Можно использовать веб-форму, чтобы запросить учетные данные и предоставить пользователю вход в Cloud Code после получения данных от этой формы.  После выполнения программы `Parse.User.logIn()` ПО промежуточного уровня автоматически установит файл cookie в браузере пользователя.  Во время последующих HTTP-запросов от того же браузера ПО промежуточного уровня будет использовать этот файл cookie для автоматической установки [текущего пользователя](/docs/js_guide#users-current) в Cloud Code. Благодаря этому, списки [ACL](/docs/js_guide#users-acls) будут работать в Cloud Code должным образом, и вы сможете при необходимости извлекать весь объект текущего пользователя.  Наконец, когда вы будете выполнять в Cloud Code команду `Parse.User.logOut()` для завершения сеанса пользователя, ПО промежуточного уровня автоматически удалит файл cookie браузера.  Код примера приложения см. в [документации](/docs/js/api/symbols/parseExpressCookieSession.html) к этому ПО промежуточного уровня.

При работе с пользовательскими данными по возможности следует использовать протокол HTTPS.  Чтобы защитить ваше приложение и пользователей, для ПО промежуточного уровня `parseExpressCookieSession` требуется использовать протокол HTTPS.  Для вашего удобства мы также предоставляем ПО промежуточного уровня `parseExpressHttpsRedirect`, которое перенаправляет все HTTP-запросы на HTTPS.  Подробную информацию см. в [документации](/docs/js/api/symbols/parseExpressHttpsRedirect.html) к ПО.

### Статический контент

Приложение Express может работать параллельно с любым статическим контентом, развернутым из папки `public`.  Когда запрос приходит на URL-адрес вашего поддомена, сначала Parse будет искать в каталоге `public` соответствующий файл.  Если такого файла в каталоге не окажется, программа Parse вызовет обработчики запросов Express, которые вы зарегистрировали в Cloud Code.  Если соответствие не будет найдено, Parse сгенерирует страницу &laquo;404 - не найдено&raquo;.

 При работе со статическим контентом с использованием Express мы рекомендуем следующую структуру каталогов для вашего проекта.

```bash
-cloud/
  main.js            Cloud Code functions, require cloud/app.js here
  app.js             Express app configuration and request handling logic
  -views/            View template files that Express needs to render
    hello.ejs
-public/
  example.html       Static HTML files
  favicon.ico        Your favicon logo
  -stylesheets/      CSS stylesheets
    style.css
```

## Ведение журнала

Если вы хотите записать сообщение в файлы журнала, которые открываются с помощью команды `parse log`, то можно использовать команды `console.log` `console.error` или `console.warn`.  Как `console.error`, так и `console.warn` выполнит запись в журнал ошибок.

```js
app.post('/hello', function(req, res) {
  console.log("New message: " + req.body.message);
  res.render('hello', { message: req.body.message });
});
```

## Разработка и производство

Приложение для разработки можно использовать для проверки нового кода, а приложение для производства&nbsp;&mdash; для запуска приложения, распространяемого для пользователей.

### Добавление нового приложения в проект

Вам потребуется связать несколько приложений с вашим проектом. Команда `parse new` свяжет первое приложение с проектом.  Ниже показано, как с помощью команды `parse add [alias]` с проектом можно связать дополнительные приложения:

```bash
$ parse add production
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounterProd
2:PiecesOfEightCounterDev
Select an App: 1
```

В приведенном выше примере приложение `PiecesOfEightCounterProd` связывается с вашим проектом. Кроме того, создается псевдоним для нового приложения `production`, который предоставляет сокращённый вариант ссылки на приложение.

### Разработка веб-сайта

При разработке нового кода можно использовать команду `develop`, чтобы инструмент Parse с запуском из командной строки постоянно проверял наличие обновлений для вашего проекта и загружал изменения.  Команда выглядит так:

```bash
$ parse develop development
E2013-11-21T01:05:56.257Z] Deploy failed with error:Error: Uncaught SyntaxError: Unexpected token ; in app.js:30
    at main.js:1:1
I2013-11-21T01:06:21.504Z] Deployed v172 with triggers:
  Cloud Functions:
    hello
```

Обратите внимание на то, что для команды `develop` вам нужно четко указать приложение, которое вы собираетесь изменить.  Таким образом, вы предотвратите случайное исполнение команды `develop` в вашем рабочем приложении, что может привести к развертыванию в нем непроверенного кода.  Инструмент с запуском из командной строки будет загружать изменения кода и отображать новые сообщения журнала, пока вы не нажмёте комбинацию клавиш Ctrl + C.

### Развертывание кода в производственной среде

После завершения тестирования и обновления код можно развернуть в производственной среде. Для этого выполните в рабочем приложении команду `deploy` следующим образом:

```bash
$ parse deploy production
New release is named v2
```
