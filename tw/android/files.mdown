# 檔案

## ParseFile

`ParseFile` 讓您可以將應用程式檔案存放於雲端，這些檔案對於一般 `ParseObject` 而言可能太大或是不好處理。最常見的使用案例就是圖像的存放，但是您也可以用來存放文件、影片、音樂和任何其他的二進位資料（上限 10 MB）。

`ParseFile` 很容易就能上手。首先，您必須確認 `byte[]` 表單中存有資料，然後利用這些資料建立 `ParseFile`。在此範例中，我們將只使用一個字串：

```java
byte[] data = "Working at Parse is great!".getBytes();
ParseFile file = new ParseFile("resume.txt", data);
```

請注意，本範例中我們將檔案命名為 `resume.txt`。在這裡有兩件事需要注意： 

*   您無須擔心檔名衝突。每次上傳都會取得唯一識別碼，所以就算上傳多個名為 `resume.txt` 的檔案也不會有問題。
*   命名時記得加上副檔名，這很重要。這能讓 Parse 辨識出檔案類型，並且以相應的方式處理。因此，如果您正在存放 PNG 圖像，請確認檔案名稱的結尾為 `.png`。

接下來，您會希望將檔案儲存至雲端。如同 `ParseObject`，有許多不同的 `save` 方法可供您使用，端看何種回呼和錯誤處理方式適合您。

```java
file.saveInBackground();
```

最後，儲存完成後，您可以將 `ParseFile` 關聯至 `ParseObject`，就像是關聯其他資料一樣：

```java
ParseObject jobApplication = new ParseObject("JobApplication");
jobApplication.put("applicantName", "Joe Smith");
jobApplication.put("applicantResumeFile", file);
jobApplication.saveInBackground();
```

將檔案擷取回來牽涉到在 `ParseObject` 上呼叫 `getData` 的其中一個變數。在這裡我們從另一個 JobApplication 物件擷取下履歷表檔案：

```java
ParseFile applicantResume = (ParseFile)anotherApplication.get("applicantResumeFile");
applicantResume.getDataInBackground(new GetDataCallback() {
    public void done(byte[] data, ParseException e) {
        if (e == null) {
            // data has the bytes for the resume
        } else {
            // something went wrong
        }
    }
});
```

就像是在 `ParseObject` 上一樣，您很有可能會想要使用 `getData` 的背景版本。

## 進度

透過將 ProgressCallback 傳遞至 `saveInBackground` 和 `getDataInBackground`，能夠輕鬆使用 ParseFile 取得上傳和下載的進度。例如：

```java
byte[] data = "Working at Parse is great!".getBytes();
ParseFile file = new ParseFile("resume.txt", data);

file.saveInBackground(new SaveCallback() {
    public void done(ParseException e) {
        // Handle success or failure here ...
    }
}, new ProgressCallback() {
    public void done(Integer percentDone) {
        // Update your progress spinner here. percentDone will be between 0 and 100.
    }
});
```

您可以使用 [REST API](/docs/rest#files-deleting) 刪除被物件參照的檔案。您必須提供主要金鑰才能刪除檔案。

如果您的檔案並未被應用程式中的物件參照，則無法透過 REST API 刪除。您可以在應用程式的「設定」頁面要求清理未使用的檔案。請記住，這麼做可能中斷功能，實際情況取決於透過網址屬性存取未參照檔案而定。目前與物件關聯的檔案，將不會受到影響。
