# 用户

许多应用程序拥有能让手机和其他平台上运行的登陆系统。我们通过使用REST API，可在 Parse 的基础上来创建这个功能。

通常来说，用户与其他对象拥有完全相同的特性，如灵活架构. 所不同的是用户对象的用户名和密码是必填的，密码将会被自动加密并安全地储存，Parse 会强制实行用户和电子邮箱地址的唯一性。


## 注册

因为用户名和密码是必填的，注册新的用户不同于创建一个普通对象。密码的处理方式和其他数据域的不一样，我们将密码安全散列在云中并且也不会将密码传输回客户端。

在应用程序的设置页，你可以请求 Parse 来验证用户的电子邮箱地址。通过启用这个设置，我们会给予使用电子邮箱地址注册的新用户发送确认电子邮件。你可以通过 `emailVerified` 来检查用户是否已经验证他们的 `email`。

你可以发送一个 POST 请求来注册新用户。你也可以添加额外的数据域。 例如，创建一个新用户并填上电话号码：

```bash
curl -X POST \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  -H "X-Parse-Revocable-Session: 1" \
  -H "Content-Type: application/json" \
  -d '{"username":"cooldude6","password":"p_n7!-e8","phone":"415-392-0202"}' \
  https://api.parse.com/1/users
```
```python
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('POST', '/1/users', json.dumps({
       "username": "cooldude6",
       "password": "p_n7!-e8",
       "phone": "415-392-0202"
     }), {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}",
       "X-Parse-Revocable-Session": "1",
       "Content-Type": "application/json"
     })
result = json.loads(connection.getresponse().read())
print result
```

通过指定 `The X-Parse-Revocable-Session` header，Parse 会返回一个 [revocable session](#sessions) 无论应用是否启用 "Require Revocable Sessions" 设置(在您的 Parse 应用程序设置页面)。当手机应用访问同样的数据，这对于 [transitioning from legacy session tokens](https://www.parse.com/tutorials/session-migration-tutorial) 可撤销对话这项功能非常有用。如果不启用 "Require Revocable Sessions" (这项设置对于新的应用来说是默认的)， `X-Parse-Revocable-Session` header是不必要的。当你在注册的过程中请求可撤销对话，云会自动创建一个 `%{ParseSession}` 对象。在这个请求，你也可以通过指定选择是否在 `X-Parse-Installation-Id` header填充 installtion 的 `installationId` 来让 Parse 自动连接这个对话与这个 installtion。

当创建成功，HTTP 返回的是 `201 Created` 和存放有新用户 URL 的 `Location` header：

```js
Status: 201 Created
Location: https://api.parse.com/1/users/g7y9tkhB7O
```

返回的数据是一个 JSON 对象， 其中包括 `objectId`，该对象创建的时间戳 `createdAt` 和随后用于代表该用户发送请求的身份验证码 `sessionToken`：

```json
{
  "createdAt": "2011-11-07T20:58:34.448Z",
  "objectId": "g7y9tkhB7O",
  "sessionToken": "r:pnktnjyb996sj4p156gjtp4im"
}
```

## 登录

您让用户注册后，需要让他们以后登录到他们的帐户。要如此，您可以发送一个 GET 请求到 `/1/login` 终端，此请求包括使用 URL-encoded 编码的 `username` 和 `password` 参数。

```bash
curl -X GET \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  -H "X-Parse-Revocable-Session: 1" \
  -G \
  --data-urlencode 'username=cooldude6' \
  --data-urlencode 'password=p_n7!-e8' \
  https://api.parse.com/1/login
```
```python
import json,httplib,urllib
connection = httplib.HTTPSConnection('api.parse.com', 443)
params = urllib.urlencode({"username":"cooldude6","password":"p_n7!-e8"})
connection.connect()
connection.request('GET', '/1/login?%s' % params, '', {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}",
       "X-Parse-Revocable-Session": "1"
     })
result = json.loads(connection.getresponse().read())
print result
```

通过指定 `The X-Parse-Revocable-Session` header，Parse 会返回一个 [revocable session](#sessions) 无论应用是否启用 "Require Revocable Sessions" 设置(在您的 Parse 应用程序设置页面)。当手机应用访问同样的数据，这对于 [transitioning from legacy session tokens](https://www.parse.com/tutorials/session-migration-tutorial) 可撤销对话这项功能非常有用。如果不启用 "Require Revocable Sessions" (这项设置对于新的应用来说是默认的)， `X-Parse-Revocable-Session` header是不必要的。当你在注册的过程中请求可撤销对话，云会自动创建一个 `%{ParseSession}` 对象。在这个请求，你也可以通过指定选择是否在 `X-Parse-Installation-Id` header 填充 installtion 的 `installationId` 来让 Parse 自动连接这个对话与这个 installtion。

返回的数据是一个 JSON 对象， 其中包括除了密码以外用户所提供的所有数据域。其中也包括 `createdAt`, `updatedAt`, `objectId`, and `sessionToken` 等数据域：

```json
{
  "username": "cooldude6",
  "phone": "415-392-0202",
  "createdAt": "2011-11-07T20:58:34.448Z",
  "updatedAt": "2011-11-07T20:58:34.448Z",
  "objectId": "g7y9tkhB7O",
  "sessionToken": "r:pnktnjyb996sj4p156gjtp4im"
}
```

## 验证电子邮箱

在应用程序的设置中启用电子邮箱验证，可以让应用程序将某些使用体验提供给验证过电子邮箱地址的用户。电子邮箱验证会将 `emailVerified` 键添加到 `%{ParseUser}` 目标中。设置或修改 `%{ParseUser}` 的 `email` 后，`emailVerified` 被设置为 `false`。随后，Parse 会向用户发送一个邮件，其中包含一个链接，可将 `emailVerified` 设置为 `true`。

有三种 `emailVerified` 状态需要考虑：

1.  `true` － 用户通过点击 Parse 发送给他们的链接确认电子邮箱地址。最初创建用户帐户时，`PFUsers` 没有 `true` 值。
2.  `false` － `%{ParseUser}` 对象最后一次刷新时，用户未确认其电子邮箱地址。若 `emailVerified` 为 `false`，可以考虑调用 `%{ParseUser}` 中的 `refresh:`。
3.  _缺失_ － 电子邮箱验证关闭或 `%{ParseUser}` 没有 `email` 时创建了 `%{ParseUser}`。

## 重置密码

你可以为有使用电子邮箱地址关联的用户初始重设密码这项功能。要如此，你可以发送一个携带 `email` 的 POST 请求到 `/1/requestPasswordReset` 终端。

```bash
curl -X POST \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  -H "Content-Type: application/json" \
  -d '{"email":"coolguy@iloveapps.com"}' \
  https://api.parse.com/1/requestPasswordReset
```
```python
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('POST', '/1/requestPasswordReset', json.dumps({
       "email": "coolguy@iloveapps.com"
     }), {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}",
       "Content-Type": "application/json"
     })
result = json.loads(connection.getresponse().read())
print result
```

当创建成功， 返回的是一个空的 JSON 对象。

## 用户检索

你也可以通过发送一个 GET 请求到一个在先前创建时候 `Location` header返回的 URL 来获取用户的信息。例如，我们想获取先前创建的用户：

```bash
curl -X GET \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  https://api.parse.com/1/users/g7y9tkhB7O
```
```python
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('GET', '/1/users/g7y9tkhB7O', '', {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}"
     })
result = json.loads(connection.getresponse().read())
print result
```

返回的数据是一个 JSON 对象， 其中包括除了密码以外用户提供的所有数据域。其中也包括 `createdAt`, `updatedAt`, `objectId`, and `sessionToken` 等数据域：

```json
{
  "username": "cooldude6",
  "phone": "415-392-0202",
  "createdAt": "2011-11-07T20:58:34.448Z",
  "updatedAt": "2011-11-07T20:58:34.448Z",
  "objectId": "g7y9tkhB7O"
}
```

## 验证会话令牌 ／ 获取当前用户

拥有了会话令牌，你也可以通过发送一个 GET 请求到 `/1/users/me` 终端来获取与该会话令牌关联的用户：

```bash
curl -X GET \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  -H "X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im" \
  https://api.parse.com/1/users/me
```
```python
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('GET', '/1/users/me', '', {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}",
       "X-Parse-Session-Token": "r:pnktnjyb996sj4p156gjtp4im"
     })
result = json.loads(connection.getresponse().read())
print result
```

返回的数据和先前获取的 JSON 对象是一样的。如果会话令牌无效，一个异常对象会被返回：

```json
{
  "code": 209,
  "error": "invalid session token"
}
```

## 用户更新

通常来说，除了用户自己以外没有人允许更改他们自己的信息。要让用户验证自己，用户需要将先前通过注册或者登陆所获取的会话令牌添加到请求的 `X-Parse-Session-Token` header里。

要更改现有的用户信息，发送一个 PUT 请求到用户 URL 上。你所没有指定的键值会保持不变，因此你可以只更新部分用户信息。`username` 和 `password` 也可能被改变，但新的用户名必须没有在用。

例如，我们想改变 `cooldude6` 的电话号码：

```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  -H "X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im" \
  -H "Content-Type: application/json" \
  -d '{"phone":"415-369-6201"}' \
  https://api.parse.com/1/users/g7y9tkhB7O
```
```python
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('PUT', '/1/users/g7y9tkhB7O', json.dumps({
       "phone": "415-369-6201"
     }), {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}",
       "X-Parse-Session-Token": "r:pnktnjyb996sj4p156gjtp4im",
       "Content-Type": "application/json"
     })
result = json.loads(connection.getresponse().read())
print result
```

返回的数据是一个 JSON 对象，其中包括只包括一个 `updatedAt` 数据域和其相对应的时间戳。

```json
{
  "updatedAt": "2011-11-07T21:25:10.623Z"
}
```

## 检索

你可以通过发送一个 GET 请求到用户 URL 来获取多个用户的信息。不传递任何 URL 参数，这将会列出所有的用户：

```bash
curl -X GET \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  https://api.parse.com/1/users
```
```python
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('GET', '/1/users', '', {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}"
     })
result = json.loads(connection.getresponse().read())
print result
```

返回的值是一个 JSON 对象，其中包括一个 `results` 数据域并且该数据域包含一个存放用户信息的 JSON 数组：

```json
{
  "results": [
    {
      "username": "bigglesworth",
      "phone": "650-253-0000",
      "createdAt": "2011-11-07T20:58:06.445Z",
      "updatedAt": "2011-11-07T20:58:06.445Z",
      "objectId": "3KmCvT7Zsb"
    },
    {
      "username": "cooldude6",
      "phone": "415-369-6201",
      "createdAt": "2011-11-07T20:58:34.448Z",
      "updatedAt": "2011-11-07T21:25:10.623Z",
      "objectId": "g7y9tkhB7O"
    }
  ]
}
```

所有作用在普通对象的检索选项同样会作用在用户对象，更多信息可以查询 [Querying Objects](#queries-basic)。

## 用户删除 

要从云删除一个用户，发送 DELETE 请求到其 URL。你也必须提供 `X-Parse-Session-Token` header来通过验证。 例如：

```bash
curl -X DELETE \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  -H "X-Parse-Session-Token: r:pnktnjyb996sj4p156gjtp4im" \
  https://api.parse.com/1/users/g7y9tkhB7O
```
```python
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('DELETE', '/1/users/g7y9tkhB7O', '', {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}",
       "X-Parse-Session-Token": "r:pnktnjyb996sj4p156gjtp4im"
     })
result = json.loads(connection.getresponse().read())
print result
```

## 用户关联

Parse 允许你的用户链接像Twiiter 和 Facebook这样的第三方服务，让你的用户可以使用第三方服务现有的身份来注册或者登陆你的应用程序。这项功能可以通过提供你所选择的第三方服务的验证数据注册或者更新一个用户的 `authData`。当你成功关联第三方服务，关于这个第三方服务的 `authData` 会被存储到用户并且可以被登陆操作所检索。

`authData` 是一个 JSON 对象，其中包括每个已经关联的第三方服务的数据。在每种情况下，你要负责完成满足第三方服务的要求来获取关联信息的流程 (e.g. OAuth 1.0a)。

### Facebook `authData`

```json
{
  "facebook": {
    "id": "user's Facebook id number as a string",
    "access_token": "an authorized Facebook access token for the user",
    "expiration_date": "token expiration date of the format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
  }
}
```
更多信息可以查询 [Facebook login](https://developers.facebook.com/docs/authentication/)。

### Twitter `authData`

```json
{
  "twitter": {
    "id": "user's Twitter id number as a string",
    "screen_name": "user's Twitter screen name",
    "consumer_key": "your application's consumer key",
    "consumer_secret": "your application's consumer secret",
    "auth_token": "an authorized Twitter token for the user with your application",
    "auth_token_secret": "the secret associated with the auth_token"
  }
}
```
更多信息可以查询 [Twitter login](https://dev.twitter.com/docs/auth/implementing-sign-twitter)。

### 匿名者用户 `authData`

```json
{
  "anonymous": {
    "id": "random UUID with lowercase hexadecimal digits"
  }
}
```

### 注册和登录

使用第三方服务来注册和登录使用同样的 POST 请求，只有 `authData` 是用户自己制订的：

```bash
curl -X POST \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  -H "X-Parse-Revocable-Session: 1" \
  -H "Content-Type: application/json" \
  -d '{
        "authData": {
          "twitter": {
            "id": "12345678",
            "screen_name": "ParseIt",
            "consumer_key": "SaMpLeId3X7eLjjLgWEw",
            "consumer_secret": "SaMpLew55QbMR0vTdtOACfPXa5UdO2THX1JrxZ9s3c",
            "auth_token": "12345678-SaMpLeTuo3m2avZxh5cjJmIrAfx4ZYyamdofM7IjU",
            "auth_token_secret": "SaMpLeEb13SpRzQ4DAIzutEkCE2LBIm2ZQDsP3WUU"
          }
        }
      }' \
  https://api.parse.com/1/users
```
```python
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('POST', '/1/users', json.dumps({
       "authData": {
         "twitter": {
           "id": "12345678",
           "screen_name": "ParseIt",
           "consumer_key": "SaMpLeId3X7eLjjLgWEw",
           "consumer_secret": "SaMpLew55QbMR0vTdtOACfPXa5UdO2THX1JrxZ9s3c",
           "auth_token": "12345678-SaMpLeTuo3m2avZxh5cjJmIrAfx4ZYyamdofM7IjU",
           "auth_token_secret": "SaMpLeEb13SpRzQ4DAIzutEkCE2LBIm2ZQDsP3WUU"
         }
       }
     }), {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}",
       "X-Parse-Revocable-Session": "1",
       "Content-Type": "application/json"
     })
result = json.loads(connection.getresponse().read())
print result
```

通过指定 `The X-Parse-Revocable-Session` header，Parse 会返回一个 [revocable session](#sessions) 无论应用是否启用 "Require Revocable Sessions" 设置(在您的 Parse 应用程序设置页面)。当手机应用访问同样的数据，这对于 [transitioning from legacy session tokens](https://www.parse.com/tutorials/session-migration-tutorial) 可撤销对话这项功能非常有用。如果不启用 "Require Revocable Sessions" (这项设置对于新的应用来说是默认的)， `X-Parse-Revocable-Session` header是不必要的。当你在注册的过程中请求可撤销对话，云会自动创建一个 `%{ParseSession}` 对象。在这个请求，你也可以通过指定选择是否在 `X-Parse-Installation-Id` header填充 installtion 的 `installationId` 来让 Parse 自动连接这个对话与这个 installtion。

Parse 之后会验证所提供的 `authData` 是否有效并且会检查是否有用户已经与该数据关联。若有，它会返回一个状态码 `200 OK` 和 该用户的信息（包括用户 `sessionToken`）：

```js
Status: 200 OK
Location: https://api.parse.com/1/users/uMz0YZeAqc
```

像该返回数据域：

```json
{
  "username": "Parse",
  "createdAt": "2012-02-28T23:49:36.353Z",
  "updatedAt": "2012-02-28T23:49:36.353Z",
  "objectId": "uMz0YZeAqc",
  "sessionToken": "r:samplei3l83eerhnln0ecxgy5",
  "authData": {
    "twitter": {
      "id": "12345678",
      "screen_name": "ParseIt",
      "consumer_key": "SaMpLeId3X7eLjjLgWEw",
      "consumer_secret": "SaMpLew55QbMR0vTdtOACfPXa5UdO2THX1JrxZ9s3c",
      "auth_token": "12345678-SaMpLeTuo3m2avZxh5cjJmIrAfx4ZYyamdofM7IjU",
      "auth_token_secret": "SaMpLeEb13SpRzQ4DAIzutEkCE2LBIm2ZQDsP3WUU"
    }
  }
}
```

如果用户从来没有关联这个账户，你会收到一个状态码 `201 Created`，说明有一个新用户被创建：

```js
Status: 201 Created
Location: https://api.parse.com/1/users/uMz0YZeAqc
```
 
返回的数据包括 `objectId`, `createdAt`, `sessionToken` 和 自动创建的唯一的 `username`。例如：

```json
{
  "username": "iwz8sna7sug28v4eyu7t89fij",
  "createdAt": "2012-02-28T23:49:36.353Z",
  "objectId": "uMz0YZeAqc",
  "sessionToken": "r:samplei3l83eerhnln0ecxgy5"
}
```

### 关联

关联现有的用户和第三方服务像 Facebook 和 Twitter 使用一个 PUT 请求来关联该用户和 `authData`。 例如，连接用户与Facebook帐户会使用这样的请求：

```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  -H "X-Parse-Session-Token: r:samplei3l83eerhnln0ecxgy5" \
  -H "Content-Type: application/json" \
  -d '{
        "authData": {
          "facebook": {
            "id": "123456789",
            "access_token": "SaMpLeAAibS7Q55FSzcERWIEmzn6rosftAr7pmDME10008bWgyZAmv7mziwfacNOhWkgxDaBf8a2a2FCc9Hbk9wAsqLYZBLR995wxBvSGNoTrEaL",
            "expiration_date": "2012-02-28T23:49:36.353Z"
          }
        }
      }' \
  https://api.parse.com/1/users/uMz0YZeAqc
```
```python
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('PUT', '/1/users/uMz0YZeAqc', json.dumps({
       "authData": {
         "facebook": {
           "id": "123456789",
           "access_token": "SaMpLeAAibS7Q55FSzcERWIEmzn6rosftAr7pmDME10008bWgyZAmv7mziwfacNOhWkgxDaBf8a2a2FCc9Hbk9wAsqLYZBLR995wxBvSGNoTrEaL",
           "expiration_date": "2012-02-28T23:49:36.353Z"
         }
       }
     }), {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}",
       "X-Parse-Session-Token": "r:samplei3l83eerhnln0ecxgy5",
       "Content-Type": "application/json"
     })
result = json.loads(connection.getresponse().read())
print result
```

关联成功之后，你可以使用匹配的 `authData` 来进行验证。

### 取消关联

取消关联现有的用户和第三方服务也是用 PUT 请求来设置 `authData` 为 `null` 从而删除该用户的 `authData`。 例如，取消连接用户与Facebook帐户会使用这样的请求：

```bash
curl -X PUT \
  -H "X-Parse-Application-Id: ${APPLICATION_ID}" \
  -H "X-Parse-REST-API-Key: ${REST_API_KEY}" \
  -H "X-Parse-Session-Token: r:samplei3l83eerhnln0ecxgy5" \
  -H "Content-Type: application/json" \
  -d '{
        "authData": {
          "facebook": null
        }
      }' \
  https://api.parse.com/1/users/uMz0YZeAqc
```
```bash
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('PUT', '/1/users/uMz0YZeAqc', json.dumps({
       "authData": {
         "facebook": null
       }
     }), {
       "X-Parse-Application-Id": "${APPLICATION_ID}",
       "X-Parse-REST-API-Key": "${REST_API_KEY}",
       "X-Parse-Session-Token": "r:samplei3l83eerhnln0ecxgy5",
       "Content-Type": "application/json"
     })
result = json.loads(connection.getresponse().read())
print result
```

## 安全

当你使用 REST API 密钥来访问 Parse，访问可以通过 ACL 来限制就像在iOS和Android的SDK一样。你仍然可以通过 REST API 来读取和修改 acls，只需访问对象的 `"ACL"` 键即可。

ACL 是被格式化为一个 JSON 对象，当中的键是对象的识别码或者一个特别的键 `"*"` 来代表公共访问权限。ACL 的值是 "permission objects"， 其 JSON 对象的键是权限的名字和其值总为 `true`。

例如，如果你想让识别码为 `"3KmCvT7Zsb"` 的用户拥有这个对象的读写权限，加上这个对象应该是公开可读的，其对应的 ACL 为：

```json
{
  "3KmCvT7Zsb": {
    "read": true,
    "write": true
  },
  "*": {
    "read": true
  }
}
```

如果你想忽视ACLs来访问你的数据，你可以使用 Dashboard 上提供的主秘钥。 现在你要设置的是 `X-Parse-Master-Key` header， 而不是 `X-Parse-REST-API-Key` header。 为了向后兼容性，你也可以通过传递应用的识别码作为用户名和主秘钥作为密码来使用 HTTP Basic Auth 进行主层面的验证。为了安全性，主秘钥不应该传递回给用户端，但是如果你的代码在一个可靠的环境下运行，你可以随意使用主秘钥来进行验证。