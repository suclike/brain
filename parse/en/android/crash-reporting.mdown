# Crash Reporting

Crash Reporting allows you to find out how your app is crashing in the wild. You'll be able to see your most impactful crashes, complete with stack traces, device information, and more. To get started, head over to the [Quick Start](/apps/quickstart#analytics/crashreporting/android/existing) to instrument your app.

## Enabling

To enable Crash Reporting, simply add this line to your `Application.onCreate` function, necessarily before you initialize your Parse app keys:

```java
// Enable Crash Reporting
ParseCrashReporting.enable(this);

// Setup Parse
Parse.initialize(this, "parseAppId", "parseClientKey");
```

Once this is enabled, crashes from your app will be sent to Parse and will show up in the analytics dashboard.

## Automatic Symbol Uploads

If you use ProGuard to obfuscate your code, it's important to send Parse the symbol files for each build of your app. This allows Parse to properly aggregate crash incidents together and show these crashes on the dashboard with proper symbols in the stack trace.

There are two ways to upload your symbol files: automatically after each build using the Gradle plugin and manually using the CLI. We highly recommend doing the upload automatically so you don't have to remember every time you cut a release.

### Enabling the Plugin

Add this to your module `build.gradle` file.

```java
buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://maven.parse.com/repo'
        }
    }
    dependencies {
        classpath 'com.parse.tools:gradle:1.+'
    }
}

apply plugin: 'com.parse'

parse {
    // ...
}
```

### Keys

In order to upload symbols, you need your Parse application ID and master key. You have two ways of doing that.

The simplest approach is to just put your keys inside the `parse { }` block.
       To avoid checking them into source control, you can use Gradle properties files.

```java
parse {
    applicationId "your_app_id"
    masterKey "master_key"
    // ...
}
```

Alternatively, if you have a cloud code project directory set up, you can point the plugin at it.

```java
parse {
    parseProjectDir "path/to/your/project"
    parseApp "specific/app/to/use" // optional, use if different from default.
    // ...
}
```

### Automatic Upload

The plugin will create a task of the form `parseUploadSymbols<Variant>` for every build variant configured to use ProGuard.

For example, you might have a `parseUploadSymbolsRelease` task. By default, this task is not run automatically. You can run it explicitly:

```bash
$ ./gradlew parseUploadSymbolsRelease
```

Alternatively, you can use the `uploadSymbols` directive. The following will upload symbols for all variants that use ProGuard,
       as a dependency to their respective `assemble<...>` tasks.

```java
parse {
    // ...
    uploadSymbols true
}
```

You can select which variants get this treatment.

```java
parse {
    // ...
    uploadSymbols = ['release']
}
```

Java-style regular expressions are also supported, and will be useful in case you have multiple build flavors (below, any release variants, as well as `mdpiDebug`).

```java
parse {
    // ...
    uploadSymbols = [~/(?i)^.*release.*$/, ~/(?i)^.*mdpidebug.*$/]
}
```

### Retries

By default, the plugin will retry uploading the symbols 3 times (in case of e.g. connection failures etc). You can change this behavior.

```java
parse {
    // ...
    retries 3 // anywhere between 0..10
}
```

## Automatic Symbol Uploads

You can manually upload symbol files using the command line tool. First, make sure you have set up a [Cloud Code directory](/docs/android/guide#cloud-code). Then, you can upload your symbol file:

```bash
$ parse symbols -a path/to/your.apk path/to/mapping.txt
```

The mapping.txt file can usually be found in:

*   `<project_root>/bin/proguard` if you are using Ant.
*   `<project_root>/build/outputs/release/proguard` if you are using Gradle.
*   `<project_root>/proguard` if you are using Eclipse.

Read more about the `mapping.txt` file in the [ProGuard documentation](http://developer.android.com/tools/help/proguard.html).

Manual uploads can be useful when you've forgotten to upload symbol files for a build that has been released. You will see a message to symbolicate the stack traces when you're viewing a crash that hasn't been symbolicated. Depending on the build system you're using, feel free to run parse symbols as part of your build process.

## Testing

Once you've enabled Crash Reporting, you'll want to test to make sure your crashes are properly being sent to Parse.

*   Add the following line to the end of your `Application.onCreate`, or anywhere in your main activity's `onCreate` method.
```java
throw new RuntimeException("Test Exception!");
```
*   Launch your app in an emulator or on a device.
*   You should see that the app force-closes. This should have been enough to send the report.

At this point, go to the Crash Reporting dashboard under Analytics for your app and make sure you see the crash in the listing. It can take up to a minute for the crash to show up.

## Workflow

By using Crash Reporting, you can dramatically improve the quality of your app by reducing the number of crashes your end users experience.

We recommend the following workflow to efficiently fix your crashes:

1.  **Identify crashes to fix**: The main view of the Crash Reporting dashboard shows all your crashes ordered by the number of occurrences. Typically, you'll want to start by fixing the crashes that are affecting the most users. You can click on each crash and get details such as the stack trace, OS versions, device types, and affected app versions.
2.  **Fix a crash**: Do some debugging and fix your crash in your client code.
3.  **Bump your build version and build a new release**
4.  **Mark the crash as resolved and release a new build to the App Store**: Once resolved, the crash will no longer show up on the crash listings page with the default filters. If the crash does occur again in a later version, it will automatically be marked as unresolved, and will show up on the listing again.
5.  Go back to step 1 and continue to improve your app!

## Troubleshooting

### Why aren't my crashes showing up on the dashboard?

Your app is probably not sending crash reports to Parse. Here are some things to check:

*   Make sure you are enabling Crash Reporting in the `Application.onCreate` function before you initialize Parse.
*   If you're testing, make sure your development environment isn't catching the crash with the debugger.
*   Crashes may take up to a minute to show up on the dashboard.

### Why aren't my crashes symbolicated?

You probably have not uploaded symbol files for the build of the app associated with the crash. Here are some things to check:

*   Make sure you have followed the instructions in setting up symbol uploading in the [Quick Start](/apps/quickstart#analytics/crashreporting/android/existing).
*   If you uploaded symbol files for a crash that was previously unsymbolicated, a new crash will show up with the symbols.

The old crash won't be updated with symbols, so you can go ahead and resolve that crash.
