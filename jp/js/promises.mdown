# Promise

コールバック以外にも、Parse JavaScript SDKのそれぞれの非同期メソッドは`Promise`を返します。Promiseでは、コールバックで取得するネストされたコードよりも、はるかに見やすいコードになります。


## `then`メソッド

&ensp; &ensp; 

それぞれの`Promise`には、コールバックのペアを取得する`then`という名前のメソッドがあります。Promiseが解決済みの場合は最初のコールバックが呼び出され、Promiseが却下の場合は2つ目のコールバックが呼び出されます。

```js
obj.save().then(function(obj) {
  // the object was saved successfully.
},
function(error) {
  // the save failed.
});
```


## Promiseのチェーン

Promiseはネストせずにチェーンすることができます。Promiseのコールバックが新しいPromiseを返した場合、2つ目のPromiseが解決されるまで最初のPromiseは解決されません。これにより、コールバックで取得するネストされたコードを使用しなくても、複数のアクションを実行できます。

```js
var query = new Parse.Query("Student");
query.descending("gpa");
query.find().then(function(students) {
  students[0].set("valedictorian", true);
  return students[0].save();
}).then(function(valedictorian) {
  return query.find();
}).then(function(students) {
  students[1].set("salutatorian", true);
  return students[1].save();
}).then(function(salutatorian) {
  // Everything is done!
});
```


## エラー処理

チェーン内のPromiseがエラーを返した場合、エラーコールバックが発生するまで、そのPromise以降に成功したコールバックがすべてスキップされます。エラーコールバックがそのエラーを変換することもできますし、却下されない新しいPromiseを返すことでそのエラーを処理することもできます。却下されたPromiseは例外のスローのようなものとして考えることができます。エラーコールバックは、エラーを処理したり再スローしたりできるcatchブロックのようなものです。

```js
var query = new Parse.Query("Student");
query.descending("gpa");
query.find().then(function(students) {
  students[0].set("valedictorian", true);
  // Force this callback to fail.
  return Parse.Promise.error("There was an error.");
}).then(function(valedictorian) {
  // Now this will be skipped.
  return query.find();
}).then(function(students) {
  // This will also be skipped.
  students[1].set("salutatorian", true);
  return students[1].save();
}, function(error) {
  // This error handler WILL be called. error will be "There was an error.".
  // Let's handle the error by returning a new promise.
  return Parse.Promise.as("Hello!");
}).then(function(hello) {
  // Everything is done!
}, function(error) {
  // This isn't called because the error was already handled.
});
```

通常、成功したコールバックの長いチェーンの最後にエラーハンドラを1つ付けておくと便利です。


## Promiseの作成

最初は、`find`や`save`といったメソッドが返すPromiseを使用します。ただし、より高度なシナリオでは、独自のPromiseの作成が必要になることがあります。`Promise`を作成したら、`resolve`か`reject`を呼び出してコールバックをトリガーする必要があります。

```js
var successful = new Parse.Promise();
successful.resolve("The good result.");

var failed = new Parse.Promise();
failed.reject("An error message.");
```

作成時にPromiseの結果が分かる場合は、便利なメソッドを使用できます。

```js
var successful = Parse.Promise.as("The good result.");
var failed = Parse.Promise.error("An error message.");
```


## 連続するPromise

前のタスクが完了してから次のタスクが実行されるため、一連のタスクを連続して実行したい場合は、Promiseを使用すると便利です。たとえば、ブログのコメントをすべて削除するような場合に使用します。

```js
var query = new Parse.Query("Comments");
query.equalTo("post", 123);

query.find().then(function(results) {
  // Create a trivial resolved promise as a base case.
  var promise = Parse.Promise.as();
  _.each(results, function(result) {
    // For each item, extend the promise with a function to delete it.
    promise = promise.then(function() {
      // Return a promise that will be resolved when the delete is finished.
      return result.destroy();
    });
  });
  return promise;
}).then(function() {
  // Every comment was deleted.
});
```


## 並行するPromise

Promiseでは、`when`メソッドを使用して、複数のタスクを並行して実行することもできます。複数の操作を一度に開始し、`Parse.Promise.when`を使用して、すべての入力Promiseが解決されたときに解決される新しいPromiseを作成できます。渡されたPromiseに失敗がない場合は、新しいPromiseが成功し、失敗があった場合は、新しいPromiseが失敗し最後にエラーが発生します。並行して操作を実行すると連続して実行するよりも短時間で処理できますが、システムリソースや帯域幅をより多く使用する場合があります。

```js
var query = new Parse.Query("Comments");
query.equalTo("post", 123);

query.find().then(function(results) {
  // Collect one promise for each delete into an array.
  var promises = [];
  _.each(results, function(result) {
    // Start this delete immediately and add its promise to the list.
    promises.push(result.destroy());
  });
  // Return a new promise that is resolved when all of the deletes are finished.
  return Parse.Promise.when(promises);
}).then(function() {
  // Every comment was deleted.
});
```


## 非同期メソッドの作成

このツールでは、Promiseを返す独自の非同期関数を簡単に作成できます。たとえば、`setTimeout`のPromiseバージョンを作成できます。

```js
var delay = function(millis) {
  var promise = new Parse.Promise();
  setTimeout(function() {
    promise.resolve();
  }, millis);
  return promise;
};
delay(100).then(function() {
  // This ran after 100ms!
});
```
