# Push-уведомления

Уведомления &mdash; это отличный способ вовлечения и информирования пользователей о вашем приложении. Можно быстро и эффективно охватывать всю базу пользователей. Данное руководство поможет пройти процесс настройки. Также здесь описано общее использование Parse для рассылки уведомлений.

## Настройка Push-уведомлений

Перед началом использования уведомлений ознакомьтесь с [Руководством по уведомлениям для Android](/tutorials/android-push-notifications), чтобы узнать, как настроить свое приложение. Далее в данном руководстве описаны функции уведомлений от Parse.

Библиотека Parse предоставляет функции уведомления, используя по возможности Google Cloud Messaging (GCM). На устройствах, которые не поддерживают GCM (например Amazon Kindle Fire), Parse использует фоновую службу, которая поддерживает постоянное соединение с облаком Parse для доставки уведомлений. Благодаря этому уведомления Parse работают на всех устройствах с ОС Android 2.2 и выше. 

## Установки

Все приложения Parse, установленные на устройстве, зарегистрированном для уведомлений, имеют связанный объект `Installation`. `Installation` представляет собой объект, где хранятся все данные, необходимые для назначения уведомлений. Например, в приложении о бейсболе можно сохранять команды, которыми интересуется пользователь, чтобы отправлять обновления об их достижениях.

В Android объекты `Installation` доступны через `ParseInstallation`, являющийся подклассом объекта `ParseObject`. Этот класс использует [подобный интерфейс API](#objects) для хранения и извлечения данных. Чтобы получить доступ к существующему объекту `Installation` из приложения Android, используйте метод `ParseInstallation.getCurrentInstallation()`. При первом сохранении метода `ParseInstallation` Parse добавит его к вашему классу `Installation`, и он будет доступен для целевой отправки уведомлений.

```java
// Save the current Installation to Parse.
ParseInstallation.getCurrentInstallation().saveInBackground();
```

Поскольку возможно изменять класс `ParseInstallation` точно так же, как и объект `ParseObject`, существует несколько специальных полей, которые помогают управлять устройствами и ориентироваться на них.

*   **`badge`**: текущее значение значка визитки для приложений iOS. Изменения этого значения на сервере будут использоваться для уведомлений о дополнении данных визитки в будущем.
*   **`channels`**: массив каналов, на которые подписано устройство в данный момент.
*   **`timeZone`**: текущий часовой пояс, где размещено целевое устройство. Это значение синхронизируется каждый раз, когда объект `Installation` сохраняется с устройства _(только для чтения)_.
*   **`deviceType`**: тип устройства &mdash; &quot;ios&quot; или &quot;android&quot; _(только для чтения)_.
*   **`installationId`**: уникальный идентификатор устройства, который используется в Parse _(только для чтения)_.
*   **`deviceToken`**: код, сгенерированный Apple, который используется для устройств iOS, или код, используемый GCM для отслеживания регистрационного идентификатора _(только для чтения)_.
*   **`channelUris`**: URI уведомлений, созданные Microsoft для устройств Windows _(только для чтения)_.
*   **`appName`**: отображаемое название приложения клиента, которому принадлежит эта установка _(только для чтения)_.
*   **`appVersion`**: версия строки приложения клиента, которому принадлежит эта установка _(только для чтения)_.
*   **`parseVersion`**: версия SDK Parse, которая используется в этой установке _(только для чтения)_.
*   **`appIdentifier`**: уникальный идентификатор для этой установки приложения клиента. Этот параметр не поддерживается на устройствах Android _(только для чтения)_.
*   **`pushType`**: это поле резервируется для переадресации Parse на сеть доставки уведомлений, которая будет использоваться. Если устройство зарегистрировано для получения уведомлений через GCM, это поле будет отмечено как &quot;gcm&quot;. Если устройство использует не GCM, а службу уведомлений Parse, это поле будет пустым _(только для чтения)_.

## Отправка уведомлений

Существуют два способа отправки уведомлений с помощью Parse: [каналы](#sending-channels) и [расширенный таргетинг](#sending-queries). Каналы предлагают простую в использовании модель для отправки уведомлений, в то время как расширенные возможности определения целевой аудитории обеспечивают гибкость и мощность модели.  Оба способа полностью совместимы друг с другом и описаны в данном разделе.

Отправка уведомлений часто осуществляется с помощью веб-консоли, REST API или Cloud Code. Тем не менее, уведомления могут также срабатывать при помощи существующих клиентских SDK. Если вы решите отправлять уведомления с клиентских SDK, вам понадобится настроить **Client Push Enabled** в параметрах &laquo;Уведомления&raquo; своего приложения Parse.

![](/images/docs/client_push_settings.png)

### Использование каналов

Проще всего запустить отправку уведомлений с помощью каналов. Для отправки уведомлений этот способ применяет модель &laquo;публикатор-подписчик&raquo;. Устройства подписываются на один или более каналов, и после этого можно отправлять уведомления подписчикам. Каналы, на которые оформлена подписка при помощи заданного объекта `Installation`, хранятся в поле `channels` объекта `Installation`.

#### Подписка на каналы

Канал определяется строкой, которая начинается с буквы и содержит цифры, буквы, знаки подчеркивания и тире. Канал не обязательно должен создаваться прямо перед использованием, и каждый объект `Installation` может подписываться на любое количество каналов одновременно.

Подписка на канал может осуществляться при помощи единичного вызова метода. Например, в приложении со счетом бейсбольных игр можно создать следующий код:

```java
// When users indicate they are Giants fans, we subscribe them to that channel.
PushService.subscribe(context, "Giants", YourActivity.class);
```

Предоставленный класс Activity указывает, какое действие будет выполнено, когда пользователь ответит на уведомления в этом канале. Это позволяет по-разному обрабатывать уведомления на разных каналах.

После подписки на канал &quot;Giants&quot; у объекта `Installation` будет обновлено поле `channels`.

![](/images/docs/installation_channel.png)

Отказаться от подписки на канал так же просто:

```java
// When users indicate they are no longer Giants fans, we unsubscribe them.
PushService.unsubscribe(context, "Giants");
```

Можно также получить набор каналов, на которые подписано данное устройство, при помощи следующего кода:

```java
Set<String> setOfAllSubscriptions = PushService.getSubscriptions();
```

Ни метод подписки, ни метод отказа от подписки не блокируют поток, с которого осуществляется вызов. Сведения о подписке кэшируются на диске устройства, если сеть недоступна, и передаются в Parse Cloud, как только сеть готова к использованию. Это означает, что не нужно производить потоковую обработку или обратные вызовы при управлении подписками.

#### Отправка уведомлений каналам

В Android SDK можно использовать приведенный ниже код для уведомления всех подписчиков канала &quot;Giants&quot;, что их любимая команда только что получила очки. Благодаря этому будет показано сообщение центра уведомлений для пользователей iOS и уведомление панели задач для пользователей Android.

```java
ParsePush push = new ParsePush();
push.setChannel("Giants");
push.setMessage("The Giants just scored! It's now 2-2 against the Mets.");
push.sendInBackground();
```

Если необходимо охватить несколько каналов при помощи одного уведомления, можно использовать список `LinkedList` каналов.

```java
LinkedList<String> channels = new LinkedList<String>();
channels.add("Giants");
channels.add("Mets");
ParsePush push = new ParsePush();
push.setChannels(channels);
// Notice we use setChannels not setChannel
push.setMessage("The Giants won against the Mets 2-3.");
push.sendInBackground();
```

### Использование расширенного таргетинга

Несмотря на то, что каналы отлично подходят для многих приложений, иногда при охвате получателей уведомлений необходима большая точность. Parse позволяет написать запрос для любого подкласса объектов `Installation` при помощи [запросов к API](#queries) и отправлять им уведомление.

Поскольку `ParseInstallation` является подклассом объекта `ParseObject`, можно сохранять любые необходимые данные и даже создавать связи между объектами `Installation` и другими объектами. Это позволит отправлять уведомления настроенному и динамическому сегменту базы пользователей.

#### Сохранение данных установки

Хранить данные для объекта `Installation` так же просто, как и хранить [любые другие данные](#objects) в Parse. В приложении о бейсболе пользователи могут получать уведомления о результатах игры, счете и сообщениях о травмах членов команды.

```java
// Store app language and version
ParseInstallation installation = ParseInstallation.getCurrentInstallation();
installation.put("scores",true);
installation.put("gameResults",true);
installation.put("injuryReports",true);
installation.saveInBackground();
```

Можно даже создать связи между объектами `Installation` и другими классами, сохраненными в Parse. Например, чтобы связать объект Installation с конкретным пользователем, можно просто сохранить данные существующего пользователя для объекта `ParseInstallation`.

```java
// Associate the device with a user
ParseInstallation installation = ParseInstallation.getCurrentInstallation();
installation.put("user",ParseUser.getCurrentUser());
installation.saveInBackground();
```

#### Отправка уведомлений в ответ на запросы

После сохранения данных для объектов `Installation` можно использовать запрос `PFQuery` для таргетирования подкласса этих устройств. Запросы `Installation` работают так же, как и другие [запросы Parse](#queries), однако для создания используется специальный статический метод `ParseInstallation.getQuery()`. Перед отправкой уведомления этот запрос настраивается для объекта `PFPush`.

```java
// Create our Installation query
ParseQuery pushQuery = ParseInstallation.getQuery();
pushQuery.whereEqualTo("injuryReports", true);

// Send push notification to query
ParsePush push = new ParsePush();
push.setQuery(pushQuery);
// Set our Installation query
push.setMessage("Willie Hayes injured by own pop fly.");
push.sendInBackground();
```

Для запроса можно также использовать каналы. Чтобы отправить уведомление всем подписчикам канала &quot;Giants&quot;, отфильтрованным по пользователям, которые хотят получить обновление информации о счете, можно выполнить следующее:

```java
// Create our Installation query
ParseQuery pushQuery = ParseInstallation.getQuery();
pushQuery.whereEqualTo("channels", "Giants");
// Set the channel
pushQuery.whereEqualTo("scores", true);

// Send push notification to query
ParsePush push = new ParsePush();
push.setQuery(pushQuery);
push.setMessage("Giants scored against the A's! It's now 2-2.");
push.sendInBackground();
```

При хранении связей с другими объектами в классе `Installation` можно также использовать эти связи для запросов. Например, можно отправить такое уведомление всем пользователям, находящимся в районе заданного места, как показано ниже.

```java
// Find users near a given location
ParseQuery userQuery = ParseUser.getQuery();
userQuery.whereWithinMiles("location", stadiumLocation, 1.0);

// Find devices associated with these users
ParseQuery pushQuery = ParseInstallation.getQuery();
pushQuery.whereMatchesQuery("user", userQuery);

// Send push notification to query
ParsePush push = new ParsePush();
push.setQuery(pushQuery);
// Set our Installation query
push.setMessage("Free hotdogs at the Parse concession stand!");
push.sendInBackground();
```

## Параметры отправки

Функцию уведомлений можно использовать шире, чем просто для отправки сообщений. В ОС Android уведомления также могут содержать пользовательские данные, которые необходимо отправить, а также метод `Intent` для выполнения действия при получении уведомления. Если уведомление зависит от времени, можно также настроить дату истечения срока.

### Настройка уведомлений

Если нужно отправить больше данных, чем просто сообщение, необходимо использовать объект `JSONObject` для комплектации всех данных. Существуют зарезервированные поля, имеющие специальное значение в Android.

*   **`alert`**: сообщение уведомления.
*   **`badge`**: _(только для iOS)_ значение, указанное в правом верхнем углу значка приложения. Это поле может быть настроено на значение или на `Increment` для увеличения текущего значения на 1.
*   **`sound`**: _(только для iOS)_ название звукового файла в комплекте приложения.
*   **`content-available`**: _(только для iOS)_ при написании приложения [Киоск](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html) или приложения, использующего удаленные уведомления в фоновом режиме, [представленные в iOS7](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10) (также известные как &quot;Background Push&quot;), установите для этого поля значение 1, чтобы инициировать фоновую загрузку.
*   **`action`**: _(только для Android)_ должен срабатывать метод `Intent` при получении уведомления. Если не указаны значения полей `title` или `alert`, сработает метод `Intent`, но уведомление не будет показано пользователю.
*   **`title`**: _(только для Android, Windows 8 и Windows Phone 8)_ значение, которое отображается в панели задач Android, или всплывающее уведомление Windows 8.

Например, чтобы отправить уведомление, которое увеличит номер визитки на 1 и воспроизведет настроенные звук, можно выполнить следующий код. Помните, что эти свойства можно настроить из клиента Android, но они будут применены только в версии вашего приложения для iOS. Поля &quot;badge&quot; (&laquo;визитка&raquo;) и &quot;sound&quot; (&laquo;звук&raquo;) не будут воспроизводиться для получателей с Android.

```java
JSONObject data = new JSONObject("{\"alert\": \"The Mets scored!\",
                                  \"badge\": \"Increment\",
                                  \"sound\": \"cheering.caf);
ParsePush *push = new ParsePush();
push.setChannel("Mets");
push.setData(data);
push.sendPushInBackground();
```

Также можно указать собственные данные в этом словаре. Как мы узнали в разделе [Получение уведомлений](#receiving), можно использовать методы `Intent` для выполнения пользовательской обработки при получении уведомления. Вы также получите доступ к любым данным, указанным в уведомлении.

```java
JSONObject data = new JSONObject("{\"action\": \"com.example.UPDATE_STATUS\",
                                  \"name\": \"Vaughn\",
                                  \"newsItem\": \"Man bites dog\""}));
ParsePush *push = new ParsePush();
push.setQuery(injuryReportsQuery);
push.setChannel("Indians");
push.setData(data);
push.sendPushInBackground();
```

### Настройка даты истечения срока действия

Если устройство пользователя выключено или не подключено к Интернету, уведомления не могут быть доставлены. Если ваше уведомление настроено по времени, и его не следует доставлять поздно, можно настроить дату истечения срока действия. Это позволяет избежать ненужных уведомлений с информацией, которая может быть уже неактуальной.

Существует два метода для класса `ParsePush`, при помощи которых можно выполнить настройку даты истечения срока действия для уведомлений. Первый метод `setExpirationTime` просто указывает поле `time` (в формате времени UNIX), которое определяет, когда Parse должен прекратить попытки отправки уведомлений.

```java
// Send push notification with expiration date
ParsePush push = new ParsePush();
push.setExpirationTime(1424841505);
push.setQuery(everyoneQuery);
push.setMessage("Season tickets on sale until February 25th");
push.sendPushInBackground();
```

Однако, существуют некоторые предостережения для этого метода. Поскольку нет гарантии, что время на часах устройств выставлено точно, можно получить неверные результаты. Поэтому класс `ParsePush` также предполагает использование метода `setExpirationTimeInterval`, для которого задается поле `timeInterval` (в секундах). Срок действия уведомления закончится по истечении указанного периода.

```java
// Create time interval
long weekInterval = 60*60*24*7; // 1 week

// Send push notification with expiration interval
ParsePush push = new ParsePush();
push.setExpirationTimeInterval(weekInterval);
push.setQuery(everyoneQuery);
push.setMessage("Season tickets on sale until next week!");
push.sendPushInBackground();
```

### Таргетирование по платформе

При создании кроссплатформенного приложения вам может понадобиться охватить устройства с определенной операционной системой. Расширенное таргетирование позволяет отфильтровать охваченные устройства.

В приведенном ниже примере описан процесс отправки различных уведомлений пользователям Android, iOS и Windows 8.

```java
ParseQuery query = ParseInstallation.getQuery();
query.whereEqualTo("channels", "suitcaseOwners");

// Notification for Android users
query.whereEqualTo("deviceType", "android");
ParsePush androidPush = new ParsePush();
androidPush.setMessage("Your suitcase has been filled with tiny robots!");
androidPush.setQuery(query);
androidPush.sendPushInBackground();

// Notification for iOS users
query.whereEqualTo("deviceType", "android");
ParsePush iOSPush = new ParsePush();
iOSPush.setMessage("Your suitcase has been filled with tiny apples!");
iOSPush.setQuery(query);
iOSPush.sendPushInBackground();

// Notification for Windows 8 users
query.whereEqualTo("deviceType", "winrt");
ParsePush winPush = new ParsePush();
winPush.setMessage("Your suitcase has been filled with tiny glass!");
winPush.setQuery(query);
winPush.sendPushInBackground();

// Notification for Windows 8 users
query.whereEqualTo("deviceType", "winrt");
ParsePush winPush = new ParsePush();
winPush.setMessage("Your suitcase has been filled with tiny glass!");
winPush.setQuery(query);
winPush.sendPushInBackground();

// Notification for Windows Phone 8 users
query.whereEqualTo("deviceType", "winphone");
ParsePush wpPush = new ParsePush();
wpPush.setMessage("Your suitcase is very hip; very metro.");
wpPush.setQuery(query);
wpPush.sendPushInBackground();
```

## Планирование уведомлений

На данный момент отправка запланированных уведомлений не поддерживается SDK Android. Ознакомьтесь с REST API, JavaScript SDK или веб-консолью.

## Получение уведомлений

При получении уведомления в панели задач отображается &laquo;заголовок&raquo;, а &laquo;сообщение&raquo; отображается как текст этого уведомления. Android позволяет выйти за эти рамки, указывая действие `Activity`, которое будет обрабатывать открытое уведомление, а также действие `Intent`, которое будет выполняться в фоновом режиме после получения уведомления.

Обязательно ознакомьтесь с [Кратким руководством по уведомлениям для Android](/apps/quickstart_push), чтобы настроить приложение для получения уведомлений. Краткое руководство описывает настройку уведомлений для всех устройств Android, включая те, которые не поддерживают GCM. Если уведомления будут отправляться только на устройства, поддерживающие GCM, можно удалить эти элементы из файла `AndroidManifest.xml`:

*   Элемент `receiver` для `com.parse.ParseBroadcastReceiver` (включая интент-фильтр для `BOOT_COMPLETED` и `USER_PRESENT`)*   Элемент `permission` для `android.permission.RECEIVE_BOOT_COMPLETED`

Все остальные элементы потребуются вам по-прежнему (включая элемент для `com.parse.PushService`), как описано в кратком руководстве.

Обратите внимание, что некоторые эмуляторы Android (для которых отсутствует поддержка Google API) не поддерживают GCM, таким образом, при тестировании приложения в эмуляторе с этой конфигурацией убедитесь, что выбран образ эмулятора с установленным Google API.

### Ответ действием

Можно указать действие `Activity`, которое будет запущено после того, как пользователь откроет уведомление. При использовании [каналов](#sending-channels) можно добавить это действие `Activity` в вызов метода подписки.

```java
PushService.subscribe(context, "Giants", YourActivity.class);
```

При использовании [расширенного таргетирования](#sending-queries) можно указать действие `Activity` по умолчанию.

```java
PushService.setDefaultPushCallback(context, YourActivity.class);
```

### Ответ намерянием

Можно также указать подтверждение `Intent`, которое будет срабатывать в фоне при получении уведомления. Таким образом приложение сможет выполнять пользовательские действия с уведомлением. Также приложение будет использоваться вне зависимости от того, отображаются ли сообщения на панели задач. Чтобы сделать обработку пользовательских уведомлений, настройте запись `Action` в словаре данных уведомлений на действие `Intent`, которое необходимо выполнить. Руководство по Android предлагает ставить в начало действие с названием пакета, чтобы избежать конфликтов пространства имен с другими запущенными приложениями.

Вот пример, который рассматривался [ранее](#options-data):

```java
JSONObject data = new JSONObject("{\"action\": \"com.example.UPDATE_STATUS\",
                                  \"name\": \"Vaughn\",
                                  \"newsItem\": \"Man bites dog\""}));
ParsePush *push = new ParsePush();
push.setQuery(injuryReportsQuery);
push.setChannel("Angels");
push.setData(data);
push.sendPushInBackground();
```

Если код находится в пакете `com.example`, и необходимо зарегистрировать получателя действия `com.example.UPDATE_STATUS`, можно добавить следующий код XML в файл `AndroidManifest.xml` непосредственно после блока `ParseBroadcastReceiver`, созданного ранее:

```html
  <receiver android:name="com.example.MyCustomReceiver" android:exported="false">
      <intent-filter>
          <action android:name="com.example.UPDATE_STATUS" />
      </intent-filter>
  </receiver>
  ```

Пользовательский получатель будет вызван при получении уведомлений с параметром действий `com.example.UPDATE_STATUS`. Из соображений безопасности SDK Parse обеспечивает обработку подтверждения только получателями в вашем приложении. Необходимо дополнительно настроить атрибут `android:exported` для элемента `<receiver>`, чтобы другие приложения не отправляли уведомления вашему получателю.

Объект `Intent`, отправленный получателю, содержит дополнительные объекты `Bundle` с двумя полезными схемами. Ключ `"com.parse.Channel"` указывает на строку, представляющую канал, по которому было отправлено сообщение. Ключ `"com.parse.Data"` указывает на строку, которая представляет значение словаря `"data"`, зашифрованное в JSON и настроенное в уведомлении. В качестве примера представленный ниже код проанализирует уведомление JSON и зарегистрирует его в консоли эмулятора Android:

```java
public class MyCustomReceiver extends BroadcastReceiver {
    private static final String TAG = "MyCustomReceiver";

    @Override
    public void onReceive(Context context, Intent intent) {
        try {
            String action = intent.getAction();
            String channel = intent.getExtras().getString("com.parse.Channel");
            JSONObject json = new JSONObject(intent.getExtras().getString("com.parse.Data"));
            Log.d(TAG, "got action " + action + " on channel " + channel + " with:");
            Iterator itr = json.keys();
            while (itr.hasNext()) {
                String key = (String) itr.next();
                Log.d(TAG, "..." + key + " => " + json.getString(key));
            }
        } catch (JSONException e) {
            Log.d(TAG, "JSONException: " + e.getMessage());
        }
    }
}
```

### Отслеживание уведомлений и запусков приложения

Для отслеживания вовлечения пользователей в течение некоторого времени и эффекта уведомлений предоставляется несколько обработчиков в классе `ParseAnalytics`.

Если вы отвечаете на уведомление действием `Activity`, добавьте следующий код к методу `onCreate` для действия `Activity`, обрабатывающего уведомления. После чего можно будет собирать сведения о том, когда ваше приложение было запущено, и почему оно было запущено. Если вы отвечаете на уведомления, внедряя пользовательские получатели `BroadcastReceiver`, измените код, чтобы использовать объект `Intent`, вставленный вместо этого в метод `onReceive`.

```java
ParseAnalytics.trackAppOpened(getIntent());
```

Параметр `null` для метода `trackAppOpened` отслеживает _только_ стандартное событие запуска приложения (например, если информационное наполнение Parse для объекта `Intent` было пустым, или если вы игнорировали уведомления, явно вставив значение `null`).

Количество запусков приложения и запусков, связанных с уведомлениями, будет доступно в панели приложения.

## Поиск и устранение неисправностей

Настройка уведомлений часто является источником проблем для разработчиков. Настройка является сложным процессом, во время которого постоянно возникают трудности. Если вы столкнулись с ними, попробуйте воспользоваться следующими советами. 

*   [Обновите SDK](/docs/downloads). Некоторые общие проблемы с уведомлениями в Android были исправлены в последних версиях Parse.
*   Убедитесь, что в файле `AndroidManifest.xml` указаны правильные разрешения, как отмечено в шагах 4 и 6 [Краткого руководства по уведомлениям для Android](/apps/quickstart_push#android/native/existing). Если используется пользовательский получатель, убедитесь, что он зарегистрирован в файле Manifest с правильным свойством `android:name` и интент-фильтрами.
*   Убедитесь, что используете правильный идентификатор приложения и ключ клиента, а также что вызывается метод `Parse.initialize()`. Метод `Parse.initialize()` позволяет службе узнать, какое приложение прослушивается. Рекомендуется вставить этот код в метод `Application.onCreate`, а не в метод `onCreate` для определенного действия Activity, таким образом, любая технология активации будет знать, как использовать Parse.
*   Убедитесь, что устройство настроено на прием уведомлений от вашего приложения.
*   Проверьте количество получателей в консоли уведомлений Parse. Совпадает ли это количество с ожидаемым количеством получателей? Возможно, уведомления неправильно таргетированы.
*   При тестировании в эмуляторе попробуйте очистить и повторно создать проект и перезапустить AVD.*   Включите словесный сбор данных при помощи `Parse.setLogLevel(Parse.LOG_LEVEL_VERBOSE)`. Сообщения об ошибках могут объяснить, в чем проблема.
*   Если в панели отображается сообщение &laquo;Завершено (с ошибкой)&raquo;, проверьте журналы слов. Если выполняется отправка уведомлений с устройства, убедитесь, что в панели включены уведомления со стороны клиента.
*   В журнале может отображаться сообщение об ошибке &laquo;Невозможно создать редактор&raquo; или другие проблемы, связанные с неустойчивым каналом. При возникновении таких проблем среда разработки продолжит попытки установить соединение. Это действие не должно вывести приложение из строя.
