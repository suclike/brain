# GeoPoint

Parse 能讓您將現實世界的經緯度座標與物件建立關聯。將 `Parse.GeoPoint` 加入 `Parse.Object`，能在進行查詢時，將某個物件與參考點之間的鄰近性列入考慮。這讓您很容易完成一些操作，比如找出哪些使用者距離其他使用者最近，或是哪些地點離使用者最近。

## Parse.GeoPoint

若要建立某地點與物件的關聯，您必須先建立 `Parse.GeoPoint`。例如，若要建立經度 -30.0 度緯度 40.0 度的地點：

```js
var point = new Parse.GeoPoint({latitude: 40.0, longitude: -30.0});
```

接著此地點會被當成一般欄位儲存在物件中。

```js
placeObject.set("location", point);
```

注意：目前在一個類別中只能有一個索引鍵是 `Parse.GeoPoint`。

## Geo 查詢

既然您有一堆具有空間座標的物件，若能找出哪個物件離某個地點最近會很棒。這點可以透過使用 `near` 將另一個限制加入 `Parse.Query` 來達成。若要取得距離使用者最近十個位置的清單，看起來會像是：

```js
// User's location
var userGeoPoint = userObject.get("location");
// Create a query for places
var query = new Parse.Query(PlaceObject);
// Interested in locations near user.
query.near("location", userGeoPoint);
// Limit what could be a lot of points.
query.limit(10);
// Final list of objects
query.find({
  success: function(placesObjects) {   }
});
```

此時的 `placesObjects` 會是物件陣列，且會依照跟 `userGeoPoint` 之間的距離排序（由近至遠）。請注意，如果有套用額外的 `ascending()`/`descending()` 排序限制，此限制將優先於距離排序。

若要使用距離限制結果，請檢查 `withinMiles`、`withinKilometers` 和 `withinRadians`。

也可以查詢包含在特定區域內的物件組合。若要找出矩形邊框內的物件，請將 `withinGeoBox` 限制加入 `Parse.Query`。

```js
var southwestOfSF = new Parse.GeoPoint(37.708813, -122.526398);
var northeastOfSF = new Parse.GeoPoint(37.822802, -122.373962);

var query = new Parse.Query(PizzaPlaceObject);
query.withinGeoBox("location", southwestOfSF, northeastOfSF);
query.find({
  success: function(pizzaPlacesInSF) {
    ...
  }
});
```

## 注意事項

此時有一些要注意的事項：

1.  每個 Parse.Object 類別的 Parse.GeoPoint 物件只會有一個索引鍵。
2.  地點不應等同或超過範圍的極值。緯度不應為 -90.0 或 90.0。經度不應為 -180.0 或 180.0。若嘗試將經緯度設在界外將造成錯誤。
