# 推送通知

推送通知是让用户参与您的应用程序并了解其最新动态的有效方法。您可以快速有效地到达整个用户群。本指南将帮助您了解设置流程和 Parse 发送推送通知的基本用法。

## 设置推送

如果您想开始使用推送，请先完成 [Android 推送教程](/tutorials/android-push-notifications)，学习如何配置应用程序。完成之后再返回本指南，了解关于 Parse 所提供的推送功能的更多信息。

Parse 库提供通过谷歌云端推送 (GCM) 服务发送的推送通知（如果可能）。在不支持 GCM 的设备上（如 Amazon Kindle Fire），Parse 将使用与 Parse 云保持长期稳定连接的后台服务来发送推送通知。如此，Parse 推送便可以应用于运行 Android 2.2 或更高版本的所有设备上。 

## 安装

安装于登记了推送通知的设备上的每个 Parse 应用程序均有一个相关的 `Installation` 对象。该 `Installation` 对象是您储存推送通知目标定位所需的全部信息的位置。例如，在某个棒球应用中，您可以保存用户感兴趣的球队，以便发送关于球队成绩的更新信息。

在 Android 中，可以通过 `ParseInstallation` 类（`ParseObject` 的一个子类）可以获得 `Installation` 对象。其采用[相同的 API](/docs/android_guide#objects) 来储存和检索数据。要想从您的 Android 应用程序中访问当前的 `Installation` 对象，请采用 `ParseInstallation.getCurrentInstallation()` 方法。第一次保存 `ParseInstallation` 时，Parse 会将其添加到 `Installation` 类中，之后其便可以用于定位推送通知。

```java
// Save the current Installation to Parse.
ParseInstallation.getCurrentInstallation().saveInBackground();
```

可以像修改 `ParseObject` 一样修改 `ParseInstallation`，但有几个特殊字段有助于管理和定位设备。

*   **`badge`**：iOS 应用程序图标标记的当前值。在服务器上对该值的更改将用于之后根据推送通知的数量计算图标标记增量。
*   **`channels`**：设备当前订阅内容的各种传送通道。
*   **`timeZone`**：目标设备所在地的当前时区。设备每次保存 `Installation` 对象时，该值就会进行同步_（只读）_。
*   **`deviceType`**：设备类型，值为“ios”或“android”_（只读）_。
*   **`installationId`**：Parse 使用的设备唯一 Id_（只读）_。
*   **`deviceToken`**: Apple 生成的用于 iOS 设备的令牌，或者 GCM 用于跟踪注册 ID 的令牌_（只读）_。
*   **`channelUris`**：微软生成的用于 Windows 设备的推送 URI_（只读）_。
*   **`appName`**：本安装所属用户应用程序的显示名称_（只读）_。
*   **`appVersion`**：本安装所属用户应用程序的版本号字符串_（只读）_。
*   **`parseVersion`**：本安装所用的 Parse SDK 的版本_（只读）_。
*   **`appIdentifier`**：本安装的用户应用程序的唯一标识符。Android 上不支持该参数。_（只读）_
*   **`pushType`**此字段保留用于将 Parse 引导至将使用的推送分发网络。如果该设备注册用于接收通过 GCM 发送的推送通知，则该字段将标示“gcm”。如果该设备不使用 GCM 而使用 Parse 的推送通知服务，该字段空白_（只读）_。

## 发送推送通知

通过 Parse 发送推送通知的方式有两种：[通道](#sending-channels/Android)和[高级定位](#sending-queries/Android)。通道提供了一种简单而且使用方便的推送通知发送模式，而高级定位提供了一种更加强大和灵活的模式。两者完全兼容，本节将对其进行详细介绍。

一般通过 Web Console、[REST API](#sending/REST) 或[云代码](#sending/JavaScript)发送通知。但是，也可以通过现有的客户端 SDK 触发推送通知。如果决定从客户端 SDK 发送通知，则需要在 Parse 应用程序的推送通知设置中设置 **Client Push Enabled**。

![](/images/docs/client_push_settings.png)

### 使用通道

开始发送通知最简单的方式就是使用通道。这种方式下可以采用“发布者-订阅者”模式发送推送通知。设备先订阅一个或多个通道，然后通知会发送到这些订阅者的设备上。由给定 `Installation` 订阅的通道储存在 `Installation` 对象的 `channels` 字段中。

#### 订阅通道

通道通过以字母开头，由字母数字字符、下划线和短划线组成的一个字符串识别。这些通道只有明确创建才能使用，每个 `Installation` 可以订阅任意数量的通道。

可以使用单个方法调用订阅通道。例如，在棒球分数应用程序中，我们可以这样：

```java
// When users indicate they are Giants fans, we subscribe them to that channel.
PushService.subscribe(context, "Giants", YourActivity.class);
```

所提供的活动类规定了用户回应该通道上的通知时将运行哪些活动。这样您便可以采用不同方式在不同通道上处理推送通知。

一旦订阅“Giants”（巨人队）通道后，您的 `Installation` 对象会出现更新的 `channels` 字段。

![](/images/docs/installation_channel.png)

退订通道也很简单：

```java
// When users indicate they are no longer Giants fans, we unsubscribe them.
PushService.unsubscribe(context, "Giants");
```

您也可以利用以下代码获得当前设备所订阅的通道列表：

```java
Set<String> setOfAllSubscriptions = PushService.getSubscriptions();
```

不管是哪种订阅方法或退订方法，都不会阻止通道的调用线程。无法访问网络时订阅信息将缓存在设备磁盘上，网络可用后将立即传输至 Parse 云。这意味着您在管理订阅时不必担心线程处理或回调问题。

#### 向通道发送推送通知

在 Android SDK 中，以下代码可用于提醒“Giants”（巨人队）通道的所有订阅者他们最喜爱的球队刚才得分了。这在 iOS 用户的设备上将显示为通知中心提醒，而在 Android 用户的设备上将显示为系统托盘通知。

```java
ParsePush push = new ParsePush();
push.setChannel("Giants");
push.setMessage("The Giants just scored! It's now 2-2 against the Mets.");
push.sendInBackground();
```

如果您想将单条推送通知推送至多个通道，可以采用通道 `LinkedList`。

```java
LinkedList<String> channels = new LinkedList<String>();
channels.add("Giants");
channels.add("Mets");

ParsePush push = new ParsePush();
push.setChannels(channels); // Notice we use setChannels not setChannel
push.setMessage("The Giants won against the Mets 2-3.");
push.sendInBackground();
```

### 使用高级定位

对于很多应用程序来说，通道非常好用，但是有时您在定位推送通知接收者时需要更精确。Parse 允许您使用[查询 API](/docs/android_guide#queries) 编写关于 `Installation` 对象任何子集的查询，然后向它们发送推送通知。

由于 `ParseInstallation` 是 `ParseObject` 的子类，因此您可以保存您想要的任何数据，甚至可以在 `Installation` 对象与其他对象之间创建关系。这样您可以将推送通知发送给您自定义并且动态变化的一部分用户群体。

#### 保存安装数据

将数据保存在 `Installation` 对象上和将[任何其他数据](/docs/android_guide#objects)保存在 Parse 上一样简单。在我们的棒球应用程序上，用户可以获得关于球赛结果、得分和受伤报告的推送通知。

```java
// Store app language and version
ParseInstallation installation = ParseInstallation.getCurrentInstallation();
installation.put("scores",true);
installation.put("gameResults",true);
installation.put("injuryReports",true);
installation.saveInBackground();
```

您甚至可以在 `Installation` 对象与 Parse 上保存的其他类之间创建关系。例如，要将安装的应用与某个用户关联，您只需要将当前用户保存在 `ParseInstallation` 上即可。

```java
// Associate the device with a user
ParseInstallation installation = ParseInstallation.getCurrentInstallation();
installation.put("user",ParseUser.getCurrentUser());
installation.saveInBackground();
```

#### 向查询发送推送通知

将数据储存在 `Installation` 对象中之后，您可以使用 `PFQuery` 来定位这些设备的某个子集。`Installation` 查询的运行方式与其他任何 [Parse 查询](/docs/android_guide#queries)相同，但我们使用专门的静态方法 `ParseInstallation.getQuery()` 来创建它。我们将此查询设置在我们的 `PFPush` 对象上以后，才可以发送通知。

```java
// Create our Installation query
ParseQuery pushQuery = ParseInstallation.getQuery();
pushQuery.whereEqualTo("injuryReports", true);

// Send push notification to query
ParsePush push = new ParsePush();
push.setQuery(pushQuery); // Set our Installation query
push.setMessage("Willie Hayes injured by own pop fly.");
push.sendInBackground();
```

我们甚至可以将查询与通道一同使用。若要向“Giants”（巨人队）通道的所有订阅者发送推送通知，但是又要过滤想接收得分更新消息的订阅者，我们可以执行以下操作：

```java
// Create our Installation query
ParseQuery pushQuery = ParseInstallation.getQuery();
pushQuery.whereEqualTo("channels", "Giants"); // Set the channel
pushQuery.whereEqualTo("scores", true);

// Send push notification to query
ParsePush push = new ParsePush();
push.setQuery(pushQuery);
push.setMessage("Giants scored against the A's! It's now 2-2.");
push.sendInBackground();
```

如果我们在 `Installation` 类中储存了与其他对象的关系，我们也可以在查询中使用这些关系。例如，我们可以向这样向给定位置附近的所有用户发送推送通知：

```java
// Find users near a given location
ParseQuery userQuery = ParseUser.getQuery();
userQuery.whereWithinMiles("location", stadiumLocation, 1.0)

// Find devices associated with these users
ParseQuery pushQuery = ParseInstallation.getQuery();
pushQuery.whereMatchesQuery("user", userQuery);

// Send push notification to query
ParsePush push = new ParsePush();
push.setQuery(pushQuery); // Set our Installation query
push.setMessage("Free hotdogs at the Parse concession stand!");
push.sendInBackground();
```

## 发送选项

推送通知不仅仅只是发送消息。在 Android 中，推送通知中也能包含您想发送的自定义数据和收到时激活的 `Intent`。若是时效性通知，还可设置通知的到期日期。

### 自定义您的通知

如果您不仅仅只想发送一条消息，则需要使用 `JSONObject` 打包所有这些数据。有些保留字段在 Android 中有特殊意义。

*   **`alert`**：通知的提醒消息。
*   **`badge`**：_（仅限 iOS ）_应用程序图标右上角显示的值。可将其设置为一个值或 `Increment`，以便将当前值加 1。
*   **`sound`**：_（仅限 iOS）_应用程序包中声音文件的名称。
*   **`content-available`**：_（仅限 iOS）_如果您在编写 [Newsstand](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html) 应用程序或是使用远程通知后台模式（[iOS7 中引入](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10)，又称“后台推送”）的应用程序，请将此值设置为 1，以便激活后台下载。
*   **`action`**：_（仅限 Android）_收到推送通知后应激活 `Intent`。若未指定 `title` 或 `alert` 值，则 `Intent` 将被激活，但是用户看不到任何通知。
*   **`title`**：_（仅限 Android、Windows 8 和 Windows Phone 8）_Android 系统托盘或 Windows 8 消息条通知上显示的值。

例如，想要发送将标记数字加 1 并播放自定义声音的通知时，可以按编写以下代码。注意，您可以从 Android 客户端设置这些属性，但是其只能在 iOS 版本的应用程序下生效。标记和声音字段对于 Android 接收者无效。

```java
JSONObject data = new JSONObject("{\"alert\": \"The Mets scored!\",
                                   \"badge\": \"Increment\",
                                   \"sound\": \"cheering.caf);

ParsePush *push = new ParsePush();
push.setChannel("Mets");
push.setData(data);
push.sendPushInBackground();
```

您还可以在此字典中指定您自己的数据。正如在[接收通知](#receiving/Android)部分所述，您可以使用 `Intent` 在收到通知后进行自定义处理。您也可以查看该通知上的任何数据。

```java
JSONObject data = new JSONObject("{\"action\": \"com.example.UPDATE_STATUS\",
                                   \"name\": \"Vaughn\",
                                   \"newsItem\": \"Man bites dog\""}));

ParsePush *push = new ParsePush();
push.setQuery(injuryReportsQuery);
push.setChannel("Indians");
push.setData(data);
push.sendPushInBackground();
```

### 设置有效期

用户设备关机或未连接网络的情况下，推送通知无法送达。如果您想发送具有时效性、不适合太晚发送的通知，您可以为其设置有效期。这样可以避免向用户提醒可能不再相关的信息。

`ParsePush` 类提供了两个方法帮助您为通知设置有效期。第一个是 `setExpirationTime`，该方法用 `time` 规定 Parse 停止尝试发送通知的时间（Unix 新纪元时间）。

```java
// Send push notification with expiration date
ParsePush push = new ParsePush();
push.setExpirationTime(1424841505);
push.setQuery(everyoneQuery);
push.setMessage("Season tickets on sale until February 25th");
push.sendPushInBackground();
```

但是采用这种方法需注意以下事项。由于设备时钟可能不准确，所以您得到的结果可能不准确。为此，`ParsePush` 类还提供了接受 `timeInterval` （单位为 s）的 `setExpirationTimeInterval` 方法。规定时间段过后，通知将失效。

```java
// Create time interval
long weekInterval = 60*60*24*7; // 1 week

// Send push notification with expiration interval
ParsePush push = new ParsePush();
push.setExpirationTimeInterval(weekInterval);
push.setQuery(everyoneQuery);
push.setMessage("Season tickets on sale until next week!");
push.sendPushInBackground();
```

### 通过平台定位

如果您创建了跨平台应用程序，则可能想要只定位某种操作系统的设备。高级定位可以让您过滤定位哪些设备。

以下示例为向 Android、iOS 和 Windows 8 用户发送不同通知。

```java
ParseQuery query = ParseInstallation.getQuery();
query.whereEqualTo("channels", "suitcaseOwners");

// Notification for Android users
query.whereEqualTo("deviceType", "android");
ParsePush androidPush = new ParsePush();
androidPush.setMessage("Your suitcase has been filled with tiny robots!");
androidPush.setQuery(query);
androidPush.sendPushInBackground();

// Notification for iOS users
query.whereEqualTo("deviceType", "android");
ParsePush iOSPush = new ParsePush();
iOSPush.setMessage("Your suitcase has been filled with tiny apples!");
iOSPush.setQuery(query);
iOSPush.sendPushInBackground();

// Notification for Windows 8 users
query.whereEqualTo("deviceType", "winrt");
ParsePush winPush = new ParsePush();
winPush.setMessage("Your suitcase has been filled with tiny glass!");
winPush.setQuery(query);
winPush.sendPushInBackground();

// Notification for Windows 8 users
query.whereEqualTo("deviceType", "winrt");
ParsePush winPush = new ParsePush();
winPush.setMessage("Your suitcase has been filled with tiny glass!");
winPush.setQuery(query);
winPush.sendPushInBackground();

// Notification for Windows Phone 8 users
query.whereEqualTo("deviceType", "winphone");
ParsePush wpPush = new ParsePush();
wpPush.setMessage("Your suitcase is very hip; very metro.");
wpPush.setQuery(query);
wpPush.sendPushInBackground();
```

## 推送通知排程

Android SDK 目前不支持发送排程的推送通知。了解 [REST API](#scheduled/REST)、[JavaScript SDK](#scheduled/JavaScript) 或 Web Console。

## 接收推送通知

收到推送通知后，“title”（标题）显示在系统托盘上，“message”（消息）将作为该推送通知的内容显示。通过指定一个 `Activity` 用于处理打开的推送通知，以及指定一个在收到该通知后将在后台激活的 `Intent`，Android 能实现更多功能。

确保您已阅读 [Android 推送快速入门](/apps/quickstart_push) ，会设置应用程序接受推送通知。此快速入门介绍如何设置所有 Android 设备的推送，（包括不支持 GCM 的 Android 设备）。如果您仅向支持 GCM 的设备推送通知，则可以从您的 `AndroidManifest.xml` 中清除这些元素：

*   `com.parse.ParseBroadcastReceiver` 的 `receiver` 元素（包括 `BOOT_COMPLETED` 和 `USER_PRESENT` 的意图过滤器）
*   `android.permission.RECEIVE_BOOT_COMPLETED` 的 `permission` 元素

您还会需要此快速入门所述的所有其他元素（包括 `com.parse.PushService` 的元素）。

注意，一些 Android 仿真器（不支持 Google API 的仿真器）不支持 GCM，所以如果您在有这种配置的仿真器中测试您的应用程序，应确保选择已安装 Google API 的仿真器图像。

### 以活动进行响应

您可以指定用户打开推送通知时启动某个 `Activity`。如果使用[通道](#sending-channels/Android)，您可将此 `Activity` 添加到订阅方法调用中。

```java
PushService.subscribe(context, "Giants", YourActivity.class);
```

如果使用[高级定位](#sending-queries/Android)，您可以指定将使用的默认 `Activity`。

```java
PushService.setDefaultPushCallback(context, YourActivity.class);
```

### 以意图进行响应

您也可以指定收到推送通知时将在后台激活的 `Intent`。如此您的应用程序便可以对通知进行自定义处理，而且不管您是否选择显示系统托盘消息都能使用。为了实现自定义通知处理，将您推送通知数据字典中的 `Action` 条目设置为您想激活的 `Intent` 操作。Android 指南建议将您的软件包名称添加为此动作的前缀，以免命名空间与其他运行的应用程序冲突。

如下是[之前](#options-data/Android)我们看过的一个示例：

```java
JSONObject data = new JSONObject("{\"action\": \"com.example.UPDATE_STATUS\",
                                   \"name\": \"Vaughn\",
                                   \"newsItem\": \"Man bites dog\""}));

ParsePush *push = new ParsePush();
push.setQuery(injuryReportsQuery);
push.setChannel("Angels");
push.setData(data);
push.sendPushInBackground();
```

如果您的代码存在于 `com.example` 数据包中而且您想为 `com.example.UPDATE_STATUS` 操作登记一个接收器，则可以在您的 `AndroidManifest.xml` 文件中，于之前创建的 `ParseBroadcastReceiver` 块结尾处直接加入以下 XML。

```java
<receiver android:name="com.example.MyCustomReceiver" android:exported="false">
    <intent-filter>
        <action android:name="com.example.UPDATE_STATUS" />
    </intent-filter>
</receiver>
```

无论何时收到带 `com.example.UPDATE_STATUS` 动作参数的推送通知，都将调用您自定义的接收器。出于安全目的，Parse SDK 确保只能由您应用程序内的接收器处理此意图。此外，您应确保在 `<receiver>` 元素上设置 `android:exported` 属性，从而防止其他应用程序向您的接收器发送推送通知。

向接收器传送的 `Intent` 对象包含一个额外的 `Bundle`，其中有两个有用映射。`"com.parse.Channel"` 键指向代表消息传送通道的字符串。`"com.parse.Data"` 键指向一个字符串，该字符串代表推送通知中设置的 `"data"` 字典的 JSON 编码值。以下示例中，代码将解析 JSON 推送通知，并将其记录在 Android 仿真器控制台上：

```java
public class MyCustomReceiver extends BroadcastReceiver {
private static final String TAG = "MyCustomReceiver";

  @Override
  public void onReceive(Context context, Intent intent) {
    try {
      String action = intent.getAction();
      String channel = intent.getExtras().getString("com.parse.Channel");
      JSONObject json = new JSONObject(intent.getExtras().getString("com.parse.Data"));

      Log.d(TAG, "got action " + action + " on channel " + channel + " with:");
      Iterator itr = json.keys();
      while (itr.hasNext()) {
        String key = (String) itr.next();
        Log.d(TAG, "..." + key + " => " + json.getString(key));
      }
    } catch (JSONException e) {
      Log.d(TAG, "JSONException: " + e.getMessage());
    }
  }
}
```

### 跟踪推送和应用开启次数

为了跟踪您的用户在一段时间内的参与情况以及推送通知的效果，我们在 `ParseAnalytics` 类内提供了一些挂接点。

如果您通过 `Activity` 来响应推送通知，则将以下内容添加到您用于处理推送的 `Activity` 的 `onCreate` 方法中，如此您便可以收集关于您的应用程序何时打开和被什么激活的信息。如果您通过执行自定义 `BroadcastReceiver` 来响应推送通知，则调整代码以使用传送至 `onReceive` 的 `Intent`。

```java
ParseAnalytics.trackAppOpened(getIntent());
```

`trackAppOpened` 的 `null` 参数将_只_跟踪标准的应用开启事件（例如，如果 `Intent` 上的 Parse 净负载为空，或者您通过明确传入 `null` 忽略推送通知）。

可以在您的应用程序面板上查看应用程序开启次数和与推送相关的开启率。

## 疑难解答

设置推送通知经常会困扰开发人员。这个过程复杂而且经常会出现各种问题。碰到问题时，请尝试以下这些疑难解答提示。 

*   [升级至最新版 SDK](/docs/downloads)。Android 中关于推送通知的几个常见问题已在最新发布的 Parse 中得到解决。
*   请确保您拥有 `AndroidManifest.xml` 文件中所列的正确权限，如 [Android 推送快速指南](/apps/quickstart_push#android/native/existing)的第 4 步和第 6 步所述。如果您在使用自定义接收者，请确保已在 Manifest 文件中对其进行了注册，从而使其拥有正确的 `android:name` 属性和合适意图过滤器。
*   确保您使用了正确的应用程序 ID 和客户端密钥，以及 `Parse.initialize()` 正被调用。`Parse.initialize()` 可以让服务清楚正在收听哪个应用程序。对于特定活动，我们建议将此代码放在 `Application.onCreate` 中而非 `onCreate` 方法中，以便所有激活技术都能清楚如何使用 Parse。
*   检查确认设备已设置好接受来自您的应用程序的推送通知。
*   在您的 Parse 推送控制台中确认接收者数量。其是否与预期的接收者数量相符？否则的话，您的推送未进行正确的受众定位。
*   如果在仿真器中测试，请尝试清理和重建您的项目并且重启您的 AVD。*   通过 `Parse.setLogLevel(Parse.LOG_LEVEL_VERBOSE)` 打开详细日志记录。错误消息将有助于指出可能发生的情况。
*   如果您在面板上看到“Finished (with error)”（完成，但有错误）这条信息，请检查详细日志记录。如果您从设备进行推送，请检查确认您的面板上启用了客户端推送。
*   在日志中您可能看到“Could not construct writer”（无法创建作者）这条错误消息或者与 broken pipe（管道破裂）相关的其他问题。这种情况下，框架将继续尝试重新连接。这不会致使您的应用程序崩溃。
