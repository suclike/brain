# 使用者

許多應用程式有個核心觀念，就是使用者帳號要讓使用者以安全的方式存取資訊。我們提供稱為 `Parse.User` 的特殊使用者類別，此類別將自動處理管理使用者帳號所需的大部分功能。

您可以透過此類別在應用程式中加入使用者帳號功能。

`Parse.User` 為 `Parse.Object` 的子類別，並且具有所有相同功能，比如具彈性的結構描述、自動保留和索引鍵值介面。`Parse.Object` 的所有方法也存在於 `Parse.User`。不同之處在於 Parse.User 有一些專用於使用者帳號的特殊附加功能。

## 屬性

`Parse.User` 有一些值與 `Parse.Object` 有所區別：

*   使用者名稱：使用者的名稱（必要）。
*   密碼：使用者的密碼（註冊時需要）。
*   電子郵件：使用者的電子郵件地址（選擇性）。

我們在之後探討使用者的各種不同使用情況時，將詳細討論上述各項。

## 註冊

您的應用程式做的第一件事可能是要求使用者註冊。下列程式碼將示範典型的註冊：

```js
var user = new Parse.User();
user.set("username", "my name");
user.set("password", "my pass");
user.set("email", "email@example.com");

// other fields can be set just like with Parse.Object
user.set("phone", "415-392-0202");
user.signUp(null, {
  success: function(user) {
    // Hooray! Let them use the app now.
  },
  error: function(user, error) {
    // Show the error message somewhere and let the user try again.
    alert("Error: " + error.code + " " + error.message);
  }
});
```

此次呼叫將以非同步方式在您的 Parse 應用程式中建立新使用者。在進行此操作之前，會先查看以確定使用者名稱和電子郵件是唯一的。為求安全還會在雲端將密碼雜湊處理。我們絕不會以純文字格式儲存密碼，也不會以純文字格式將密碼傳回用戶端。

請注意我們用的是 `signUp` 方法，而不是 `save` 方法。新的 `Parse.User` 應該都要使用 `signUp` 方法建立。使用者的後續更新均可透過呼叫 `save` 完成。

如果註冊不成功，您應該要讀取傳回的錯誤物件。最可能發生的情況是，使用者名稱或電子郵件已有其他使用者採用。您應該要清楚地向使用者溝通此情況，並要求他們嘗試不同的使用者名稱。

您可隨意將電子郵件地址當成使用者名稱使用。只需要求使用者輸入電子郵件，但要將電子郵件填在使用者名稱屬性中；`Parse.User` 將如平常一樣運作。我們將在「重設密碼」章節中討論上述情況是如何處理的。

## 登入

讓使用者註冊之後，當然必須讓他們日後能登入帳號。若要這樣做，您可以使用類別方法 `logIn`。

```js
Parse.User.logIn("myname", "mypass", {
  success: function(user) {
    // Do stuff after successful login.
  },
  error: function(user, error) {
    // The login failed. Check error to see why.
  }
});
```

## 驗證電子郵件

在應用程式的設定中啟用電子郵件驗證，能讓應用程式將部分體驗保留給電子郵件地址經過確認的使用者。電子郵件驗證會將 `emailVerified` 索引鍵加入 `Parse.User` 物件。`Parse.User` 的 `email` 被設定或修改時，就會將 `emailVerified` 設定成 `false`。然後 Parse 會以電子郵件將一個連結寄給使用者，此連結會將 `emailVerified` 設定為 `true`。

有三種 `emailVerified` 狀態需要考慮：

1.  `true` - 使用者透過點擊 Parse 寄來的連結，確認他／她的電子郵件地址。最初建立使用者帳號時，`Parse.Users` 不會包含 `true` 值。
2.  `false` - `Parse.User` 物件最後一次重新整理時，使用者並未確認他／她的電子郵件地址。如果 `emailVerified` 為 `false`，請考慮呼叫 `Parse.User` 上的 `fetch`。
3.  _遺失_ - `Parse.User` 建立時未進行電子郵件驗證或 `Parse.User` 沒有 `email`。

## 目前使用者

如果使用者每次開啟應用程式時都要登入，會很麻煩。您可使用目前已快取的 `Parse.User` 物件，避免這樣的情況。

無論何時只要您使用任何註冊或登入方法，使用者都會被快取到本機存放區。您可將此快取視為工作階段，並自動假設使用者已經登入：

```js
var currentUser = Parse.User.current();
if (currentUser) {
  // do stuff with the user
} else {
  // show the signup or login page
}
```

您可藉由登出使用者清除目前的使用者：

```js
Parse.User.logOut();
var currentUser = Parse.User.current(); // this will now be null
```

## 設定目前使用者

如果您已建立自己的驗證常式，或已經在伺服器端登入使用者，現在您就可以將工作階段權仗傳至用戶端，並使用 `become` 方法。此方法在設定目前使用者之前，將確保工作階段權杖有效。

```js
Parse.User.become("session-token-here").then(function (user) 
  // The current user is now set to user.
}, function (error) {
  // The token could not be validated.
});
```

## 使用者物件的安全性

依照預設，`Parse.User` 是受保護的類別。儲存在 `Parse.User` 中的資料只能由該使用者進行修改。依照預設，任何用戶端仍能讀取這些資料。因此，部分 `Parse.User` 物件已經過驗證且能加以修改，而其他物件則為唯讀。

具體而言，除非 `Parse.User` 是透過已驗證的方法取得（如 `logIn` 或 `signUp`），否則您不能叫用任何 `save` 或 `delete` 方法。這樣做能確保只有使用者能更改自己擁有的資料。

以下將示範此安全性原則：

```js
var user = Parse.User.logIn("my_username", "my_password", {
  success: function(user) {
    user.set("username", "my_new_username");  // attempt to change username
    user.save(null, {
      success: function(user) {
        // This succeeds, since the user was authenticated on the device
        // Get the user from a non-authenticated method
        var query = new Parse.Query(Parse.User);
        query.get(user.objectId, {
          success: function(userAgain) {
            userAgain.set("username", "another_username");
            userAgain.save(null, {
              error: function(userAgain, error) {
                // This will error, since the Parse.User is not authenticated
              }
            });
          }
        });
      }
    });
  }
});
```

從 `Parse.User.current()` 取得的 `Parse.User` 永遠會進行驗證。

如果有必要檢查 `Parse.User` 是否已經過驗證，您可以叫用 `authenticated` 方法。透過已驗證方法取得的 `Parse.User` 物件，您不必檢查 `authenticated`。

## 其他物件的安全性

套用至 `Parse.User` 的相同安全性模型，也能套用至其他物件。就任何物件而言，您可以指定哪個使用者能讀取物件，以及哪個使用者可以修改物件。為了支援此類型的安全性，每個物件都有由 `Parse.ACL` 類別實作的[存取控制清單](http://en.wikipedia.org/wiki/Access_control_list)。

使用 `Parse.ACL` 最簡單的方法，是指定物件只能由單一使用者讀取或寫入。若要建立這樣的物件，必須先有已登入的 `Parse.User`。接著，`new Parse.ACL(user)` 會產生限制該使用者存取權限的 `Parse.ACL`。儲存物件時，物件的 ACL （Access Control List，存取控制清單）跟其他屬性一樣會更新。因此，若要建立只能由目前使用者存取的私人記事：

```js
var Note = Parse.Object.extend("Note");
var privateNote = new Note();
privateNote.set("content", "This note is private!");
privateNote.setACL(new Parse.ACL(Parse.User.current()));
privateNote.save();
```

此記事只能由目前使用者存取，然而該名使用者登入的任何裝置都能存取。如果您想讓應用程式跨多個裝置存取使用者資料，比如個人待辦事項清單，這項功能會很有用。

您也可依個別使用者授與權限。您可以使用 `setReadAccess` 和 `setWriteAccess` 個別將權限新增至 `Parse.ACL`。例如，假設您有一則訊息要傳送給含有多名使用者的群組，而他們之中每個人都有權限可以閱讀和刪除此訊息：

```js
var Message = Parse.Object.extend("Message");
var groupMessage = new Message();
var groupACL = new Parse.ACL();

// userList is an array with the users we are sending this message to.
for (var i = 0; i < userList.length; i++) {
  groupACL.setReadAccess(userList[i], true);
  groupACL.setWriteAccess(userList[i], true);
}

groupMessage.setACL(groupACL);
groupMessage.save();
```

您也可以使用 `setPublicReadAccess` 和 `setPublicWriteAccess`，同時授與權限給所有使用者。此操作允許像在留言版發佈留言的使用模式。例如，建立只能由其作者編輯但所有人都能閱讀的貼文：

```js
var publicPost = new Post();
var postACL = new Parse.ACL(Parse.User.current());
postACL.setPublicReadAccess(true);
publicPost.setACL(postACL);
publicPost.save();
```

被禁止的操作，比如刪除您沒有寫入存取權限的物件，會導致 `Parse.Error.OBJECT_NOT_FOUND` 錯誤代碼。基於安全性目的，這樣做能避免用戶端辨別出哪個物件 ID 存在但受保護，而哪個物件 ID 根本不存在。

## 重設密碼

事實上只要您將密碼導入系統中，使用者就會開始忘記密碼。在這種情況下，我們的程式庫提供能讓他們安全地重設密碼的方法。

若要開始密碼重設流程，請向使用者要求電子郵件，然後呼叫：

```js
Parse.User.requestPasswordReset("email@example.com", {
  success: function() {
    // Password reset request was sent successfully
  },
  error: function(error) {
    // Show the error message somewhere
    alert("Error: " + error.code + " " + error.message);
  }
});
```

系統會嘗試就指定的電子郵件跟使用者電子郵件或使用者名稱欄位進行比對，然後將重設密碼電子郵件傳送給使用者。透過這種作法，您可以選擇讓使用者把電子郵件當使用者名稱用，或是另外收集電子郵件，再將其儲存在電子郵件欄位。

重設密碼流程如下：

1.  使用者透過輸入自己的電子郵件，要求重新設定密碼。
2.  Parse 將附有密碼重設專用連結的電子郵件，傳送到使用者的電子郵件地址。
3.  使用者點擊重設連結，然後被導向至可輸入新密碼的 Parse 頁面。
4.  使用者輸入新密碼。此時密碼重設為他們所指定的值。

請注意，本流程中出現的訊息會根據您在 Parse 建立此應用程式時所指定的名稱，以參照您的應用程式。

## 查詢

若要查詢使用者，您只需新建 `Parse.User` 的 `Parse.Query`：

```js
var query = new Parse.Query(Parse.User);
query.equalTo(gender, "female");
// find all the women
query.find({
  success: function(women) {
    // Do stuff
  }
});
```

## 關聯

涉及 `Parse.User` 的關聯能立即使用。例如，假設您正在建立部落格應用程式。若要儲存使用者的新貼文並擷取他們的所有貼文：

```js
var user = Parse.User.current();
// Make a new post
var Post = Parse.Object.extend("Post");
var post = new Post();
post.set("title", "My New Post");
post.set("body", "This is some great content.");
post.set("user", user);
post.save(null, {
  success: function(post) {
    // Find all posts by the current user
    var query = new Parse.Query(Post);
    query.equalTo("user", user);
    query.find({
      success: function(usersPosts) {
        // userPosts contains all of the posts by the current user.
      }
    });
  }
});
```

## Facebook 使用者

Parse 提供將 Facebook 與您的應用程式整合的簡單方法。`Parse.FacebookUtils` 類別整合 `Parse.User` 和 Facebook Javascript SDK，使得將使用者連結至他們的 Facebook 身分變得更容易。

藉由使用我們的 Facebook 整合功能，您可以將已驗證的 Facebook 使用者與 `Parse.User` 建立關聯。只要幾行程式碼，您就能在應用程式中提供「使用 Facebook 登入」選項，而且還能將使用者的資料儲存至 Parse。

### 設定

若要開始透過 Parse 使用 Facebook，您必須：

1.  [設定 Facebook 應用程式](https://developers.facebook.com/apps)（如果您尚未設定）。選擇「選擇應用程式與 Facebook 的整合方式」下方的「用 Facebook 登入的網站」選項，然後輸入您的網站網址。
2.  將應用程式的 Facebook 應用程式 ID 加入 Parse 應用程式的設定頁面。
3.  遵照[這些指示](https://developers.facebook.com/docs/reference/javascript/)將 Facebook Javascript SDK 載入您的應用程式。
4.  用對 `Parse.FacebookUtils.init()` 的呼叫取代對 `FB.init()` 的呼叫。例如，如果您以非同步方式載入 Facebook SDK，您的 `fbAsyncInit` 函數看起來就會像這樣：
```js
window.fbAsyncInit = function() {
  Parse.FacebookUtils.init({
   appId: 'YOUR_APP_ID', // Facebook App ID
   channelUrl: '//WWW.YOUR_DOMAIN.COM/channel.html', // Channel File
   status: true, // check login status
   cookie: true, // enable cookies to allow Parse to access the session
   xfbml: true  // parse  });
  // Additional initialization code here
};
```

如果您遇到任何 Facebook 相關問題，[Facebook 官方快速入門指南](https://developers.facebook.com/docs/reference/javascript/)是很好的參考資源。

透過 Parse 使用者使用 Facebook 有兩種主要的方式：(1) 以 Facebook 使用者身分登入並建立 `Parse.User`，或 (2) 將 Facebook 連結至現有的 `Parse.User`。

### 登入與註冊

`Parse.FacebookUtils` 提供讓 `Parse.User` 透過 Facebook 登入或註冊的方式。此方式是利用 `logIn()` 方法完成：

```js
Parse.FacebookUtils.logIn(null, {
  success: function(user) {
    if (!user.existed()) {
      alert("User signed up and logged in through Facebook!");
    } else {
      alert("User logged in through Facebook!");
    }
  },
  error: function(user, error) {
    alert("User cancelled the Facebook login or did not fully authorize.");
  }
});
```

執行這段程式碼時，會發生以下情況：

1.  會向使用者顯示 Facebok 登入對話方塊。
2.  使用者透過 Facebook 通過驗證，而您的應用程式則會收到回呼。
3.  我們的 SDK 會收到 Facebook 的資料，並將其儲存於 `Parse.User`。如果是基於 Facebook ID 的新使用者，就會建立該使用者。
4.  您的 `success` 回呼會與該使用者一起呼叫。

您可以選擇性地提供以逗號分隔的字串，用來指定您的應用程式必須自 Facebook 使用者取得哪些[權限](https://developers.facebook.com/docs/authentication/permissions/)。例如：

```js
Parse.FacebookUtils.logIn("user_likes,email", {
  success: function(user) {
    // Handle successful login
  },
  error: function(user, error) {
    // Handle errors and cancellation
  }
});
```

`Parse.User` 整合不需任何權限即可立即使用，例如：`null` 或不指定權限也完全可以接受）。[請參閱 Facebook 開發人員指南，取得更多關於權限的資料](https://developers.facebook.com/docs/reference/api/permissions/)。

<div class='tip info'><div>
經過驗證之後，是否要記錄任何需從 Facebook 使用者取得的資料，由您決定。若要完成此操作，您必須[透過 Facebook SDK 執行圖表查詢](https://parse.com/questions/how-can-i-find-parse-users-that-are-facebook-friends-with-the-current-user)
</div></div>

### 連結

如果您想將現有的 `Parse.User` 關聯至 Facebook 帳號，可以像這樣加以連結：

```js
if (!Parse.FacebookUtils.isLinked(user)) {
  Parse.FacebookUtils.link(user, null, {
    success: function(user) {
      alert("Woohoo, user logged in with Facebook!");
    },
    error: function(user, error) {
      alert("User cancelled the Facebook login or did not fully authorize.");
    }
  });
}
```

進行連結時的步驟跟登入很相似。不同之處在於成功登入時，會在現有的 `Pars.eUser` 更新 Facebook 資訊。之後透過 Facebook 的登入，會將使用者登入至他們現有的帳號。

如果您想從某個使用者上取消連結 Facebook，只需這樣做：

```js
Parse.FacebookUtils.unlink(user, {
  success: function(user) {
    alert("The user is no longer associated with their Facebook account.");
  }
});
```

### Facebook SDK 與 Parse

Facebook Javascript SDK 提供一個主要的 `FB` 物件，是與 Facebook API 眾多互動的起點。[您可以在這裡讀到關於 Facebook SDK 的更多資訊](https://developers.facebook.com/docs/reference/javascript/)。

使用 Parse SDK 的 Facebook 登入，必須在呼叫 `Parse.FacebookUtils.init()` 之前已載入 Facebook SDK。

我們的程式庫會替您管理 `FB` 物件。依照預設，`FB` 單例會與目前使用者同步，所以您在它上面呼叫的許多方法，也會在與目前 `Parse.User` 相關聯的 Facebook 使用者上運作。明確呼叫 `FB.login()` 或 `FB.logOut()` 將造成 `Parse.User` 和 `FB` 物件退出同步，因此不建議這樣做。
