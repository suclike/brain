# プッシュ通知

プッシュ通知は、アプリの利用率を維持し、アプリの情報を利用者に通知するのに非常に便利な手段です。利用者全体にすばやく、効率的にリーチできます。このガイドでは、設定手順と、プッシュ通知送信のためのParseの一般的な使用方法を紹介します。

## プッシュ通知の設定

プッシュを使用する場合、[iOSプッシュチュートリアル](/tutorials/ios-push-notifications)を完了してアプリの設定方法を確認してください。その後このガイドに戻り、Parseが提供するプッシュ機能に関する詳細について学びます。

## インストール

プッシュ通知を登録したデバイスにインストールされている各Parseアプリケーションには、関連する`Installation`オブジェクトがあります。`Installation`オブジェクトには、プッシュ通知のターゲットを設定するのに必要なすべてのデータが格納されます。たとえば、野球のアプリの場合、利用者が興味を持っているチームを格納しておけば、チーム成績に関する更新情報をを送信できます。

iOSでは、`Installation`オブジェクトは`%{ParseObject}`のサブクラスである`%{ParseInstallation}`を通じて利用することができます。データの保存と取得には[同じAPI](#objects)を使用します。iOSアプリから現在の`Installation`オブジェクトにアクセスするには、`[PFInstallation currentInstallation]`メソッドを使用します。`%{ParseInstallation}`を初めて保存する場合、それはParseでは`Installation`クラスに追加されます。`deviceToken`フィールドが設定されている限り、プッシュ通知の対象として利用できます。

```objc
- (void)application:(UIApplication *)application
        didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    // Store the deviceToken in the current Installation and save it to Parse.
    PFInstallation *currentInstallation = [PFInstallation currentInstallation];
    [currentInstallation setDeviceTokenFromData:deviceToken];
    [currentInstallation saveInBackground];
}
```

`%{ParseObject}`を変更するように、`%{ParseInstallation}`を変更できますが、デバイスを管理したり対象にする際に役立つ特別なフィールドがいくつかあります。

*   **`badge`**: iOSアプリのアイコンバッジの現在の値。`%{ParseInstallation}`でこの値を変更すると、アプリアイコンのバッジ値が更新します。変更内容はサーバーに保存し、今後のバッジ増分のプッシュ通知に使用します。
*   **`channels`**: 現在、端末を登録してあるチャンネルの配列。
*   **`timeZone`**: ターゲット端末がある現在のタイムゾーン。この値は`Installation`オブジェクトが端末から保存されるたびに同期されます（読み取り専用）。
*   **`deviceType`**: 端末のタイプ「ios」、「android」、「winrt」、「winphone」、「dotnet」（読み取り専用）。
*   **`installationId`**: Parseで使用する端末の一意のID（読み取り専用）。
*   **`deviceToken`**: Appleが生成するiOS端末用のトークン（読み取り専用）。
*   **`channelUris`**: Microsoftが生成するWindows端末用のプッシュURL（読み取り専用）。
*   **`appName`**: このインストールが属するクライアントアプリケーションのディスプレイ名（読み取り専用）。
*   **`appVersion`**: このインストールが属するクライアントアプリケーションのバージョン文字列（読み取り専用）。
*   **`parseVersion`**: このインストールが使用するParse SDKのバージョン（読み取り専用）。
*   **`appIdentifier`**: このインストールのクライアントアプリケーションの一意のID。iOSではBundle IDになります（読み取り専用）。

## プッシュの送信

Parseを使用してプッシュ通知を送信する方法は[チャンネル](#sending-channels)と[高度なターゲット設定](#sending-queries)の2つがあります。チャンネルにはプッシュ送信用の簡単で使いやすいモデルが用意されており、高度なターゲット設定にはより詳細で柔軟性のあるモデルが用意されています。両方の方法とも互いに完全な互換性を持っています。詳細はこのセクションで説明します。

通常、通知はウェブコンソールのREST APIかクラウドコードを使用して送信します。ただし、プッシュ通知は既存のクライアントSDKでトリガすることもできます。クライアントのSDKから通知を送信する場合、Parseアプリの[プッシュ通知設定]で **Client Push Enabled** を設定する必要があります。

![](/images/docs/client_push_settings.png)

### チャンネルの使用

通知を送信する最も簡単な方法はチャンネルを使用することです。チャンネルでは、プッシュ送信に発行者-登録者モデルを使用できます。まず端末を1つまたは複数のチャンネルに登録すると、後でその登録者に通知が送信されます。特定の`Installation`が登録したチャンネルは`Installation`オブジェクトの`channels`フィールドに格納されます。

#### チャンネルへの登録 

チャンネルは文字で始まり、英数字とアンダースコア、ダッシュで構成される文字列で識別されます。使用できるようになってから作成すればよく、各`Installation`では一度にいくつものチャンネルを登録することができます。

チャンネル登録は`%{ParseObject}`で`addUniqueObject:`メソッドを使用することで追加できます。たとえば、野球スコアのアプリでは、次のようにすることができます。

```objc
// When users indicate they are Giants fans, we subscribe them to that channel.
PFInstallation *currentInstallation = [PFInstallation currentInstallation];
[currentInstallation addUniqueObject:@"Giants" forKey:@"channels"];
[currentInstallation saveInBackground];
```

「ジャイアンツ」チャンネルに登録すると、`Installation`オブジェクトには更新された`channels`フィールドがあります。

![](/images/docs/installation_channel.png)

チャンネルの登録を解除することも簡単です。

```objc
// When users indicate they are no longer Giants fans, we unsubscribe them.
PFInstallation *currentInstallation = [PFInstallation currentInstallation];
[currentInstallation removeObject:@"Giants" forKey:@"channels"];
[currentInstallation saveInBackground];
```

登録している一連のチャンネルは`currentInstallation`オブジェクトでキャッシュされています。

```objc
NSArray *subscribedChannels = [PFInstallation currentInstallation].channels;
```

クラウドコードやデータブラウザからチャンネルを変更しようとする場合、この行の前に一種の`fetch`を呼び出して、最新のチャンネルを取得する必要があります。

#### チャンネルへのプッシュ送信

iOS SDKでは、次のコードを使用して「ジャイアンツ」チャンネルのすべての登録者に、お気に入りのチームが得点したことをアラートすることができます。iOSユーザーの場合は通知センターアラートとして表示され、Androidユーザーにはシステムトレイ通知として表示されます。

```objc
// Send a notification to all devices subscribed to the "Giants" channel.
PFPush *push = [[PFPush alloc] init];
[push setChannel:@"Giants"];
[push setMessage:@"The Giants just scored!"];
[push sendPushInBackground];
```

1つのプッシュ通知で複数のチャンネルを対象にしたい場合は、チャンネルの`NSArray`を使用することができます。

```objc
NSArray *channels = [NSArray arrayWithObjects:@"Giants", @"Mets", nil];
PFPush *push = [[PFPush alloc] init];
// Be sure to use the plural 'setChannels'.
[push setChannels:channels];
[push setMessage:@"The Giants won against the Mets 2-3."];
[push sendPushInBackground];
```

### [高度なターゲット設定]の使用

多くのアプリケーションでチャンネルは大変便利ですが、プッシュの受信者のターゲットを設定する場合は、より詳細な設定が必要になることがあります。Parseでは、[APIのクエリ](#queries)を使用して`Installation`オブジェクトのサブセット用のクエリを記述し、プッシュを送信できます。

`%{ParseInstallation}`は`%{ParseObject}`のサブクラスであるので、希望するファイルを保存したり、`Installation`オブジェクトとその他のオブジェクト間の関係を作成したりできます。そのため、詳細にカスタマイズした利用者ベースのセグメントや動的なセグメントにプッシュを送信できます。

#### インストールデータの保存

`Installation`オブジェクトでデータを保存することは、Parseで[その他のデータ](#objects)を保存するのと同じように簡単です。野球アプリでは、利用者は試合の結果や得点、怪我の報告などについてのプッシュを取得できます。

```objc
// Store app language and version
PFInstallation *installation = [PFInstallation currentInstallation];
[installation setObject:YES forKey:@"scores"];
[installation setObject:YES forKey:@"gameResults"];
[installation setObject:YES forKey:@"injuryReports"];
[installation saveInBackground];
```

また、`Installation`オブジェクトとParseで保存されているその他のクラス間の関係を作成することもできます。たとえば、PFInstallationを特定の利用者に関連付けるには、現在の利用者を`%{ParseInstallation}`で保存するだけです。

```objc
// Associate the device with a user
PFInstallation *installation = [PFInstallation currentInstallation];
installation[@"user"] = [PFUser currentUser];
[installation saveInBackground];
```

#### クエリへのプッシュの送信

`Installation`オブジェクトにデータを保存したら、`PFQuery`を使用してこれらの端末のサブセットにターゲットを絞り込むことができます。`Installation`クエリはその他の[Parseクエリ](#queries)と同じように機能しますが、特別な静的メソッドである`[PFInstallation query]`を使用して作成します。通知を送信する前にこのクエリを`PFPush`オブジェクトに設定します。

```objc
// Create our Installation query
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"injuryReports" equalTo:YES];
// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
// Set our Installation query
[push setMessage:@"Willie Hayes injured by own pop fly."];
[push sendPushInBackground];
```

Parseのクエリにはチャンネルも使用できます。「ジャイアンツ」チャンネルのすべての登録者の内、得点の更新情報をしりたい登録者に絞り込んでプッシュを送信するには、次のようにします。

```objc
// Create our Installation query
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"channels" equalTo:@"Giants"];
// Set channel
[pushQuery whereKey:@"scores" equalTo:YES];
// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
[push setMessage:@"Giants scored against the A's! It's now 2-2."];
[push sendPushInBackground];
```

`Installation`クラスに他のオブジェクトへの関係を格納する場合、クエリの関係を使用することもできます。たとえば、特定の場所付近のすべての利用者にプッシュ通知を送信する場合は、次のようにします。

```objc
// Find users near a given location
PFQuery *userQuery = [PFUser query];
[userQuery whereKey:@"location"
           nearGeoPoint:stadiumLocation
           withinMiles:[NSNumber numberWithInt:1]]
// Find devices associated with these users
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"user" matchesQuery:userQuery];

// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
// Set our Installation query
[push setMessage:@"Free hotdogs at the Parse concession stand!"];
[push sendPushInBackground];
```

## オプションの送信

プッシュ通知にはメッセージ送信以外の機能もあります。iOSでは、再生する音声、表示するバッジ番号、送信したいカスタムデータをプッシュに入れることができます。さらに、時間制約がある場合は、通知に期日を有効期限できます。

### 通知のカスタマイズ

メッセージ以外を送信する場合、`NSDictionary`を使用してすべてのデータをパッケージ化する必要があります。次のように、特別な意味を持つ予約済みのフィールドがあります。

*   **`alert`**: 通知のメッセージ。
*   **`badge`**: （iOSのみ）アプリのアイコンの右上にある値。値に設定するか、現在の値を1増やすための`Increment`に設定できます。
*   **`sound`**: （iOSのみ）アプリケーションバンドル内の音声ファイルの名前。
*   **`content-available`**: （iOSのみ）[iOS7で導入された](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10)リモート通知バックグラウンドモード(別名「バックグラウンドプッシュ」)を使用して[Newsstand](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html)アプリやその他のアプリを書き込んでいる場合、この値を1に設定してバックグラウンドのダウンロードをトリガします。
*   **`action`**: （Androidのみ）`Intent`はプッシュが受信される場合に実行されます。`title`や`alert`の値が指定されていない場合は、`Intent`は起動しますが、利用者に通知は表示されません。
*   **`title`**: （Android、Windows 8、Windows Phone 8のみ）AndroidシステムトレイやWindowsトースト通知で表示される値。

たとえば、現在のバッジ番号が1つずつ増え、カスタム音声を再生する通知を送信するには、次を実行することができます。

```objc
NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:
                       @"The Mets scored! The game is now tied 1-1!", @"alert",
                       @"Increment", @"badge",
                       @"cheering.caf", @"sound",
                       nil];
PFPush *push = [[PFPush alloc] init];
[push setChannels:[NSArray arrayWithObjects:@"Mets", nil]];
[push setData:data];
[push sendPushInBackground];
```

この辞書には独自のデータを指定することもできます。[通知の受信](#receiving/iOS)セクションで確認しますが、利用者が通知を経由してアプリを開く場合にのみ、このデータにアクセスできます。これは利用者が特定の通知を開く際に個別のビューコントローラーを表示するのに役に立ちます。

```objc
NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:
                        @"Ricky Vaughn was injured in last night's game!", @"alert",
                        @"Vaughn", @"name",
                        @"Man bites dog", @"newsItem",
                        nil];
PFPush *push = [[PFPush alloc] init];
[push setQuery:injuryReportsQuery];
[push setChannel:@"Indians"];
[push setData:data];
[push sendPushInBackground];
```

プッシュ通知でアプリのバッジを増やしたり、特定の値に設定したりなど内容に関係なく、アプリでは最終的にはバッジを消去する必要があります。これについては[バッジの消去](#receiving/iOS)で説明します。

### 有効期限の設定

利用者の端末がオフになっていたり、インターネットに接続されていない場合は、プッシュ通知は配信されません。時間制約があり、期日後には配信する必要がない通知の場合は、有効期限を設定できます。。これにより、すでに関連性がなくなっている不要な情報を利用者に通知することがなくなります。

`PFPush`クラスで提供される通知の有効期限を設定できるメソッドは2つあります。まずは`expireAtDate:`です。これは`NSDate`でParseにおいて通知の送信試行を停止するときを指定します。

```objc
// Create date object for tomorrow
NSDateComponents *comps = [[NSDateComponents alloc] init];
[comps setYear:2015];
[comps setMonth:8];
[comps setDay:14];
NSCalendar *gregorian =
    [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
NSDate *date = [gregorian dateFromComponents:comps];
// Send push notification with expiration date
PFPush *push = [[PFPush alloc] init];
[push expireAtDate:date];
[push setQuery:everyoneQuery];
[push setMessage:@"Season tickets on sale until August 8th!"];
[push sendPushInBackground];
```

ただしこのメソッドには注意点があります。デバイスの時計の精度は保証されていないため、正しくない結果がもたらされる場合があります。このため、`PFPush`クラスでは`NSTimeInterval`オブジェクトを許可する`expireAfterTimeInterval:`メソッドも提供しています。通知は特定の期間が過ぎたら無効になります。

```objc
// Create time interval
NSTimeInterval interval = 60*60*24*7; // 1 week
// Send push notification with expiration interval
PFPush *push = [[PFPush alloc] init];
[push expireAfterTimeInterval:interval];
[push setQuery:everyoneQuery];
[push setMessage:@"Season tickets on sale until next week!"];
[push sendPushInBackground];
```

### プラットフォームごとのターゲット設定

クロスプラットフォームアプリを構築する場合、特定のオペレーティングシステムに端末を絞り込みたい場合があるでしょう。[高度なターゲット設定]によってターゲットにする端末をフィルタすることができます。

次の例では、個別の通知をAndroid、iOS、Windows 8ユーザーに送信します。

```objc
PFQuery *query = [PFInstallation query];
[query whereKey:@"channels" equalTo:@"suitcaseOwners"];

// Notification for Android users
[query whereKey:@"deviceType" equalTo:@"android"];
PFPush *androidPush = [[PFPush alloc] init];
[androidPush setMessage:@"Your suitcase has been filled with tiny robots!"];
[androidPush setQuery:query];
[androidPush sendPushInBackground];

// Notification for iOS users
[query whereKey:@"deviceType" equalTo:@"ios"];
PFPush *iOSPush = [[PFPush alloc] init];
[iOSPush setMessage:@"Your suitcase has been filled with tiny apples!"];
[iOSPush setChannel:@"suitcaseOwners"];
[iOSPush setQuery:query];
[iOSPush sendPushInBackground];

// Notification for Windows 8 users
[query whereKey:@"deviceType" equalTo:@"winrt"];
PFPush *winPush = [[PFPush alloc] init];
[winPush setMessage:@"Your suitcase has been filled with tiny glass!"];
[winPush setQuery:query];
[winPush sendPushInBackground];

// Notification for Windows 8 users
[query whereKey:@"deviceType" equalTo:@"winphone"];
PFPush *winPush = [[PFPush alloc] init];
[wpPush setMessage:@"Your suitcase is very hip; very metro."];
[wpPush setQuery:query];
[wpPush sendPushInBackground];
```

## プッシュのスケジュール設定

送信がスケジュールされたプッシュ通知は現在iOS SDKではサポートされていません。[REST API](#scheduled/REST)、[JavaScript SDK](#scheduled/JavaScript)、ウェブコンソールを確認してください。

## プッシュの受信

[通知のカスタマイズ](#options-data)セクションで確認したように、通知メッセージと一緒に任意のデータを送信���きます。このデータを使���して、利用者が通知を開いたときのアプリの動作を変更できます。たとえば、利用者の写真にお友達がコメントした旨の通知を開く際、その写真が表示されようになります。

Appleではパッケージサイズに制限を課しているため、送信するデータ量を注意して管理する必要があります。メッセージの最大サイズが縮小してしまう恐れがあるからです。このため、追加するキーや値はできる限り小さく抑えることをお勧めします。

```objc
NSDictionary *data = @{
    @"alert": @"James commented on your photo!",
    @"p": @"vmRZXZ1Dvo" // Photo's object id
};
PFPush *push = [[PFPush alloc] init];
[push setQuery:photoOwnerQuery];
[push setData:data];
[push sendPushInBackground];
```%>

### ペイロードへの応答

通知からアプリを開く場合、データは`launchOptions`ディクショナリを介して`application:didFinishLaunchingWithOptions:`メソッドで利用できるようになります。

```objc
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    . . .
    // Extract the notification data
    NSDictionary *notificationPayload = launchOptions[UIApplicationLaunchOptionsRemoteNotificationKey];
    // Create a pointer to the Photo object
    NSString *photoId = [notificationPayload objectForKey:@"p"];
    PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@"Photo"
                                      objectId:photoId];
    // Fetch photo object
    [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
        // Show photo view controller
        if (!error && [PFUser currentUser]) {
            PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];
            [self.navController pushViewController:viewController animated:YES];
        }
    }];
}
```

通知を受信したときにアプリがすでに実行中の場合、データは`userInfo`辞書を介して`application:didReceiveRemoteNotification:fetchCompletionHandler:`メソッドで利用できるようになります。

```objc
- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))handler {
    // Create empty photo object
    NSString *photoId = [userInfo objectForKey:@"p"];
    PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@"Photo"
                                      objectId:photoId];
    // Fetch photo object
    [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
        // Show photo view controller
        if (error) {
            handler(UIBackgroundFetchResultFailed);
        } else if ([PFUser currentUser]) {
            PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];
            [self.navController pushViewController:viewController animated:YES];
            handler(UIBackgroundFetchResultNewData);
        } else {
            handler(UIBackgroundModeNoData);
        }
    }];
}
```

プッシュ通知の処理に関する詳細は、Appleの[ローカルおよびプッシュ通知プログラミングガイド](http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/IPhoneOSClientImp/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW1)を参照してください。

## プッシュとアプリ起動時の追跡

長期的な利用者の関与とプッシュ通知の効果を追跡するために、`PFAnalytics`クラスでフックを提供しています。アプリの起動回数とプッシュに関連した起動確率はアプリのダッシュボードで確認することができます。

まずは、`application:didFinishLaunchingWithOptions:`メソッドに次を追加して、アプリの起動と起動をトリガしたものに関する情報を収集します。余分に確認することによって、iOS 7のさらに高度になったバックグラウンドプッシュ機能でも、理論的にアプリの起動とプッシュによるアプリ起動がそれぞれカウントされるようにします。

```objc
if (application.applicationState != UIApplicationStateBackground) {
    // Track an app open here if we launch with a push, unless
    // "content_available" was used to trigger a background push (introduced
    // in iOS 7). In that case, we skip tracking here to avoid double
    // counting the app-open.
    BOOL preBackgroundPush = ![application respondsToSelector:@selector(backgroundRefreshStatus)];
    BOOL oldPushHandlerOnly = ![self respondsToSelector:@selector(application:didReceiveRemoteNotification:fetchCompletionHandler:)];
    BOOL noPushPayload = ![launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];
    if (preBackgroundPush || oldPushHandlerOnly || noPushPayload) {
        [PFAnalytics trackAppOpenedWithLaunchOptions:launchOptions];
    }
}
```

次に、アプリが実行中またはバックグラウンドで実行中の場合、`application:didReceiveRemoteNotification:`メソッドではプッシュのペイロードを代わりに処理します。アプリがバックグラウンドで実行中に利用者がプッシュ通知に基づき行動した場合、アプリは前面に呼び出されます。アプリが「プッシュ通知から起動した」としてこの移行を追跡するには、追跡コードを呼び出す前にもう1つの確認を実行します。 ```objc - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {   if (application.applicationState == UIApplicationStateInactive) {     // The application was just brought from the background to the foreground,     // so we consider the app as having been "opened by a push notification."     [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];   } }   ```

最後に、iOS 7の新しいプッシュ機能（新しい&quot;コンテンツ利用&quot;プッシュ機能を含む）を使用する場合、iOS 7専用ハンドラも実装するようにします。

```objc
- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
            if (application.applicationState == UIApplicationStateInactive) {
                [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];
            }
}
```

#### OS Xにおける追跡

OS Xアプリでプッシュ通知の受信がサポートされ、プッシュに関連してアプリが起動する回数を追跡する場合、`application:didReceiveRemoteNotification:`メソッド（iOSなど）をフックに追加し、`applicationDidFinishLaunching:`に次を追加します。

```objc
- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {
    // ... other Parse setup logic here
    [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:[aNotification userInfo]];
}
```

#### ローカル通知の追跡（iOSのみ）

ローカル通知に関する分析を追跡するには、`application:didFinishLaunchingWithOptions:`の_ほかに_`application:didReceiveLocalNotification:`が呼び出されます（実装している場合）。重複イベントを追跡しないように気を付けてください。

#### バッジの消去

通常、アプリのバッジを消去する最適な時はアプリ起動時になります。現在のインストールでバッジのプロパティを設定すると、アプリのアイコンバッジ番号が更新され、最新のバッジの値が次に保存するまでサーバーに残ります。その場合、以下のことを実行します。

```objc
- (void)applicationDidBecomeActive:(UIApplication *)application {
    PFInstallation *currentInstallation = [PFInstallation currentInstallation];
    if (currentInstallation.badge != 0) {
        currentInstallation.badge = 0;
        [currentInstallation saveEventually];
    }
    // ... 
}
```

[UIApplicationDelegateドキュメント](http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIApplicationDelegate_Protocol/Reference/Reference.html)にはアプリのライフサイクルへのフックに関する情報が含まれています。バッジのリセットに最も深く関連しているのは、`applicationDidBecomeActive:`、`application:didFinishLaunchingWithOptions:`、`application:didReceiveRemoteNotification:`です。

## トラブルシューティング

デベロッパーにとってプッシュ通知の設定がフラストレーションの種になることがよくあります。そのプロセスは複雑であり、途中で問題が発生することがあります。問題が生じる場合、以下のトラブルシューティングを試してください。 

*   `Info.plist`では正しいバンドルIDを使用していることを確認してください（[iOSプッシュ通知に関するチュートリアル](/tutorials/ios-push-notifications)の「プッシュが有効のiOSアプリケーションの設定」、ステップ4.1で説明されています）。
*   [プロジェクト]&gt;[Build Settings]で正しいプロビジョニングプロファイルを設定します（「iOSプッシュ通知チュートリアル」のステップ4.3で説明されています）。
*   プロジェクトをクリーンにして、Xcodeを再起動します。
*   [証明、識別子、プロファイル](https://developer.apple.com/account/overview.action)へ移動してプロビジョニングプロファイルでアプリIDを変更し、再び戻してプロビジョニングプロファイルを再生成します。チュートリアルのステップ2（プロビジョニングプロファイルの作成)で説明されるようにプロファイルを再インストールし、ステップ4(プッシュが有効のiOSアプリケーションの設定）で説明されるようにプロジェクトのBuild Settingsを設定する必要があります。
*   Xcode Organizerを開いて、期限切れ、または未使用のプロビジョニングファイルをすべてコンピュータとiOSデバイスの両方から削除します。
*   すべてがコンパイルしてエラーなく実行していてもプッシュを受信している場合、アプリに通知の受信許可が与えられていることを確認します。これは、iOSデバイスの`Settings > Notification >        YourAppName`で確認できます。*   アプリでプッシュ通知の受信が許可されている場合、正しいプロビジョニングプロファイルでアプリのコード署名をしていることを確認します。Parseに開発用プッシュ通知証明をアップロードしている場合、開発用プロビジョニングプロファイルでアプリを構築する場合のみプッシュ通知を受信することになります。実稼働プッシュ通知証明をアップロードしている場合、配信用プロビジョニングプロファイルでアプリを署名する必要があります。特別およびアプリストア配信用プロビジョニングプロファイルは、アプリが実稼働プッシュ通知証明で設定される場合に動作する必要があります。
*   Apple iOSプロビジョニングポータルの既存のアプリIDに対するプッシュ通知を有効にする場合、プロビジョニングプロファイルを再生成し、更新済みのプロファイルをXcode Organizerに追加します。
*   アプリをアプリストアに送信する前に、配信用プッシュ通知を有効にする必要があります。アプリを送信する前に「アプリストアへの準備」セクション7に従います。こうしたステップをスキップした場合、アプリストアへ新しいバイナリを提出する必要が生じる場合があります。
*   特別プロファイルで署名する際にアプリで配信用プッシュ通知が受信できることを再確認してください。この設定はアプリストアでプロビジョニングされるアプリに最も近い設定になります。
*   Parseプッシュコンソールで受信者数を確認します。予想される受信者と一致していますか？プッシュのターゲット設定が誤っている場合があります。
