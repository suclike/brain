# 什麼是 Cloud Code？

Parse 的願景是讓開發人員無需透過伺服器，即可建立行動應用程式。面對複雜的應用程式，有時您只需要一小段不在行動裝置上執行的邏輯。Cloud Code 能使這個願景成真。

Cloud Code 係以供數千款應用程式所使用的相同 JavaScript SDK 為架構，因此非常容易使用。唯一的差別，在於 Cloud Code 是在 Parse Cloud 上執行（而非行動裝置）。因此您只要更新 Cloud Code，就能立即在所有行動環境下使用，再也不必苦等版本更新，讓您即時改變應用程式的行為，更快新增全新功能。

就算您只熟悉行動裝置的開發環境，也會發現 Cloud Code 的使用方式非常簡單容易。


## 快速入門

您必須在用來進行開發作業的電腦上安裝 Parse 命令列工具。這套工具可讓您管理 Parse Cloud 中的程式碼。


### 安裝或更新命令列工具 (Mac/Linux)

在 Mac OS 和 Linux/Unix 環境下，請執行以下命令來取得 Parse 工具：

```bash
curl -s https://www.parse.com/downloads/cloud_code/installer.sh | sudo /bin/bash
```

此會將一套名為「parse」的工具安裝至 `/usr/local/bin/parse`。由於沒有其他垃圾檔，因此刪除該檔案即可解除安裝。如果已經安裝命令列，這項命令將會同時更新命令列工具。

### 安裝命令列工具 (Windows)

您可[按此處](/downloads/windows/console/parse.zip)取得 Windows 專用的 Parse 命令列工具。下載 zip 檔案後請解壓縮，雙擊 ParseConsole.exe，即可啟動預先載入 Parse 的 PowerShell 工作階段。初次執行 ParseConsole 後，您也可以按下 Win + R 並輸入「parse」來啟動 PowerShell 工作階段。


### 設定 Cloud Code

下一步是建立目錄，以便儲存要在雲端執行的程式碼。使用命令 `parse new` 設定此目錄，系統會提示您選擇所建立的 Cloud Clode 要用於哪個應用程式：

```bash
$ parse new MyCloudCode
Email: ninja@gmail.com
Password:
1:MyApp
Select an App: 1
$ cd MyCloudCode
```

使用電子郵件地址和密碼登入 Parse 帳號。如果透過 OAuth 註冊且尚未設定密碼，現在請編輯帳號設定並設定一組新密碼。這會在目前的目錄內建立名為 `MyCloudCode` 的目錄，還會自動建立以下幾個檔案：

```bash
-config/
  global.json
-cloud/
  main.js
-public/
  index.html
```

`config` 目錄內含通常不太會用到的 JSON 設定檔，`cloud` 目錄儲存您的 Cloud Code，`public` 目錄儲存您想在 Parse 上管理的靜態內容。`cloud` 目錄儲存 Cloud Code 的所有函數，但通常只需編輯 `main.js`。現在請檢查是否成功建立所有檔案。如果使用原始檔控制，您可簽入所有檔案。


### 簡單函數

依照慣例，我們先來了解如何在雲端上執行最簡單的函數。如果查看 `cloud/main.js`，您會看到範例函數傳回一個字串：

```js
Parse.Cloud.define("hello", function(request, response) {
  response.success("Hello world!");
});
```

若要將程式碼從您的機器部署到 Parse Cloud，請執行：

```bash
$ parse deploy
```

若要在部署後執行此函數，請執行：

```common-java
ParseCloud.callFunctionInBackground("hello", new HashMap<String, Object>(), new FunctionCallback<String>() {
  void done(String result, ParseException e) {
    if (e == null) {
      // result is "Hello world!"
    }
  }
});
```
```common-objc
[PFCloud callFunctionInBackground:@"hello"
                   withParameters:@{}
                            block:^(NSString *result, NSError *error) {
   if (!error) {
     // result is @"Hello world!"
   }
}];
```
```common-swift
// no swift example
```
```common-php
// no php example
```
```common-csharp
var result = await ParseCloud.CallFunctionAsync<IDictionary<string, object>>("hello", new Dictionary<string, object>());
// result is "Hello world!"
```
```common-js
Parse.Cloud.run('hello', {}, {
  success: function(result) {
    // result is 'Hello world!'
  },
  error: function(error) {
  }
});
```

您應該會看見以下回應：

```json
{ "result": "Hello world!" }
```

恭喜！您已經成功部署並執行 Cloud Code。

您可以趁現在多方嘗試整個部署週期。試試將 `"Hello world!"` 換成完全不同的字串，然後再次部署和執行函數，您會得到完全不同的結果。您可以在 Cloud Code 使用完整的 JavaScript SDK 完成許多工作。以下將進一步提供詳細範例。


## Cloud 函數

讓我們透過一個稍微複雜的範例了解 Cloud Code 的實用價值。使用雲端運算的一個好處是，您再也不必為了獲取少量資訊，而將大量物件發送至裝置。舉例來說，如果您正在寫一個應用程式讓大家評論電影，您只需要一個 `Review` 物件，看起來像這樣：

```json
{ 
  "movie": "The Matrix",
  "stars": 5,
  "comment": "Too bad they never made any sequels."
}
```

過去想知道《駭客任務》平均得到幾顆星，您必須在裝置上查詢所有評論，然後算出電影平均得到幾顆星星。您只想要一個數字，卻要耗費很大的頻寬。現在使用 Cloud Code，我們就能略過電影名稱，直接傳回平均星數。

Cloud 函數接受 `request` 物件上的 JSON 參數字典，因此我們可以藉此略過電影名稱。我們可以在雲端環境下使用完整的 Parse JavaScript SDK 功能，因此可以用來查詢 `Review` 物件。用來實作 `averageStars` 的程式碼最後看起來像這樣：

```js
Parse.Cloud.define("averageStars", function(request, response) 
  var query = new Parse.Query("Review");
  query.equalTo("movie", request.params.movie);
  query.find({
    success: function(results) {
      var sum = 0;
      for (var i = 0; i < results.length; ++i) {
        sum += results[i].get("stars");
      }
      response.success(sum / results.length);
    },
    error: function() {
      response.error("movie lookup failed");
    }
  });
});
```

使用 `averageStars` 和 `hello` 的唯一差別，在於當我們呼叫 Cloud 函數時，必須提供要在 `request.params.movie` 中存取的參數。請繼續閱讀，以深入了解如何呼叫 Cloud 函數。

### 呼叫 Cloud 函數

您可以從任何一個用戶端 SDK 及透過 REST API 呼叫 Cloud 函數（使用以下範例中的下拉式清單切換 SDK）。舉例來說，若要使用名為 `movie` 的參數來呼叫名為 `averageStars` 的 Cloud 函數 ：

```common-java
HashMap<String, Object> params = new HashMap<String, Object>();
params.put("movie", "The Matrix");
ParseCloud.callFunctionInBackground("averageStars", params, new FunctionCallback<Float>() {
   void done(Float ratings, ParseException e) {
       if (e == null) {
          // ratings is 4.5
       }
   }
});
```
```common-objc
[PFCloud callFunctionInBackground:@"averageStars"
                   withParameters:@{@"movie": @"The Matrix"}
                            block:^(NSNumber *ratings, NSError *error) {
  if (!error) {
     // ratings is 4.5
  }
}];
```
```common-swift
// no swift example
```
```common-php
// no php example
```
```common-csharp
IDictionary<string, object> params = new Dictionary<string, object>
{
    { "movie", "The Matrix" }
};
var result = await ParseCloud.CallFunctionAsync<IDictionary<string, object>>("averageStars", params);
```
```common-js
Parse.Cloud.run('averageStars', { movie: 'The Matrix' }, {
  success: function(ratings) {
    // ratings should be 4.5
  },
  error: function(error) {
  }
});
```

通常會有兩個引數傳入 Cloud 函數：

1.  `request` - 要求物件內含與該要求相關的資訊。須設定以下欄位：
  1.  `params` - 用戶端傳送至函數的參數物件。
  2.  `user` - 提出要求的 `Parse.User`。如果沒有使用者登入，便無須設定。

如果函數執行成功，用戶端的回應看起來像這樣：

```json
{ "result": 4.8 }
```

如果出現錯誤，用戶端的回應看起來像這樣：

```json
{ 
  "code": 141,
  "error": "movie lookup failed"
}
```

### 儲存中執行程式碼

在雲端執行程式碼的另一個理由，是可以強制規範特定的資料格式。舉例來說，您可能同時擁有 Android 和 iOS 版應用程式，並想要驗證兩個版本的資料，使用 Cloud Code 只要編寫一個程式碼，再也無須為不同用戶端環境各別編寫專用程式碼。

讓我們來看看電影評論的範例。當您使用星星為電影評分時，通常只會選擇 1 顆、2 顆、3 顆、4 顆或 5 顆星，您無法給負 6 顆星或 1337 顆星。如果想要避免出現超出範圍的評分，可以使用 `beforeSave` 方法：

```js
Parse.Cloud.beforeSave("Review", function(request, response) {
  if (request.object.get("stars") < 1) {
    response.error("you cannot give less than one star");
  } else if (request.object.get("stars") > 5) {
    response.error("you cannot give more than five stars");
  } else {
    response.success();
  }
});
```

如果呼叫 `response.error`，`Review` 物件將不會儲存，且用戶端會收到錯誤。如果呼叫 `response.success`，將正常儲存物件。您的程式碼會從這兩個回呼中，呼叫其中一個。

Cloud Code 還有一個實用技巧，那就是同一個版本的 Cloud Code 可用於不同版本的行動應用程式。因此如果您啟動的應用程式並未正確檢查輸入資料的有效性，您可以使用 `beforeSave` 新增驗證來修正這個問題。

如果您想將 `beforeSave` 用於 Parse JavaScript SDK 中的預先定義類別（例如 [Parse.User](/docs/js/api/symbols/Parse.User.html)），第一個引數請勿傳遞字串，您應該傳遞類別本身：

```js
Parse.Cloud.beforeSave(Parse.User, function(request, response) {
  if (!request.object.get("email")) {
    response.error("email is required for signup");
  } else {
    response.success();
  }
});
```


### 儲存中修改物件

在某些情況下，您不想丟棄無效資料，只想微調一下再儲存。`beforeSave` 也可用來處理這類情況。只要在變更的物件上呼叫 `response.success` 即可。

在電影評論的範例中，我們可能希望確保評論內容不會太長，一則長篇評論可能不容易顯示。這時就能使用 `beforeSave`，將 `comment` 欄位截短至 140 個字元以內：

```js
Parse.Cloud.beforeSave("Review", function(request, response) {
  var comment = request.object.get("comment");
  if (comment.length > 140) {
    // Truncate and add a ...
    request.object.set("comment", comment.substring(0, 137) + "...");
  }
  response.success();
});
```


### 儲存後執行動作

在某些情況下，您可能想在儲存物件後執行某些動作，像是推播。您可以使用 `afterSave` 方法登錄處理常式來達到目的。舉例來說，假如您想追蹤某篇部落格貼文的留言數量，您可以編寫一個函數如下：

```js
Parse.Cloud.afterSave("Comment", function(request) {
  query = new Parse.Query("Post");
  query.get(request.object.get("post").id, {
    success: function(post) {
      post.increment("comments");
      post.save();
    },
    error: function(error) {
      console.error("Got an error " + error.code + " : " + error.message);
    }
  });
});
```

在處理常式終止後，用戶端會收到成功儲存要求的回應（無論是以何種方式終止處理常式）。舉例來說，即便處理常式擲出例外狀況，用戶端仍會收到成功回應。執行處理常式時發生的錯誤，都會記錄在 Cloud Code 記錄檔內。

如果您想將 `afterSave` 用於 Parse JavaScript SDK 中的預先定義類別（例如 [Parse.User](/docs/js/api/symbols/Parse.User.html)），第一個引數請勿傳遞字串，而應傳遞類別本身。


### 刪除中執行代碼

刪除物件前，您可以執行自訂 Cloud Code。您可以利用 `beforeDelete` 方法執行此操作。舉例來說，這能用來實作比透過 [ACL](/docs/js/api/symbols/Parse.ACL.html) 建立的刪除原則更為嚴格複雜的刪除原則。舉例來說，假如您有一個相簿應用程式，其中許多相片與每本相簿建立關聯，而您想防止使用者刪除裡面還有相片的相簿，您可以編寫一個函數如下：

```js
Parse.Cloud.beforeDelete("Album", function(request, response) {
  query = new Parse.Query("Photo");
  query.equalTo("album", request.object.id);
  query.count({
    success: function(count) {
      if (count > 0) {
        response.error("Can't delete album if it still has photos.");
      } else {
        response.success();
      }
    },
    error: function(error) {
      response.error("Error " + error.code + " : " + error.message + " when getting photo count.");
    }
  });
});
```

如果呼叫 `response.error`，`Album` 物件將不會刪除，且用戶端會收到錯誤。如果呼叫 `response.success`，將正常刪除物件。您的程式碼會從這兩個回呼中，呼叫其中一個。

如果您想將 `beforeDelete` 用於 Parse JavaScript SDK 中的預先定義類別（例如 [Parse.User](/docs/js/api/symbols/Parse.User.html)），第一個引數請勿傳遞字串，而應傳遞類別本身。


### 刪除後執行動作

在某些情況下，您可能想在刪除物件後執行某些動作，像是推播。您可以使用 `afterDelete` 方法登錄處理常式來達到目的。舉例來說，假如在刪除一篇部落格貼文後，您還想刪除所有相關留言，您可以編寫一個函數如下：

```js
Parse.Cloud.afterDelete("Post", function(request) {
  query = new Parse.Query("Comment");
  query.equalTo("post", request.object.id);
  query.find({
    success: function(comments) {
      Parse.Object.destroyAll(comments, {
        success: function() {},
        error: function(error) {
          console.error("Error deleting related comments " + error.code + ": " + error.message);
        }
      });
    },
    error: function(error) {
      console.error("Error finding related comments " + error.code + ": " + error.message);
    }
  });
});
```

處理常式 `afterDelete` 可以透過 `request.object` 存取刪除的物件，但在完全擷取此物件後，即無法重新擷取或重新儲存。

在處理常式終止後，用戶端會收到成功刪除要求的回應（無論是以何種方式終止處理常式）。舉例來說，即便處理常式擲出例外狀況，用戶端仍會收到成功回應。執行處理常式時發生的錯誤，都會記錄在 Cloud Code 記錄檔內。

如果您想將 `afterDelete` 用於 Parse JavaScript SDK 中的預先定義類別（例如 [Parse.User](/docs/js/api/symbols/Parse.User.html)），第一個引數請勿傳遞字串，而應傳遞類別本身。


### 資源限制

#### 逾時

Cloud 函數會在開始執行 15 秒的時鐘時間後刪除，`beforeSave`、`afterSave`、`beforeDelete` 以及 `afterDelete` 則在執行 3 秒後刪除。如果呼叫 Cloud 函數或 `beforeSave`/`afterSave`/`beforeDelete`/`afterDelete` 函數後，又從另一個 Cloud Code 再次呼叫，將會進一步受限於呼叫函數所剩的時間。舉例來說，如果 `beforeSave` 函數執行 13 秒後又被某個 Cloud 函數觸發，那麼 `beforeSave` 函數將只有 2 秒的執行時間，而非原本的 3 秒。如果您需要額外的時間執行 Cloud Code 的作業，請考慮使用 [Background Job](#jobs)。

#### 網路要求

呼叫 `success` 或 `error` 會取消進行中的網路要求。一般而言，您應該等到完成所有網路要求後，再呼叫 `success`。至於不會呼叫 `success`/`error` 的 `afterSave` 函數及 `afterDelete` 函數，Cloud Code 會等待完成所有網路要求。


## Background Job

Parse 可讓您設定在背景執行的工作。長時間執行的工作，例如整合外部網站但回應時間很慢、或是批次傳送推播通知時，都很適合使用 Background Job。如果執行 Cloud 函數時經常發生逾時錯誤，請考慮使用 Background Job。

使用 Background Job 時，請留意以下限制：

*   執行 15 分鐘後會終止工作。
*   應用程式每秒內可以同時對同一個工作呼叫 20 次。
*   在達到並行上限後開始的工作將會立即終止。


### 編寫 Background Job

編寫 Background Job 的方式與編寫 Cloud 函數類似。假設您想在新增 `plan` 欄位至 `Parse.User` 物件後執行使用者移轉工作，您的程式碼看起來會像這樣：

```js
Parse.Cloud.job("userMigration", function(request, status) 
  // Set up to modify user data
  Parse.Cloud.useMasterKey();
  var counter = 0;
  // Query for all users
  var query = new Parse.Query(Parse.User);
  query.each(function(user) {
    // Update to plan value passed in
    user.set("plan", request.params.plan);
    if (counter % 100 === 0) {
      // Set the  job's progress status
      status.message(counter + " users processed.");
    }
    counter += 1;
    return user.save();
  }).then(function() {
    // Set the job's success status
    status.success("Migration completed successfully.");
  }, function(error) {
    // Set the job's error status
    status.error("Uh oh, something went wrong.");
  });
});
```

如同其他 Cloud 函數，您也要處理成功和錯誤條件。針對 Background Job，您可以在完成函數時呼叫 `status.success()` 或 `status.error()`，工作執行狀態就會設為完成。如果不呼叫任何方法，工作將在 15 分鐘後逾時。您也能選擇在執行工作時設定進度訊息，做法是呼叫 `status.message()`。如果在 `status.success()` 後才呼叫 `status.message()`，系統會忽略進度訊息。

您可以在部署程式碼後測試工作，做法是使用主要索引鍵執行以下命令：

```bash
curl -X POST \
  -H "X-Parse-Application-Id: $PARSE_APPLICATION_ID" \
  -H "X-Parse-Master-Key: $PARSE_MASTER_KEY" \
  -H "Content-Type: application/json" \
  -d '{"plan":"paid"}' \
  https://api.parse.com/1/jobs/userMigration
```

### 設定排程

部署 Background Job 程式碼後，可以在「Cloud Code」標籤下的「主控板」中安排排程。您可以在「已排程工作」窗格查看目前安排的工作，也能建立新排程。若要新增工作排程項目，請選擇一項目前部署的工作，然後指定描述、必要參數、開始時間以及頻率。建立工作排程後，點擊「立即執行」即可執行工作。您也可以刪除工作排程項目。您可以在「工作狀態」窗格查看工作執行結果，包括工作開始時間、最新的狀態訊息以及工作完成與否。


## 自訂 WebHook

您可以使用 Cloud Code 內的 [Express](http://expressjs.com/) 自訂 WebHook 來接收各種格式的資料。這個做法非常適合用來編寫由另一個 Web 服務呼叫的 WebHook。如果您想接收非 JSON 資料，或是呼叫端點的 Web 服務不支援傳送 Parse 的 REST API 標頭，則應使用自訂 WebHook，而非 [Cloud 函數](#functions)。如此一來，您的邏輯仍在 Cloud Code 內執行，就能在自訂 WebHook 時完整存取 Parse JavaScript SDK。

自訂的 WebHook 可直接存取要求標頭和本文。您可以接收 JSON 資料、表單編碼資料或原始位元組資料，然後使用最愛的剖析器加以剖析。您可以使用 HTTP 基本驗證來保護 WebHook。以下示範將訊息儲存至 Parse Cloud 的 WebHook。

```js
var express = require('express');
var app = express();

// Global app configuration section
app.use(express.bodyParser());
// Populate req.body
app.post('/notify_message',
  express.basicAuth('YOUR_USERNAME', 'YOUR_PASSWORD'),
  function(req, res) {
    // Use Parse JavaScript SDK to create a new message and save it.
    var Message = Parse.Object.extend("Message");
    var message = new Message();
    message.save({ text: req.body.text }).then(function(message) {
      res.send('Success');
    }, function(error) {
      res.status(500);
      res.send('Error');
    });
  });
app.listen();
```

上述程式碼使用 `express.bodyParser` 中介軟體來讀取要求本文及填入 `req.body.text`。請注意，我們不在全域應用程式組態部分寫入 `app.use(express.basicAuth(â€¦))`，是因為我們希望只有這個端點（而非全域所有端點）使用 HTTP 基本驗證。如此一來，就還能公開存取應用程式內的其他端點。

若要測試自訂端點，可執行以下命令來傳送內含表單編碼本文的要求。

```bash
$ curl -X POST \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d 'text=hi' http://YOUR_USERNAME:YOUR_PASSWORD@example.parseapp.com
```

若要存取要求本文的原始位元組，程式碼內應使用 `parseExpressRawBody` 中介軟體（而非 `express.bodyParser`）。如果部分要求處理常式需要 JSON 或 www 表單編碼剖析，而其他要求處理常式需要要求本文位元組，可同時包含兩種中介軟體元件。

```js
var express = require('express');
var parseExpressRawBody = require('parse-express-raw-body');
var app = express();

// Global app configuration section
app.use(express.bodyParser());
app.use(parseExpressRawBody());

app.post('/receive_raw_data',
  express.basicAuth('YOUR_USERNAME', 'YOUR_PASSWORD'),
  function(req, res) {
    // If you send this endpoint JSON or www-form-encoded data, then
    // express.bodyParser will fill req.body with the corresponding data.
    // Otherwise, parseExpressRawBody will fill req.body with a Buffer
    // object containing the request body.  You can also convert this
    // Buffer to a string using req.body.toString().
  });
app.listen();
```


## 開發與生產

您可以使用開發應用程式試用新程式碼，使用生產應用程式執行公開發表的應用程式。


### 新增新應用程式至專案

您需要將多個應用程式連結至專案。`parse new` 會將第一個應用程式連結至專案，您可透過執行 `parse add [alias]` 來新增其他應用程式，範例如下：

```bash
$ parse add production
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounterProd
2:PiecesOfEightCounterDev
Select an App: 1
```

上述範例將 `PiecesOfEightCounterProd` 應用程式連結至 Cloud Code 專案。這也會為名為 `production` 的新應用程式建立別名，提供參照該應用程式的速記方式。


### 開發 Cloud Code

開發新程式碼時，可以使用 `develop` 命令讓 Parse 命令列工具持續檢查專案的更新狀態，並將變更上傳至 Cloud Code。命令看起來像這樣： 

```bash
$ parse develop development
E2013-03-19:20:17:01.423Z] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
New release is named v58 I2013-03-19T20:17:10.343Z]
Deployed v58 with triggers:
  GameScore:
    before_save
```

請注意，使用 `develop` 命令時，您必須明確指定要將新變更推播至哪個應用程式，以免不小心在生產應用程式執行 `develop`，進而部署尚未測試的程式碼。命令列工具會上傳程式碼變更以及顯示新的記錄訊息，直到您按下 Ctrl-C。


### 將程式碼部署至生產

測試完成並更新程式碼後，您可以將生產應用程式傳給 `deploy` 命令來將程式碼部署至生產，範例如下：

```bash
$ parse deploy production
New release is named v2
```


## 從 Cloud Code 記錄

若您想要將訊息記錄到透過 `parse log` 顯示的記錄檔，您可以使用 `console.log`、`console.error` 或 `console.warn`。`console.error` 和 `console.warn` 都會寫入錯誤記錄。

```js
Parse.Cloud.define("Logger", function(request, response) {
  console.log(request.params);
  response.success();
});
```

在每次的要求中，Cloud 函數最多可記錄 100 則訊息。


## 網路

Cloud Code 允許使用 `Parse.Cloud.httpRequest` 將 HTTP 要求傳送至任何 HTTP 伺服器。此函數使用選項物件來設定呼叫。並行的 `httpRequest` 數量上限為 2 個，其他要求會排入佇列。

簡單的 GET 要求看起來像這樣：

```js
Parse.Cloud.httpRequest({
  url: 'http://www.parse.com/',
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

成功的 http 狀態程式碼會呼叫 `success`；否則會呼叫 `error`。


### 查詢參數

您可以指定要附加在網址結尾的查詢參數，做法是在選項物件設定 `params`。您可以傳遞鍵值組的 JSON 物件，範例如下：

```js
Parse.Cloud.httpRequest({
  url: 'http://www.google.com/search',
  params: {
    q : 'Sean Plott'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

或如下的原始 `String`：

```js
Parse.Cloud.httpRequest({
  url: 'http://www.google.com/search',
  params: 'q=Sean Plott',
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```


### 設定標頭

您可以設定選項物件的 `header` 屬性來傳送 HTTP 標頭。假設您想設定要求的內容類型，您可以：

```js
Parse.Cloud.httpRequest({
  url: 'http://www.example.com/',
  headers: {
    'Content-Type': 'application/json;charset=utf-8'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```


### 傳送 POST 要求

您可以設定選項物件的 `method` 屬性來傳送 POST 要求。您可以使用 `body` 設定 POST 的本文。簡單範例如下：

```js
Parse.Cloud.httpRequest({
  method: 'POST',
  url: 'http://www.example.com/create_post',
  body: {
    title: 'Vote for Pedro',
    body: 'If you vote for Pedro, your wildest dreams will come true'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

這會將 POST 傳送至 `http://www.example.com/create_post`，其本文為網址格式編碼的 `body` 屬性。若需要 JSON 編碼的本文，您可以：

```js
Parse.Cloud.httpRequest({
  method: 'POST',
  url: 'http://www.example.com/create_post',
  headers: {
    'Content-Type': 'application/json;charset=utf-8'
  },
  body: {
    title: 'Vote for Pedro',
    body: 'If you vote for Pedro, your wildest dreams will come true'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

為了確保正確編碼 HTTP 要求本文，內容類型標頭請務必包含字元集。


### 回應物件

傳遞至 `success` 和 `error` 的回應物件內含：

1.  `status` - HTTP 回應狀態。
<li>`headers` - 回應標頭。
2.  `text` - 原始回應本文。
3.  `data` - 剖析的回應（如果 Cloud Code 知道如何剖析傳送的內容類型）。


## 模組

Cloud Code 支援將 JavaScript 程式碼細分成不同模組。為了避免載入模組時發生不需要的副作用，Cloud Code 模組的運作方式與 CommonJS 模組類似。載入模組時也會載入 JavaScript 檔，並傳回執行的原始碼及全域 `exports` 物件。舉例來說，如果 `cloud/name.js` 具有以下原始碼：

```js
var coolNames = ['Ralph', 'Skippy', 'Chip', 'Ned', 'Scooter'];
exports.isACoolName = function(name) {
  return coolNames.indexOf(name) !== -1;
}
```

 `cloud/main.js` 內含：

```js
var name = require('cloud/name.js');
name.isACoolName('Fred');
// returns false
name.isACoolName('Skippy');
// returns true;
name.coolNames;
// undefined.
```

 `name` 內含名為 `isACoolName` 的函數。`require` 必須使用相對於 Parse 專案的根目錄相呼應。您只能載入 `cloud/` 目錄內的模組。

### Cloud Module

如果您想整合 Parse 應用程式與第三方服務和資料庫，使用 Cloud Module 是最簡單的作法。Cloud Module 的運作方式與 JavaScript 模組類似，但更適合每個人使用。如需詳細資料，請瀏覽我們的 [Cloud Module 指南](/docs/cloud_modules_guide)。


## 命令列工具

我們已經看過如何使用 Parse 的命令列工具將新程式碼部署至雲端，不過這項工具還有其他實用功能。如需安裝說明，請參閱[安裝工具](#started-installing)。


### 簡介

您可以將同一個程式碼部署至數個不同的應用程式，這個做法很實用，因為如此一來您就能分別擁有「開發版」和「產品版」應用程式，然後在發表至產品版之前，先在開發版應用程式上測試程式碼。

以 `new` 命令新增的第一個應用程式會成為預設應用程式，供所有命令列作業使用。除了 `new` 以外，其他命令都會使用要執行命令的應用程式作為選擇性應用程式。


### 部署

若要部署新版本，請從命令列執行 `parse deploy`：
```bash
$ parse deploy
New release is named v1
```
這會將 `cloud/main.js` 內的新程式碼推播至 Parse Cloud，並部署至預設目標，亦即第一個新增的應用程式，或使用 `parse default` 設定的應用程式。若要將程式碼推播至另一個目標，做法是將目標新增為 `deploy` 的引數，範例如下：
```bash
$ parse deploy "My Other App"
New release is named v2
```
您可以使用 `-d` 或 `--description=` 選項，將版本說明新增至部署。

在其他指令碼內嵌 `parse deploy` 時（例如在自動測試／部署環境下），可藉由 Parse 命令列工具的結束程式碼得知命令是否成功。結束程式碼為 0 表示部署成功，結束程式碼不是零表示部署失敗。


### 開發 Cloud Code

您也能使用 `develop` 命令，在開發模式下執行 Parse 命令列工具。此時工具會監看來源目錄有無更新並部署至 Parse，同時提供記錄檔的即時資料流。

```bash
$ parse develop development
E2013-03-19:20:17:01.423Z] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
New release is named v58 I2013-03-19T20:17:10.343Z]
Deployed v58 with triggers:
  GameScore:
    before_save
```

與其他命令不同的是，您必須為 `develop` 指定 Parse 應用程式以便推播更新。這是為了避免不小心在產品版應用程式上執行開發版，導致在產品版應用程式上執行尚未測試的程式碼。


### 新增新的目標

您可以執行 `add` 命令，將新的 Parse 應用程式新增為目標。系統會提示輸入您的 Parse.com 電子郵件與密碼，然後列出應用程式供您選擇：

```bash
$ parse add
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounter
2:BootyDivider
Select an App: 1
```

`add` 命令使用選擇性引數（該引數為指派給應用程式使用的別名，不使用應用程式名稱）。

這些設定資料通常全都儲存在 `global.json`，不過如果您不想與團隊其他人分享某個開發應用程式，可以使用 `--local` 旗標，將設定改為新增至另一個 `local.json` 檔。如此一來，您就能將 `global.json` 簽入原始檔控制，同時只在自己的機器上保留 `local.json`。


### 設定預設應用程式

`parse deploy`、`parse log`、`parse rollback` 以及 `parse releases` 使用針對命令執行的預設應用程式。您可以使用 `parse default` 變更此預設應用程式。

```bash
$ parse default MyApp
Default app set to MyApp.
$ parse default
Current default app is MyApp
```


### 復原

您可以使用 `parse rollback` 復原版本。就像 `parse deploy` 一樣，您可以指定選擇性目標引數。

```bash
$ parse rollback
Rolled back to v1
```

此動作可復原為先前版本的程式碼。您也可以使用 `-r` 或 `--release=` 選項，指定要復原的版本名稱。


### 讀取記錄檔

Cloud Code 的每次部署、復原及啟用都會加以記錄。您可以使用 `parse log` 命令擷取記錄檔的結尾。記錄檔分成兩種類型：

*   `INFO` - 內含所有記錄。
*   `ERROR` - 僅含錯誤記錄。

記錄命令使用一個選擇性目標和兩個選項：

*   `-n` - 顯示的記錄行數（預設為 10 行）
*   `--level/-l` - 使用的記錄層級（預設為 INFO）
*   `-f` - 模擬結尾 -f

```bash
$ parse log -n 1
I2012-07-10:13:37:00] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
```


### 列出版本

您可以使用 `releases` 命令，在 Parse Cloud 列出各種已知版本。Parse 只會追蹤最近 10 個版本。


### 設定 SDK 版本

Cloud Code 目錄使用執行 `new` 命令時最新的 Parse JavaScript SDK 版本作為預設版本。您可以使用 `parse jssdk` 變更預設版本，使用 `parse jssdk -a` 查看所有可用的 Parse JavaScript SDK，也能使用 `parse jssdk` 檢查目前使用哪一個 Parse JavaScript SDK 版本。

```bash
$ parse jssdk
Current JavaScript SDK version is 1.2.13
$ parse jssdk -a
  1.2.18
  1.2.17
  1.2.16
  1.2.15
  1.2.14
* 1.2.13
  1.2.12
  1.2.11
$ parse jssdk 1.2.18
Current JavaScript SDK version is 1.2.18
$ parse jssdk -a
* 1.2.18
  1.2.17
  1.2.16
  1.2.15
  1.2.14
  1.2.13
  1.2.12
  1.2.11
```

### 更新命令列工具


您可以使用 `parse update` 更新命令列工具。Parse 命令列工具會自動更新為最新版本。

```bash
$ parse update
Fetching latest version ...
######################################################################## 100%
Installing ...
```
