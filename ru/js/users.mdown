# Пользователи

В основе многих приложений лежит принцип аккаунтов пользователей, которые позволяют пользователям получить безопасный доступ к своей информации. Мы предоставляем специальный класс пользователей под названием `Parse.User`, который автоматически обрабатывает большинство функций, необходимых для управления аккаунтами пользователей.

При помощи этого класса можно будет добавлять функции аккаунтов пользователей в приложение.

`Parse.User` &mdash; это подкласс объекта `Parse.Object`, который имеет такие же функции, например гибкую схему, автоматическое сохранение и интерфейс значений ключа. Все методы для объекта `Parse.Object` также существуют для подкласса `Parse.User`. Разница заключается в том, что PFUser имеет специальные дополнения, предназначенные именно для аккаунтов пользователей.

## Свойства

Класс `Parse.User` имеет свойства, которые отличают его от класса `Parse.Object`:

*   username: имя пользователя для пользователя (обязательно).
*   password: пароль для пользователя (обязательно при регистрации).
*   email: адрес электронной почты для пользователя (не обязательно).

Каждое из этих свойств будет подробно рассмотрено при ознакомлении с различными вариантами использования для пользователей.

## Регистрация

В первую очередь ваше приложение, скорее всего, попросит пользователя зарегистрироваться. Приведенный ниже код демонстрирует типичный процесс регистрации:

```js
var user = new Parse.User();
user.set("username", "my name");
user.set("password", "my pass");
user.set("email", "email@example.com");

// other fields can be set just like with Parse.Object
user.set("phone", "415-392-0202");
user.signUp(null, {
  success: function(user) {
    // Hooray! Let them use the app now.
  },
  error: function(user, error) {
    // Show the error message somewhere and let the user try again.
    alert("Error: " + error.code + " " + error.message);
  }
});
```

Этот вызов асинхронно создаст нового пользователя в вашем приложении Parse. Перед этим будет осуществлена проверка уникальности имени пользователя и адреса электронной почты. Кроме того, осуществляется безопасное хеширование пароля в облаке. Пароли никогда не хранятся, а также не передаются обратно клиентам в виде незашифрованного текста.

Обратите внимание: использовался метод `signUp`, а не `save`. Новые пользователи `Parse.User` всегда должны создаваться при помощи метода `signUp`. Последующие обновления пользователя могут выполняться путем вызова метода `save`.

Если регистрация не проходит успешно, следует ознакомиться с объектом ошибки, который возвращается. Самая частая ошибка заключается в том, что имя пользователя или адрес электронной почты уже заняты другим пользователем. Необходимо четко объяснить это пользователям и попросить их использовать другое имя пользователя.

В качестве имени пользователя можно использовать адрес электронной почты. Просто попросите пользователей ввести адрес электронной почты, но внесите его в свойства имени пользователя. Подкласс `Parse.User` будет работать как обычно. Эта процедура будет описана в разделе о сбросе пароля.

## Вход

После регистрации пользователи должны войти в свой аккаунт. Для этого можно использовать метод класса `logIn`.

```js
Parse.User.logIn("myname", "mypass", {
  success: function(user) {
    // Do stuff after successful login.
  },
  error: function(user, error) {
    // The login failed. Check error to see why.
  }
});
```

## Подтверждение электронной почты

Включение подтверждения электронной почты в параметрах приложения позволяет приложению выделить часть функций для пользователей с подтвержденным адресом электронной почты. Подтверждение электронной почты добавляет ключ `emailVerified` к объекту `Parse.User`. Когда ключ `Parse.User` объекта `email` настроен или изменен, для переменной `emailVerified` устанавливается значение `false`. После этого Parse отправит пользователю ссылку, которая установит для переменной `emailVerified` значение `true`.

Существует три состояния переменной `emailVerified`:

1.  `true`: пользователь подтвердил свой электронный адрес, перейдя по ссылке, присланной по электронной почте от Parse. Объекты `Parse.Users` не могут иметь значение `true` при первоначальном создании аккаунта пользователя.
2.  `false`: при последнем обновлении объекта `Parse.User` пользователь не подтвердил свой адрес электронной почты. Если переменная `emailVerified` имеет значение `false`, вызовите метод `fetch` для объекта `Parse.User`.
3.  _Отсутствует_: объект `Parse.User` был создан, когда подтверждение электронной почты было отключено, или у объекта `Parse.User` нет поля `email`.

## Текущий пользователь

Если пользователю нужно авторизовываться при каждом запуске приложения, это может раздражать. Можно избежать этого при помощи кэшированного объекта `Parse.User`.

Каждый раз при использовании любого метода регистрации и входа пользователь кэшируется на localStorage. Этот кэш может считаться сеансом, поэтому автоматически считается, что для пользователя осуществлен вход:

```js
var currentUser = Parse.User.current();
if (currentUser) {
  // do stuff with the user
} else {
  // show the signup or login page
}
```

Можно очистить кэш текущего пользователя, осуществив для него выход из системы:

```js
Parse.User.logOut();
var currentUser = Parse.User.current(); // this will now be null
```

## Настройка текущего пользователя

Если вы создали собственную программу аутентификации или другим способом осуществили вход пользователя со стороны сервера, то теперь можно передать сеансовый идентификатор клиенту и использовать метод `become`. Этот метод подтвердит сеансовый идентификатор перед настройкой текущего пользователя.

```js
Parse.User.become("session-token-here").then(function (user) 
  // The current user is now set to user.
}, function (error) {
  // The token could not be validated.
});
```

## Безопасность объектов «пользователь»

Класс `Parse.User` защищен по умолчанию. Данные, хранящиеся в классе `Parse.User`, могут изменяться только этим пользователем. По умолчанию данные по-прежнему может прочитать любой клиент. Поэтому некоторые объекты `Parse.User` могут быть опознаны и изменены, в то время как другие будут доступны только для чтения.

В частности, будет невозможно вызвать любой из методов `save` или `delete`, если объект `Parse.User` не был получен при помощи метода аутентификации, например `logIn` или `signUp`. Таким образом, только пользователи могут изменять собственные данные.

Представленный ниже код демонстрирует эту политику безопасности:

```js
var user = Parse.User.logIn("my_username", "my_password", {
  success: function(user) {
    user.set("username", "my_new_username");  // attempt to change username
    user.save(null, {
      success: function(user) {
        // This succeeds, since the user was authenticated on the device
        // Get the user from a non-authenticated method
        var query = new Parse.Query(Parse.User);
        query.get(user.objectId, {
          success: function(userAgain) {
            userAgain.set("username", "another_username");
            userAgain.save(null, {
              error: function(userAgain, error) {
                // This will error, since the Parse.User is not authenticated
              }
            });
          }
        });
      }
    });
  }
});
```

`Parse.User`, полученный через метод `Parse.User.current()`, будет всегда проверяться на подлинность

Если необходимо проверить, проверяется ли на подлинность объект `Parse.User`, можно вызвать метод `authenticated`. Вам не потребуется проверять метод `authenticated` для объектов `Parse.User`, полученных через метод аутентификации.

## Безопасность других объектов

Модель безопасности, применимая к объекту `Parse.User`, может применяться и к другим объектам. Для любого объекта можно указать, какие пользователи могут читать объект, а какие могут изменять его. Для поддержки такого типа безопасности каждый объект имеет [список управления доступом](http://en.wikipedia.org/wiki/Access_control_list), реализованный при помощи класса `Parse.ACL`.

Самый простой способ использования класса `Parse.ACL` заключается в указании, что объект может быть только прочитан и записан одним пользователем. Чтобы создать такой объект, сперва необходимо осуществить вход при помощи пользователя `Parse.User`. Затем конструктор `new Parse.ACL(user)` генерирует класс `Parse.ACL`, который ограничивает доступ для этого пользователя. ACL объекта обновляется при сохранении объекта, как и любое другое свойство. Таким образом, чтобы создать конфиденциальное примечание, доступ к которому будет только у текущего пользователя, необходимо выполнить следующее:

```js
var Note = Parse.Object.extend("Note");
var privateNote = new Note();
privateNote.set("content", "This note is private!");
privateNote.setACL(new Parse.ACL(Parse.User.current()));
privateNote.save();
```

После этого данное примечание будет доступно только текущему пользователю, несмотря на то, что оно будет доступно с любого устройства, на котором этот пользователь осуществил вход. Эта функция полезна для приложений, в которых необходимо предоставить доступ к пользовательским данным на разных устройствах, например для личного списка дел.

Разрешения можно также предоставлять для каждого пользователя в отдельности. Вы можете добавлять отдельные разрешения к классу `Parse.ACL` при помощи методов `setReadAccess` и `setWriteAccess`. Например, у вас есть сообщение, которое будет отправлено группе разных пользователей, при этом каждый из них будет иметь права на чтение и удаление этого сообщения:

```js
var Message = Parse.Object.extend("Message");
var groupMessage = new Message();
var groupACL = new Parse.ACL();

// userList is an array with the users we are sending this message to.
for (var i = 0; i < userList.length; i++) {
  groupACL.setReadAccess(userList[i], true);
  groupACL.setWriteAccess(userList[i], true);
}

groupMessage.setACL(groupACL);
groupMessage.save();
```

Можно также предоставлять разрешения всем пользователям одновременно при помощи методов `setPublicReadAccess` и `setPublicWriteAccess`. Таким образом разрешается использование таких структур, как публикация комментариев на форуме. Например, чтобы создать публикацию, которую сможет редактировать только ее автор, но мог бы читать любой пользователь:

```js
var publicPost = new Post();
var postACL = new Parse.ACL(Parse.User.current());
postACL.setPublicReadAccess(true);
publicPost.setACL(postACL);
publicPost.save();
```

Запрещенные действия, например, удаление объекта, к которому отсутствует доступ с правами записи, приведут к коду ошибки `Parse.Error.OBJECT_NOT_FOUND`. Из соображений безопасности таким образом предотвращается возможность клиентов определять, какие идентификаторы объектов существуют и защищены, а какие идентификаторы не существуют вообще.

## Сброс паролей

Общеизвестно, что как только в системе появляются пароли, пользователи склонны их забывать. В таких случаях наша библиотека обеспечивает безопасные способы сброса паролей.

Чтобы запустить процедуру сброса пароля, запросите у пользователя адрес электронной почты, а затем выполните вызов:

```js
Parse.User.requestPasswordReset("email@example.com", {
  success: function() {
    // Password reset request was sent successfully
  },
  error: function(error) {
    // Show the error message somewhere
    alert("Error: " + error.code + " " + error.message);
  }
});
```

Система попытается найти совпадение для указанной электронной почты с электронной почтой пользователя или полем имени пользователя, а затем отправит пользователю электронное письмо для сброса пароля. Благодаря этому можно разрешить пользователям использовать свою электронную почту в качестве имени пользователя. Вы также можете собирать данные об электронной почте отдельно и хранить ее в поле электронной почты.

Процедура сброса пароля выполняется следующим образом:

1.  Пользователь запрашивает сброс пароля и вводит свой адрес электронной почты.
2.  Parse отправляет на указанный адрес электронное письмо со специальной ссылкой для сброса пароля.
3.  Пользователь нажимает ссылку для сброса и переадресуется на специальную страницу Parse, где можно ввести новый пароль.
4.  Пользователь вводит новый пароль. Пароль сбрасывается на новый пароль, указанный пользователем.

Обратите внимание, что в этой процедуре рассылка будет ссылаться на ваше приложение по тому названию, которое было указано при создании этого приложения в Parse.

## Запросы

Для создания запроса для пользователей можно просто создать новый запрос `Parse.Query` для `Parse.User`:

```js
var query = new Parse.Query(Parse.User);
query.equalTo(gender, "female");
// find all the women
query.find({
  success: function(women) {
    // Do stuff
  }
});
```

## Ассоциации

Ассоциации с объектом `Parse.User` работают в рамках стандартного решения. Например, вы создаете приложение для блогов. Чтобы сохранить новую публикацию для пользователя и извлечь все его публикации:

```js
var user = Parse.User.current();
// Make a new post
var Post = Parse.Object.extend("Post");
var post = new Post();
post.set("title", "My New Post");
post.set("body", "This is some great content.");
post.set("user", user);
post.save(null, {
  success: function(post) {
    // Find all posts by the current user
    var query = new Parse.Query(Post);
    query.equalTo("user", user);
    query.find({
      success: function(usersPosts) {
        // userPosts contains all of the posts by the current user.
      }
    });
  }
});
```

## Пользователи Facebook

Parse предоставляет простую интеграцию Facebook с вашим приложением. Класс `Parse.FacebookUtils` интегрируется с `Parse.User` и с Facebook Javascript SDK для простой связи пользователей с их учетными записями в Facebook.

Благодаря интеграции с Facebook можно связать аутентифицированного пользователя Facebook с пользователем `Parse.User`. С помощью нескольких строк кода можно предоставить для приложения возможность входа с Facebook и сохранять данные пользователей в Parse.

### Установка

Чтобы начать использовать Facebook с Parse, необходимо выполнить следующие действия:

1.  [Установите приложение Facebook](https://developers.facebook.com/apps), если вы еще этого не сделали.  Выберите параметр «Веб-сайт с входом через Facebook» в меню «Выбор способа интеграции приложения с Facebook» и введите URL-адрес своего сайта.
2.  Добавьте идентификатор приложения Facebook вашего приложения на странице параметров вашего приложения Parse.
3.  Выполните [эти инструкции](https://developers.facebook.com/docs/reference/javascript/) для загрузки Facebook Javascript SDK в приложение.
4.  Замените вызов `FB.init()` на вызов `Parse.FacebookUtils.init()`.  Например, в случае асинхронной загрузки SDK Facebook функция `fbAsyncInit` будет выглядеть следующим образом:
```js
window.fbAsyncInit = function() {
  Parse.FacebookUtils.init({
   appId: 'YOUR_APP_ID', // Facebook App ID
   channelUrl: '//WWW.YOUR_DOMAIN.COM/channel.html', // Channel File
   status: true, // check login status
   cookie: true, // enable cookies to allow Parse to access the session
   xfbml: true  // parse  });
  // Additional initialization code here
};
```

При возникновении любых проблем, связанных с Facebook, рекомендуем обратиться на [официальному руководству по началу работы на Facebook](https://developers.facebook.com/docs/reference/javascript/).

Существует два основных способа использования Facebook с пользователями Parse: (1) вход при помощи Facebook и создание пользователя `Parse.User`, или (2) связывание Facebook с существующим пользователем `Parse.User`.

### Вход и регистрация

Класс `Parse.FacebookUtils` предоставляет разрешение для пользователей `Parse.User` входить или регистрироваться через Facebook. Это осуществляется при помощи метода `logIn()`:

```js
Parse.FacebookUtils.logIn(null, {
  success: function(user) {
    if (!user.existed()) {
      alert("User signed up and logged in through Facebook!");
    } else {
      alert("User logged in through Facebook!");
    }
  },
  error: function(user, error) {
    alert("User cancelled the Facebook login or did not fully authorize.");
  }
});
```

При выполнении этого кода происходит следующее:

1.  Пользователь видит диалоговое окно входа в Facebook.
2.  Пользователь аутентифицируется через Facebook, приложение получает обратный вызов.
3.  Наш SDK получает данные Facebook и сохраняет их в класс `Parse.User`. Если это новый пользователь на основе идентификатора Facebook, тогда создается этот пользователь.
4.  Обратный вызов `success` осуществляется пользователем.

Можно дополнительно предоставить строку с разделителями-запятыми, которая указывает [разрешения](https://developers.facebook.com/docs/authentication/permissions/), требуемые приложением от пользователя Facebook.  Например:

```js
Parse.FacebookUtils.logIn("user_likes,email", {
  success: function(user) {
    // Handle successful login
  },
  error: function(user, error) {
    // Handle errors and cancellation
  }
});
```

Интеграция пользователей `Parse.User` не требует разрешений для стандартной работы (например, метод `null` или отсутствие указанных разрешений полностью допустимы). [Подробнее о разрешениях см. Руководство для разработчиков Facebook.](https://developers.facebook.com/docs/reference/api/permissions/)

<div class='tip info'><div>
Вы самостоятельно решаете, нужно ли записывать необходимые данные от пользователя Facebook после прохождения аутентификации. Чтобы выполнить это, необходимо [создать графический запрос через SDK Facebook](https://parse.com/questions/how-can-i-find-parse-users-that-are-facebook-friends-with-the-current-user).
</div></div>

### Связывание

Если необходимо связать существующего пользователя `Parse.User` с аккаунтом Facebook, это можно сделать следующим образом:

```js
if (!Parse.FacebookUtils.isLinked(user)) {
  Parse.FacebookUtils.link(user, null, {
    success: function(user) {
      alert("Woohoo, user logged in with Facebook!");
    },
    error: function(user, error) {
      alert("User cancelled the Facebook login or did not fully authorize.");
    }
  });
}
```

Шаги, выполняемые при связывании, очень похожи на действия при авторизации. Разница состоит в том, что при успешном входе существующий пользователь `Pars.eUser` обновляется сведениями с Facebook. При последующих авторизациях через Facebook будет осуществляться вход пользователя в его существующий аккаунт.

Если необходимо отменить связь пользователя с Facebook, просто выполните следующее:

```js
Parse.FacebookUtils.unlink(user, {
  success: function(user) {
    alert("The user is no longer associated with their Facebook account.");
  }
});
```

### SDK Facebook и Parse

SDK Javascript Facebook предоставляет главный объект `FB`, который является отправной точкой для многих взаимодействий с API Facebook. [Дополнительную информацию о Facebook SDK можно прочитать здесь](https://developers.facebook.com/docs/reference/javascript/).

Вход в Facebook с помощью SDK Parse требует, чтобы SDK Facebook уже был установлен перед вызовом `Parse.FacebookUtils.init()`.

Наша библиотека управляет для вас объектом `FB` пользователя. Одинарный объект `FB` синхронизируется с текущим пользователем по умолчанию, поэтому любые методы, вызванные на нем, будут действовать на пользователя Facebook, связанного с текущим пользователем `Parse.User`. Вызов `FB.login()` или `FB.logOut()` явным образом приведет к выпадению объектов `Parse.User` и `FB` из синхронизации, поэтому не рекомендуется к выполнению.
