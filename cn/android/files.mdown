# 文件

## ParseFile

`ParseFile` 让您可以把应用程序文件储存在云中，以应对文件太大或太多，不适宜放入普通 `ParseObject` 的情况。最常见的用例是储存图片，但是您还可以用它储存文件、视频、音乐以及其他任何二进制数据（大小不超过 10 MB）。

`ParseFile` 非常容易上手。首先，您需要拥有 `byte[]` 格式的数据，然后使用此数据创建 `ParseFile`。在该示例中，我们只使用一个字符串：

```java
byte[] data = "Working at Parse is great!".getBytes();
ParseFile file = new ParseFile("resume.txt", data);
```

注意，在这个例子中，我们把文件命名为 `resume.txt`。这里要注意两点： 

*   您不需要担心文件名冲突。每次上传都会获得一个唯一标识符，所以上传多个文件名为 `resume.txt` 的文件不同出现任何问题。
*   重要的是，您要给文件命名（带文件扩展名）。这样 Parse 就能够判断文件类型，并对文件进行相应的处理。所以，若您要储存 PNG 图片，务必使文件名以 `.png` 结尾。

然后，您可以把文件保存到云中。与 `ParseObject` 相同，您可以根据回调类型和适合您的错误处理方式使用 `save` 方法的多种派生方法。

```java
file.saveInBackground();
```

最后，保存完成后，您可以像其他数据一样把 `ParseFile` 与 `ParseObject` 关联起来：

```java
ParseObject jobApplication = new ParseObject("JobApplication");
jobApplication.put("applicantName", "Joe Smith");
jobApplication.put("applicantResumeFile", file);
jobApplication.saveInBackground();
```

重新获取此数据涉及对 `ParseObject` 调用任一 `getData` 变体。这里我们从另一 JobApplication 对象获取恢复文件：

```java
ParseFile applicantResume = (ParseFile)anotherApplication.get("applicantResumeFile");
applicantResume.getDataInBackground(new GetDataCallback() {
  public void done(byte[] data, ParseException e) {
    if (e == null) {
      // data has the bytes for the resume
    } else {
      // something went wrong
    }
  }
});
```

与 `ParseObject` 类似，您极有可能想要使用 `getData` 的后台版本。

## 进度

通过向 `saveInBackground` 和 `getDataInBackground` 传递 ProgressCallback，可使用 ParseFile 轻松获取上传和下载的进度。例如：

```java
byte[] data = "Working at Parse is great!".getBytes();
ParseFile file = new ParseFile("resume.txt", data);

file.saveInBackground(new SaveCallback() {
  public void done(ParseException e) {
    // Handle success or failure here ...
  }
}, new ProgressCallback() {
  public void done(Integer percentDone) {
    // Update your progress spinner here. percentDone will be between 0 and 100.
  }
});
```

您可以用 [REST API](/docs/rest#files-deleting) 删除对象引用的文件。您需要提供主密钥才能删除文件。

如果您的文件未被应用中的任何对象引用，则不能通过 REST API 删除它们。您可以在应用的“设置”页面请求清理未使用的文件。请记住，该操作可能会破坏依赖于访问未被引用文件（通过其 URL 属性）的功能。当前与对象关联的文件将不会受到影响。
