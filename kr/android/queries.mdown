# 쿼리

## 기본 쿼리

검색할 개체를 지정하기에는 `getInBackground`만으로는 충분하지 않은 경우가 많습니다. `ParseQuery`에서는 다양한 방법으로 싱글 개체가 아닌 개체 목록을 검색할 수 있습니다.

일반적인 패턴은 `ParseQuery`를 만들고 조건을 지정한 다음 `findInBackground` 메서드와 함께 `FindCallback`을 사용하여 일치하는 `ParseObject`의 `List`를 가져오는 것입니다. 예를 들어 특정 `playerName`의 점수를 검색하려면 `whereEqualTo` 메서드를 사용하여 키의 값을 제한합니다.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.whereEqualTo("playerName", "Dan Stemkoski");
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scoreList, ParseException e) {
        if (e == null) {
            Log.d("score", "Retrieved " + scoreList.size() + " scores");
        } else {
            Log.d("score", "Error: " + e.getMessage());
        }
    }
});
```

`findInBackground`는 `getInBackground`와 유사하게 네트워크 요청이 백그라운드 스레드에서 수행되도록 하며, 콜백을 기본 스레드에서 실행합니다.

## 쿼리 조건

`ParseQuery`에서 찾은 개체에 조건을 지정하는 방법에는 여러 가지가 있습니다. 다음과 같이 `whereNotEqualTo`로 특정 키-값 쌍을 사용하여 개체를 필터링할 수 있습니다.:

```java 
query.whereNotEqualTo("playerName", "Michael Yabuti");
```

여러 조건을 지정할 수 있으며 개체는 모든 조건에 일치하는 경우에만 결과에 포함됩니다.  즉, AND 조건과 같습니다.

```java
query.whereNotEqualTo("playerName", "Michael Yabuti");
query.whereGreaterThan("playerAge", 18);
```

`setLimit`를 사용하여 결과의 개수를 제한할 수 있습니다. 기본적으로 결과는 100개로 제한되지만 유효한 제한 개수는 1~1000개입니다.

```java
query.setLimit(10); // limit to at most 10 results
```

정확히 1개의 결과를 원하는 경우 `find`를 사용하는 대신 `getFirst` 또는 `getFirstBackground`를 사용하는 것이 더욱 편리할 수 있습니다.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.whereEqualTo("playerEmail", "dstemkoski@example.com");
query.getFirstInBackground(new GetCallback<ParseObject>() {
    public void done(ParseObject object, ParseException e) {
        if (object == null) {
            Log.d("score", "The getFirst request failed.");
        } else {
            Log.d("score", "Retrieved the object.");
        }
    }
});
```

`setSkip`을 사용하여 첫 번째 결과를 건너뛸 수 있습니다. 이 방법은 페이지를 매길 때 유용할 수 있습니다.

```java
query.setSkip(10); // skip the first 10 results
```

숫자와 문자열 같이 정렬할 수 있는 유형의 경우 다음과 같이 결과가 반환되는 순서를 제어할 수 있습니다.

```java
// Sorts the results in ascending order by the score field
query.orderByAscending("score");

// Sorts the results in descending order by the score field
query.orderByDescending("score");
```

다음과 같이 쿼리에 대한 정렬 키를 추가할 수 있습니다.

```java
// Sorts the results in ascending order by the score field if the previous sort keys are equal.
query.addAscendingOrder("score");

// Sorts the results in descending order by the score field if the previous sort keys are equal.
query.addDescendingOrder("score");
```

또한 다음과 같이 정렬 가능한 유형의 쿼리에서 비교를 사용할 수 있습니다.

```java
// Restricts to wins < 50
query.whereLessThan("wins", 50);

// Restricts to wins <= 50
query.whereLessThanOrEqualTo("wins", 50);

// Restricts to wins > 50
query.whereGreaterThan("wins", 50);

// Restricts to wins >= 50
query.whereGreaterThanOrEqualTo("wins", 50);
```

여러 다른 값과 일치하는 개체를 검색하려면 `whereContainedIn`에 허용 가능한 값의 컬렉션을 지정할 수 있습니다. 주로 여러 쿼리를 싱글 쿼리로 대체하는 데 유용합니다. 예를 들어 다음과 같이 특정 목록에서 모든 플레이어의 점수를 검색하려는 경우 쿼리는 다음과 같습니다.

```java
String[] names = {"Jonathan Walsh", "Dario Wunsch", "Shawn Simon"};
query.whereContainedIn("playerName", Arrays.asList(names));
```

여러 값 중 아무 값과도 일치하지 않는 개체를 검색하려면 허용 가능한 값의 배열을 제공하는 `whereKey:notContainedIn:`을 사용할 수 있습니다.  예를 들어 다음과 같이 목록에 없는 플레이어의 점수를 검색하려는 경우 다음과 같이 할 수 있습니다.

```java
String[] names = {"Jonathan Walsh", "Dario Wunsch", "Shawn Simon"};
query.whereNotContainedIn("playerName", Arrays.asList(names));
```

특정 키 세트가 있는 개체를 검색하려는 경우 `whereExists`를 사용할 수 있습니다. 반대로 특정 키 세트가 없는 개체를 검색하려는 경우 `whereDoesNotExist`를 사용할 수 있습니다.

```java
// Finds objects that have the score set
query.whereExists("score");

// Finds objects that don't have the score set
query.whereDoesNotExist("score");
```
`whereMatchesKeyInQuery` 메서드를 사용하여 키가 다른 쿼리 결과에서 가져온 개체 세트에 있는 키의 값과 일치하는 개체를 가져올 수 있습니다.  예를 들어 스포츠 팀이 포함된 클래스가 있고 사용자 클래스에 사용자의 연고지를 저장하는 경우 하나의 쿼리로 우승 기록이 있는 연고지 팀의 사용자 목록을 찾을 수 있습니다.  쿼리는 다음과 같습니다.

```java
ParseQuery<ParseObject> teamQuery = ParseQuery.getQuery("Team");
teamQuery.whereGreaterThan("winPct", 0.5);
ParseQuery<ParseUser> userQuery = ParseUser.getQuery();
userQuery.whereMatchesKeyInQuery("hometown", "city", teamQuery);
userQuery.findInBackground(new FindCallback<ParseUser>() {
    void done(List<ParseUser> results, ParseException e) {
        // results has the list of users with a hometown team with a winning record
    }
});
```

이와 반대로 키가 다른 쿼리 결과에서 가져온 개체 세트에 있는 키의 값과 일치하지 않는 개체를 가져오려면 `whereDoesNotMatchKeyInQuery`를 사용할 수 있습니다. 예를 들어 패배 기록이 있는 연고지 팀의 사용자를 찾으려는 경우 쿼리는 다음과 같습니다.

```java
ParseQuery<ParseUser> losingUserQuery = ParseUser.getQuery();
losingUserQuery.whereDoesNotMatchKeyInQuery("hometown", "city", teamQuery);
losingUserQuery.findInBackground(new FindCallback<ParseUser>() {
    void done(List<ParseUser> results, ParseException e) {
        // results has the list of users with a hometown team with a losing record
    }
});
```

`selectKeys`를 호출할 때 키 컬렉션을 사용하여 반환되는 필드를 제한할 수 있습니다. `score`와 `playerName` 필드(및 `objectId`, `createdAt`, `updatedAt` 등 기본 제공되는 특수 필드)만 포함된 문서를 가져오려는 경우 쿼리는 다음과 같습니다.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.selectKeys(Arrays.asList("playerName", "score"));
List<ParseObject> results = query.find();
```

나머지 필드는 나중에 반환된 개체의 `fetchIfNeeded` 변형 중 하나를 호출하여 가져올 수 있습니다.

```java
ParseObject object = results.get(0);
object.fetchIfNeededInBackground(new GetCallback<ParseObject>() {
    public void done(ParseObject object, ParseException e) {
        // all fields of the object will now be available here.
    }
});
```

## 배열 값 쿼리

키에 배열 값이 포함된 경우 다음을 통해 키의 배열 값에 2가 포함된 개체를 검색할 수 있습니다.

```java
// Find objects where the array in arrayKey contains the number 2.
query.whereEqualTo("arrayKey", 2);
```

또한 다음과 같이 키의 배열 값에 값 2, 3, 4가 각각 포함된 개체를 검색할 수 있습니다.

```java
// Find objects where the array in arrayKey contains all of the numbers 2, 3, and 4.
ArrayList<Integer> numbers = new ArrayList<Integer>();
numbers.add(2);
numbers.add(3);
numbers.add(4);
query.whereContainsAll("arrayKey", numbers);
```

## 문자열 값 쿼리

`whereStartsWith`를 사용하여 특정 문자열로 시작하는 문자열 값으로 제한할 수 있습니다. MySQL LIKE 연산자와 마찬가지로 색인이 생성되므로 큰 데이터 세트에 효율적입니다.

```java
// Finds barbecue sauces that start with "Big Daddy's".
ParseQuery<ParseObject> query = ParseQuery.getQuery("BarbecueSauce");
query.whereStartsWith("name", "Big Daddy's");
```

## 관계형 쿼리

관계형 데이터를 쿼리하는 방법에는 여러 가지가 있습니다. 필드가 특정 `ParseObject`와 일치하는 개체를 검색하려는 경우 다른 데이터 유형과 마찬가지로 `whereEqualTo`를 사용할 수 있습니다. 예를 들어 각 `Comment`의 `post` 필드에 `Post` 개체가 있는 경우 특정 `Post`에 대한 댓글을 가져올 수 있습니다.

```java
// Assume ParseObject myPost was previously created.
ParseQuery<ParseObject> query = ParseQuery.getQuery("Comment");
query.whereEqualTo("post", myPost);

query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> commentList, ParseException e) {
        // commentList now has the comments for myPost
    }
});
```

필드에 다른 쿼리와 일치하는 `ParseObject`가 포함된 개체를 검색하려는 경우 `whereMatchesQuery`를 사용할 수 있습니다. 기본 한도 100개와 최대 한도 1000개가 내부 쿼리에도 적용되므로 데이터 세트가 큰 경우 쿼리를 신중하게 구성해야 원하는 동작을 얻을 수 있습니다. 이미지가 있는 게시물에 대한 댓글을 찾으려면 다음 쿼리를 수행하세요.

```java
ParseQuery<ParseObject> innerQuery = ParseQuery.getQuery("Post");
innerQuery.whereExists("image");
ParseQuery<ParseObject> query = ParseQuery.getQuery("Comment");
query.whereMatchesQuery("post", innerQuery);
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> commentList, ParseException e) {
        // comments now contains the comments for posts with images.
    }
});
```

필드에 다른 쿼리와 일치하지 않는 `ParseObject`가 포함된 개체를 가져오려면 `whereDoesNotMatchQuery`를 사용할 수 있습니다. 이미지가 없는 게시물에 대한 댓글을 찾으려면 다음 쿼리를 수행하세요.

```java
ParseQuery<ParseObject> innerQuery = ParseQuery.getQuery("Post");
innerQuery.whereExists("image");
ParseQuery<ParseObject> query = ParseQuery.getQuery("Comment");
query.whereDoesNotMatchQuery("post", innerQuery);
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> commentList, ParseException e) {
        // comments now contains the comments for posts without images.
    }
});
```

하나의 쿼리로 관계된 개체의 여러 유형을 반환하려는 경우 `include` 메서드로 수행할 수 있습니다. 예를 들어 최근 10개의 댓글을 가져오면서 동시에 관련된 게시물을 가져오려면 다음과 같이 쿼리합니다.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("Comment");

// Retrieve the most recent ones
query.orderByDescending("createdAt");

// Only retrieve the last ten
query.setLimit(10);

// Include the post data with each comment
query.include("post");

query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> commentList, ParseException e) {
        // commentList now contains the last ten comments, and the "post"
        // field has been populated. For example:
        for (ParseObject comment : commentList) {
            // This does not require a network access.
            ParseObject post = comment.getParseObject("post");
            Log.d("post", "retrieved a related post");
        }
    }
});
```

또한 점 표시를 사용하여 여러 수준 포함을 수행할 수 있습니다.  댓글에 대한 게시물과 게시물 작성자를 포함하려면 다음과 같이 쿼리합니다.

```java
query.include("post.author");
```

`include`를 여러 번 호출하여 여러 필드가 포함된 쿼리를 수행할 수 있습니다. 이 기능은 `getFirst()` 및 `getInBackground()`와 같은 ParseQuery 헬퍼와도 작동합니다.fromlocaldatastore" 

## 로컬 데이터 저장소 쿼리

`Parse.initialize()`를 호출하기 전에 `Parse.enableLocalDatastore()`를 호출하여 로컬 데이터 저장소를 활성화한 경우 기기에 로컬로 저장된 개체를 쿼리할 수도 있습니다. 이렇게 하려면 쿼리에서 `fromLocalDatastore` 메서드를 호출합니다.

```java
query.fromLocalDatastore();
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scoreList, ParseException e) {
        if (e == null) {
            // Results were successfully found from the local datastore.
        } else {
            // There was an error.
        }
    }
});
```

네트워크를 통해 사용하는 쿼리와 똑같은 종류를 사용하여 로컬 데이터 저장소에서 쿼리할 수 있습니다. 결과에는 기기에 고정된 쿼리와 일치하는 모든 개체가 포함됩니다. 이 쿼리에서는 클라우드에 아직 저장되지 않은 개체에 대한 변경 사항도 고려합니다. 예를 들어 개체에서 `deleteEventually`를 호출하는 경우 이러한 쿼리에서 개체가 더 이상 반환되지 않습니다.

## 쿼리 캐싱

쿼리 결과를 기기에 캐시하면 유용한 경우가 많습니다. 이렇게 하면 사용자 기기가 오프라인이거나 앱이 방금 시작되어 아직 네트워크 요청을 완료할 시간이 없을 때 데이터를 표시할 수 있습니다. 이렇게 하는 가장 쉬운 방법은 로컬 데이터 저장소를 사용하는 것입니다. 개체를 고정할 때 핀에 레이블을 연결하면 개체 그룹을 함께 관리할 수 있습니다. 예를 들어 위 쿼리 결과를 캐시하려면 `pinAllInBackground`를 호출하고 레이블을 지정할 수 있습니다.

```java
final String TOP_SCORES_LABEL = "topScores";
// Query for the latest objects from Parse.
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(final List<ParseObject> scoreList, ParseException e) {
        if (e != null) {
            // There was an error or the network wasn't available.
            return;
        }
        // Release any objects previously pinned for this query.
        ParseObject.unpinAllInBackground(TOP_SCORES_LABEL, scoreList, new DeleteCallback() {
            public void done(ParseException e) {
                if (e != null) {
                    // There was some error.
                    return;
                }
                // Add the latest results for this query to the cache.
                ParseObject.pinAllInBackground(TOP_SCORES_LABEL, scoreList);
            }
        });
    }
});
```

이제 `fromLocalDatastore`를 사용하여 쿼리하면 이러한 개체가 쿼리와 계속 일치하는 경우 결과에 포함됩니다.

로컬 데이터 저장소를 사용하지 않는 경우 대신 `ParseQuery`에 대해 쿼리별 캐시를 사용할 수 있습니다. 기본적으로 쿼리 동작에서는 캐시를 사용하지 않지만, `setCachePolicy`를 사용하여 캐시를 활성화할 수 있습니다. 예를 들어 네트워크를 통해 쿼리를 시도하고 네트워크를 사용할 수 없는 경우 캐시된 데이터에 시도하려는 경우 다음과 같이 수행합니다.

```java
query.setCachePolicy(ParseQuery.CachePolicy.NETWORK_ELSE_CACHE);
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scoreList, ParseException e) {
        if (e == null) {
            // Results were successfully found, looking first on the
            // network and then on disk.
        } else {
            // The network was inaccessible and we have no cached data
            // for this query.
        }
    }
});
```

Parse에서는 다양한 캐시 정책을 제공합니다.

*   `IGNORE_CACHE` 쿼리는 캐시에서 로드하지 않거나 캐시에 결과를 저장하지 않습니다. `IGNORE_CACHE`는 기본 캐시 정책입니다.
*   `CACHE_ONLY` 쿼리는 캐시에서만 로드하고 네트워크를 무시합니다. 캐시된 결과가 없는 경우 `ParseException`이 발생합니다.
*   `NETWORK_ONLY` 쿼리가 캐시에서 로드되지 않지만 결과는 캐시에 저장합니다.
*   `CACHE_ELSE_NETWORK` 쿼리는 먼저 캐시에서 로드를 시도하며 실패하면 네트워크에서 결과를 로드합니다. 캐시나 네트워크에서 모두 로드하지 못하면 `ParseException`이 발생합니다.
*   `NETWORK_ELSE_CACHE` 쿼리는 네트워크에서 먼저 로드를 시도하고 실패하면 캐시에서 결과를 로드합니다. 네트워크나 캐시에서 모두 로드하지 못하면 `ParseException`이 발생합니다.
*   `CACHE_THEN_NETWORK` 쿼리는 먼저 캐시에서 로드한 다음 네트워크에서 로드합니다. 이 경우 `FindCallback`은 먼저 캐시된 결과를 사용하여 호출된 다음 네트워크 결과를 사용하여 호출되어 실제로 두 번 호출됩니다. 이 캐시 정책은 `findInBackground`와 비동기적으로만 사용할 수 있습니다.

캐시 동작을 제어해야 하는 경우 ParseQuery에 지정한 메서드를 사용하여 캐시와 상호 작용할 수 있습니다.  캐시에서 다음 작업을 수행할 수 있습니다.

*   쿼리에 대한 캐시된 결과가 있는지 확인합니다. ```java boolean isInCache = query.hasCachedResult();            ```*   쿼리에 대한 모든 캐시된 결과를 삭제합니다. ```java query.clearCachedResult();            ```
*   모든 쿼리에 대한 캐시된 결과를 삭제합니다. ```java ParseQuery.clearAllCachedResults();        ``` 

또한 쿼리 캐싱은 `getFirst()` 및 `getInBackground()`를 비롯한 ParseQuery 헬퍼와도 작동합니다.

## 개체 계산

쿼리와 일치하는 개체 수만 계산하면 되고 일치하는 개체를 모두 가져올 필요는 없는 경우 `find` 대신 `count`를 사용할 수 있습니다. 예를 들어 특정 플레이어가 한 게임 수를 계산하려면 다음과 같이 쿼리합니다.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.whereEqualTo("playerName", "Sean Plott");
query.countInBackground(new CountCallback() {
    public void done(int count, ParseException e) {
        if (e == null) {
            // The count request succeeded. Log the count
            Log.d("score", "Sean has played " + count + " games");
        } else {
            // The request failed
        }
    }
});
```

스레드 호출을 차단하려면 동기적 `query.count()` 메서드를 사용할 수도 있습니다.

개체 수가 1000개 이상인 클래스의 경우 시간 초과로 계산 작업이 제한됩니다. 이 경우 일상적으로 시간 초과 오류가 발생하거나 대략적인 결과만 반환할 수도 있습니다. 따라서 앱에서 이러한 종류의 계산 작업을 방지하도록 설계하는 것이 좋습니다.

## 복합 쿼리

여러 쿼리 중 하나와 일치하는 개체를 찾으려면, `ParseQuery.or` 메서드를 사용하여 전달된 쿼리의 OR에 해당하는 쿼리를 구성할 수 있습니다. 예를 들어 우승을 많이 한 플레이어나 적게 한 플레이어를 찾으려면 다음과 같이 쿼리할 수 있습니다.

```java
ParseQuery<ParseObject> lotsOfWins = ParseQuery.getQuery("Player");
lotsOfWins.whereGreaterThan(150);

ParseQuery<ParseObject> fewWins = ParseQuery.getQuery("Player");
fewWins.whereLessThan(5);

List<ParseQuery<ParseObject>> queries = new ArrayList<ParseQuery<ParseObject>>();
queries.add(lotsOfWins);
queries.add(fewWins);

ParseQuery<ParseObject> mainQuery = ParseQuery.or(queries);
mainQuery.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> results, ParseException e) {
        // results has the list of players that win a lot or haven't won much.
    }
});
```

새로 생성된 `ParseQuery`에 'and' 연산자처럼 작동하는 조건을 추가할 수 있습니다.

하지만 복합 쿼리의 하위 쿼리에서 필터링되지 않은 조건(예: `setLimit`, `skip`, `orderBy...`, `include`)은 지원되지 않습니다.
