# 로컬 데이터 저장소

Parse Android SDK에서는 네트워크를 사용할 수 없는 경우에도 `ParseObject`를 저장하고 검색하는 데 사용할 수 있는 로컬 데이터 저장소를 제공합니다. 이 기능을 활성화하려면 `initialize`를 호출하기 전에 `Parse.enableLocalDatastore()`를 호출하면 됩니다.

```java
import com.parse.Parse;
import android.app.Application;

public class App extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        Parse.enableLocalDatastore(this);
        Parse.initialize(this, PARSE_APPLICATION_ID, PARSE_CLIENT_KEY);
    }
}
```

로컬 데이터 저장소를 활성화할 경우의 몇 가지 부작용에 대해 알고 있어야 합니다. 활성화할 경우 지정된 `ParseObject`의 인스턴스가 하나만 있게 됩니다. 예를 들어 `objectId`가 `"xWMyZ4YEGZ"`인 `"GameScore"` 클래스의 인스턴스가 있는데 해당 `objectId`의 모든 `"GameScore"` 인스턴스에 대해 `ParseQuery`를 실행한다고 상상해 보세요. 결과는 메모리에 이미 있는 개체의 동일한 인스턴스가 됩니다.

다른 부작용은 현재 사용자와 현재 설치가 로컬 데이터 저장소에 저장된다는 것인데, 따라서 아래 메서드를 사용하여 이러한 개체에 대한 저장되지 않은 변경 사항을 앱 실행 간에 유지할 수 있습니다.

`ParseObject`에서 `saveEventually` 메서드를 호출하면 저장이 완료될 때까지 개체가 로컬 데이터 저장소에 고정됩니다. 따라서 현재 `ParseUser`를 변경하고 `ParseUser.getCurrent().saveEventually()`를 호출하는 경우 변경한 사항이 앱에 항상 표시됩니다.

## 고정

`ParseObject`를 고정하여 로컬 데이터 저장소에 저장할 수 있습니다. `ParseObject` 고정은 저장처럼 재귀적이므로 고정하는 개체에 의해 고정되는 모든 개체도 고정됩니다. 개체를 고정하는 경우 새 데이터를 가져오거나 저장하여 개체를 업데이트할 때마다 로컬 데이터 저장소의 복사본이 자동으로 업데이트됩니다. 업데이트에 대해 염려할 필요가 전혀 없습니다.

```java
ParseObject gameScore = new ParseObject("GameScore");
gameScore.put("score", 1337);
gameScore.put("playerName", "Sean Plott");
gameScore.put("cheatMode", false);
gameScore.pinInBackground();
```

개체가 여러 개인 경우 `pinAllInBackground` 편의 메서드를 사용하여 한 번에 모두 고정할 수 있습니다.

```java
ParseObject.pinAllInBackground(listOfObjects);
```

## 로컬 데이터 저장소에서 저장

개체를 저장하면 좋지만 저장한 개체를 나중에 다시 가져올 수 있는 경우에만 유용합니다. 로컬 데이터 저장소에서 개체를 검색하는 기능은 네트워크를 통해 검색할 때와 동일하게 작동합니다. 다만 `fromLocalDatastore` 메서드를 호출하여 `ParseQuery`에 결과를 어디서 찾을지 알려주는 점만 다릅니다.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.fromLocalDatastore();
query.getInBackground("xWMyZ4YE",
    new GetCallback<ParseObject>() {
        public void done(ParseObject object, ParseException e) {
            if (e == null) {
                // object will be your game score
            } else {
                // something went wrong
            }
        }
    });
```

## 로컬 데이터 저장소 쿼리

ID로 싱글 개체를 가져오는 대신 특정 기준과 일치하는 전체 개체 목록을 찾고 싶은 경우가 많습니다. 이렇게 하려면 다음을 사용할 수 있습니다. [ParseQuery](#queries).

## 고정 취소

개체 작업을 마쳤고 개체를 로컬 데이터 저장소에 더 이상 유지할 필요가 없는 경우 개체를 고정 취소할 수 있습니다. 이렇게 하면 기기에서 디스크 공간이 확보되고 로컬 데이터 저장소에 대한 쿼리가 빠르게 실행됩니다.

```java
gameScore.unpinInBackground();
```

여러 개체를 한 번에 고정 취소하는 메서드도 있습니다.

```java
ParseObject.unpinAllInBackground(listOfObjects);
``` 

## 레이블과 고정

각 개체를 따로 수동으로 고정하고 고정 취소하는 작업은 `malloc` 및 `free`를 사용하는 것과 약간 비슷합니다. 이 툴은 매우 강력하긴 하지만 복잡한 시나리오에서는 저장되는 개체를 관리하기가 어려울 수 있습니다. 예를 들어 글로벌 최고 점수와 친구의 최소 점수에 대한 최고 점수 목록이 별도로 있는 게임을 만든다고 가정해 보세요. 친구 중 하나가 글로벌 최고 점수를 획득하는 경우 캐시된 쿼리 중 하나에서 친구를 삭제할 때 친구를 완전히 고정 취소하지 않도록 해야 합니다. 이러한 시나리오를 더 간단히 구현하려면 레이블과 고정할 수도 있습니다. 레이블은 함께 저장해야 하는 개체 그룹을 나타냅니다.

```java
// Add several objects with a label.
ParseObject.pinAllInBackground("MyScores", someGameScores);

// Add another object with the same label.
anotherGameScore.pinInBackground("MyScores");
```

동일한 레이블의 모든 개체를 동시에 고정 취소하려면 고정 취소 메서드에 레이블을 전달할 수 있습니다. 이렇게 하면 관심이 있는 각 그룹의 개체를 수동으로 추적할 필요가 없습니다.

```java
ParseObject.unpinAllInBackground("MyScores");
```

모든 개체는 레이블과 고정된 동안 데이터 저장소에 유지됩니다. 즉, 개체를 두 개의 다른 레이블과 고정한 다음 한 레이블과의 고정을 취소하는 경우 다른 레이블과의 고정도 취소할 때까지 개체가 데이터 저장소에 유지됩니다."

## 쿼리 결과 캐싱

레이블과 고정하면 쿼리 결과를 캐시하기 쉽습니다. 레이블 하나를 사용하여 각각 다른 쿼리의 결과를 고정할 수 있습니다. 네트워크에서 새 결과를 가져오려면 쿼리를 수행하고 고정된 개체를 업데이트하면 됩니다.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery(“GameScore");
query.orderByDescending(“score”);

// Query for new results from the network.
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scores, ParseException e) {
        // Remove the previously cached results.
        ParseObject.unpinAllInBackground(“highScores”, new DeleteCallback() {
            public void done(ParseException e) {
                // Cache the new results.
                ParseObject.pinAllInBackground(“highScores”, scores);
            }
        });
    }
});
```

캐시된 쿼리 결과를 가져오려면 로컬 데이터 저장소에 대해 동일한 쿼리를 실행하면 됩니다.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery(“GameScore");
query.orderByDescending(“score”);
query.fromLocalDatastore();

query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scores, ParseException e) {
        // Yay! Cached scores!
    }
});
```

## 로컬 변경 사항 동기화

일부 변경 사항을 로컬에 저장했으면 몇 가지 다른 방법으로 이러한 변경 사항을 네트워크를 통해 Parse에 저장할 수 있습니다. 이렇게 하는 가장 쉬운 방법은 `saveEventually`를 사용하는 것입니다. `ParseObject`에서 `saveEventually`를 호출하면 개체가 저장할 수 있을 때까지 고정됩니다. 다음에 네트워크를 사용할 수 있게 되면 개체가 저장됩니다.

```java
gameScore.saveEventually();
```

개체가 동기화되는 방법을 보다 세밀하게 제어하려면 개체를 `saveInBackground`를 사용하여 저장할 수 있을 때까지 로컬 데이터 저장소에 유지할 수 있습니다. 저장해야 하는 개체 세트를 관리하려면 마찬가지로 레이블을 사용할 수 있습니다. `ParseQuery`의 `fromPin` 메서드를 사용하면 관심 있는 개체만 쉽게 가져올 수 있습니다.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery(“GameScore");
query.fromPin(“myChanges”);
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scores, ParseException e) {
        for (ParseObject score in scores) {
            score.saveInBackground();
            score.unpinInBackground(“myChanges”);
        }
    }
});
```
