# Аналитика

Parse предоставляет ряд обработчиков для получения картины работы вашего приложения. Важно понимать, как работает ваше приложение, насколько часто и в какое время.

В данном разделе описываются разные способы оснащения вашего приложения. Чтобы реализовать преимущества серверной аналитики Parse разработчики, использующие Parse для хранения и извлечения данных, уже могут воспользоваться статистикой на Parse.

Без необходимости внедрения логики со стороны клиента можно просматривать графики в режиме реального времени и сводные таблицы (по типу устройства, имени класса Parse или глаголу REST) запросов API в панели приложения и сохранять эти фильтры графиков для быстрого доступа только к тем данным, которые вам интересны.

## Аналитика по запуску приложения и уведомлениям

Основной обработчик аналитики позволяет отслеживать запуск вашего приложения. Добавив указанную ниже строку к методу `application:didFinishLaunching:`, начнется сбор данных о времени и частоте запуска вашего приложения.

```objc
[PFAnalytics trackAppOpenedWithLaunchOptions:launchOptions];
```

Графики и сводные таблицы статистики доступны в панели вашего приложения.

Доступны данные последующей аналитики, касающиеся доставки уведомлений и показателей просмотра. Обязательно ознакомьтесь с [подразделом «Отслеживание уведомлений и запусков приложений»](#receiving-tracking) нашего «Руководства по уведомлениям» для получения более подробных сведений об информационном наполнении уведомлений и связанных с уведомлениями обратных вызовах.

## Пользовательская аналитика

`PFAnalytics` также позволяет отслеживать произвольные события с рядом ключей и значений `NSString`. Эти дополнительные данные позволяют сегментировать пользовательские события через панель вашего приложения.

Допустим, в вашем приложении предлагается функция поиска списков квартир, и вы хотите отслеживать частоту использования этой функции с дополнительными метаданными.

```objc
NSDictionary *dimensions = @{
    // Define ranges to bucket data points into meaningful segments
    @"priceRange": @"1000-1500",
    // Did the user filter the query?
    @"source": @"craigslist",
    // Do searches happen more often on weekdays or weekends?
    @"dayType": @"weekday"
};
// Send the dimensions to Parse along with the 'search' event
[PFAnalytics trackEvent:@"search" dimensions:dimensions];
```

`PFAnalytics` может использоваться даже как упрощенный перечень ошибок &mdash; просто используйте следующий код для получения доступа к обзору количества и частоты ошибок в вашем приложении с разбивкой по коду ошибки:

```objc
NSString *codeString = [NSString stringWithFormat:@"%d", [error code]];
[PFAnalytics trackEvent:@"error" dimensions:@{ @"code": codeString }];
```

Обратите внимание на то, что в Parse хранятся только первые восемь пар параметров для каждого вызова `trackEvent:dimensions:`.
