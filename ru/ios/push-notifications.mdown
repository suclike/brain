## Уведомления

Уведомления &mdash; это отличный способ вовлечения и информирования пользователей о вашем приложении. Можно быстро и эффективно охватывать всю базу пользователей. Данное руководство поможет пройти процесс настройки. Также здесь описано общее использование Parse для рассылки уведомлений.

## Настройка уведомлений

Если вы хотите начать использовать уведомления, сначала ознакомьтесь с [Руководством по уведомлениям для iOS](/tutorials/ios-push-notifications), чтобы узнать как настроить свое приложение. Далее в данном руководстве описаны функции уведомлений от Parse.

## Установки

Все приложения Parse на устройстве, зарегистрированном для уведомлений, имеют связанный объект `Installation`. `Installation` представляет собой объект, где хранятся все данные, необходимые для таргетинга уведомлений. Например, в приложении о бейсболе можно сохранять команды, которыми интересуется пользователь, чтобы отправлять обновления об их достижениях.

В iOS объекты `Installation` доступны через класс `%{ParseInstallation}`, являющийся подклассом объекта `%{ParseObject}`. Этот класс использует [подобный интерфейс API](#objects) для хранения и извлечения данных. Чтобы получить доступ к текущему объекту `Installation` из приложения iOS, используйте метод `[PFInstallation currentInstallation]`. При первом сохранении метода `%{ParseInstallation}` Parse добавит его к вашему классу `Installation`, и он будет доступен для отправки уведомлений, если настроено его поле `deviceToken`.

```objc
- (void)application:(UIApplication *)application
        didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    // Store the deviceToken in the current Installation and save it to Parse.
    PFInstallation *currentInstallation = [PFInstallation currentInstallation];
    [currentInstallation setDeviceTokenFromData:deviceToken];
    [currentInstallation saveInBackground];
}
```

Поскольку возможно изменять класс `%{ParseInstallation}` точно так же, как и объект `%{ParseObject}`, существует несколько специальных полей, которые помогают управлять устройствами и ориентироваться на них.

*   **`badge`**: текущее значение значка визитки для приложений iOS. Изменение этого значения для класса `%{ParseInstallation}` обновит значение значка визитки приложения. Изменения будут сохранены на сервере, таким образом, они будут использоваться для уведомлений о дополнении данных визитки в будущем.
*   **`channels`**: массив каналов, на которые подписано устройство на данный момент.
*   **`timeZone`**: текущий часовой пояс, где размещено целевое устройство. Это значение синхронизируется каждый раз, когда объект `Installation` сохраняется с устройства _(только для чтения)_.
*   **`deviceType`**: тип устройства &mdash; &quot;ios&quot; или &quot;android&quot;, &quot;winrt&quot;, &quot;winphone&quot; или &quot;dotnet&quot; _(только для чтения)_.
*   **`installationId`**: уникальный идентификатор устройства, который используется в Parse _(только для чтения)_.
*   **`deviceToken`**: метка, которая создается Apple и используется для устройств iOS _(только для чтения)_.
*   **`channelUris`**: URI уведомлений, созданные Microsoft для устройств Windows _(только для чтения)_.
*   **`appName`**: отображаемое название приложения клиента, которому принадлежит эта установка _(только для чтения)_.
*   **`appVersion`**: версия строки приложения клиента, которому принадлежит эта установка _(только для чтения)_.
*   **`parseVersion`**: версия SDK Parse, которая используется в этой установке _(только для чтения)_.
*   **`appIdentifier`**: уникальный идентификатор для этой установки приложения клиента. В iOS это Bundle Identifier _(только для чтения)_.

## Отправка уведомлений

Существует два способа отправки уведомлений при помощи Parse: [каналы](#sending-channels) и [расширенное таргетирование](#sending-queries). Каналы предлагают простую в использовании модель для отправки уведомлений, в то время как расширенные возможности таргетирования аудитории обеспечивают более мощную и гибкую модель. Оба способа полностью совместимы друг с другом и описаны в данном разделе.

Отправка уведомлений часто осуществляется с веб-консоли, интерфейсов REST API или Cloud Code. Тем не менее уведомления могут также срабатывать при помощи существующих клиентских SDK. Если вы решите отправлять уведомления с клиентских SDK, вам понадобится настроить **Client Push Enabled** в параметрах «Уведомления» своего приложения Parse.

![](/images/docs/client_push_settings.png)

### Использование каналов

Самым простым способом запустить отправку уведомлений является использование каналов. Для отправки уведомлений этот способ применяет модель «публикатор-подписчик». Устройства подписываются на один или более каналов, и после этого можно отправлять уведомления этим подписчикам. Каналы, на которые оформлена подписка при помощи заданного объекта `Installation`, хранятся в поле `channels` объекта `Installation`.

#### Подписка на каналы

Канал определяется строкой, которая начинается с буквы и содержит цифры, буквы, знаки подчеркивания и тире. Канал не обязательно должен создаваться прямо перед использованием, и каждый объект `Installation` может подписываться на любое количество каналов одновременно.

Добавление подписки на канал можно выполнить при помощи метода `addUniqueObject:` для объекта `%{ParseObject}`. Например, в приложении со счетом бейсбольных игр можно создать следующий код:

```objc
// When users indicate they are Giants fans, we subscribe them to that channel.
PFInstallation *currentInstallation = [PFInstallation currentInstallation];
[currentInstallation addUniqueObject:@"Giants" forKey:@"channels"];
[currentInstallation saveInBackground];
```

После подписки на канал &quot;Giants&quot; у объекта `Installation` будет обновлено поле `channels`.

![](/images/docs/installation_channel.png)


Отказаться от подписки на канал так же просто:

```objc
// When users indicate they are no longer Giants fans, we unsubscribe them.
PFInstallation *currentInstallation = [PFInstallation currentInstallation];
[currentInstallation removeObject:@"Giants" forKey:@"channels"];
[currentInstallation saveInBackground];
```

Набор каналов с подпиской кэшируется в объекте `currentInstallation`:

```objc
NSArray *subscribedChannels = [PFInstallation currentInstallation].channels;
```

Если планируется изменение каналов из Cloud Code или браузера данных, помните, что необходимо вызвать определенную форму метода `fetch` до этой строки, чтобы получить последние каналы.

#### Отправка уведомлений каналам

В iOS SDK можно использовать приведенный ниже код для уведомле��ия всех подп��счиков канала &quot;Giants&quot;, что их любимая команда только что получила очки. Благодаря этому будет показано сообщение центра уведомлений для пользователей iOS и уведомление панели задач для пользователей Android.

```objc
// Send a notification to all devices subscribed to the "Giants" channel.
PFPush *push = [[PFPush alloc] init];
[push setChannel:@"Giants"];
[push setMessage:@"The Giants just scored!"];
[push sendPushInBackground];
```

Если необходимо охватить несколько каналов при помощи одного уведомления, можно использовать массив `NSArray` каналов.

```objc
NSArray *channels = [NSArray arrayWithObjects:@"Giants", @"Mets", nil];
PFPush *push = [[PFPush alloc] init];
// Be sure to use the plural 'setChannels'.
[push setChannels:channels];
[push setMessage:@"The Giants won against the Mets 2-3."];
[push sendPushInBackground];
```

### Использование расширенного таргетинга

Несмотря на то, что каналы отлично подходят для многих приложений, иногда при охвате получателей уведомлений необходима большая точность. Parse позволяет написать запрос для любого подкласса объектов `Installation` при помощи [API запросов](#queries) и отправлять им уведомление.

Поскольку `%{ParseInstallation}` является подклассом объекта `%{ParseObject}`, можно сохранять любые необходимые данные и даже создавать связи между объектами `Installation` и другими объектами. Это позволит отправлять уведомления настроенному и динамическому сегменту базы пользователей.

#### Сохранение данных установки

Хранить данные для объекта `Installation` так же просто, как и хранить [любые другие данные](#objects) в Parse. В приложении о бейсболе пользователи могут получать уведомления о результатах игры, счете и сообщениях о травмах членов команды.

```objc
// Store app language and version
PFInstallation *installation = [PFInstallation currentInstallation];
[installation setObject:YES forKey:@"scores"];
[installation setObject:YES forKey:@"gameResults"];
[installation setObject:YES forKey:@"injuryReports"];
[installation saveInBackground];
```

Можно даже создать связи между объектами `Installation` и другими классами, сохраненными в Parse. Например, чтобы связать объект PFInstallation с конкретным пользователем, можно просто сохранить текущего пользователя для объекта `%{ParseInstallation}`.

```objc
// Associate the device with a user
PFInstallation *installation = [PFInstallation currentInstallation];
installation[@"user"] = [PFUser currentUser];
[installation saveInBackground];
```

#### Отправка уведомлений в ответ на запросы

После сохранения данных для объектов `Installation` можно использовать запрос `PFQuery` для таргетирования подкласса этих устройств. Запросы `Installation` работают так же, как и другие [запросы Parse](#queries), однако для создания используется специальный статический метод `[PFInstallation query]`. Перед отправкой уведомления этот запрос настраивается для объекта `PFPush`.

```objc
// Create our Installation query
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"injuryReports" equalTo:YES];
// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
// Set our Installation query
[push setMessage:@"Willie Hayes injured by own pop fly."];
[push sendPushInBackground];
```

Для запроса можно также использовать каналы. Чтобы отправить уведомление всем подписчикам канала &quot;Giants&quot;, отфильтрованным по пользователям, которые хотят получить обновление счета, можно выполнить следующее:

```objc
// Create our Installation query
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"channels" equalTo:@"Giants"];
// Set channel
[pushQuery whereKey:@"scores" equalTo:YES];
// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
[push setMessage:@"Giants scored against the A's! It's now 2-2."];
[push sendPushInBackground];
```

При хранении связей с другими объектами в классе `Installation` можно также использовать эти связи для запросов. Например, можно отправить такое уведомление всем пользователям, находящимся в районе заданного местонахождения, как показано ниже.

```objc
// Find users near a given location
PFQuery *userQuery = [PFUser query];
[userQuery whereKey:@"location"
           nearGeoPoint:stadiumLocation
           withinMiles:[NSNumber numberWithInt:1]]
// Find devices associated with these users
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"user" matchesQuery:userQuery];

// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
// Set our Installation query
[push setMessage:@"Free hotdogs at the Parse concession stand!"];
[push sendPushInBackground];
```

## Параметры отправки

Функцию уведомлений можно использовать не только для отправки сообщений. В iOS уведомления могут также включать воспроизведение звука, отображаемое число визитки, а также любые пользовательские данные, которые необходимо отправить. Если ваше уведомление настроено по времени, можно также настроить дату истечения срока действия.

### Настройка уведомлений

Если нужно отправить больше, чем просто сообщение, необходимо использовать объект `NSDictionary` для комплектации всех данных. Существуют зарезервированные поля, имеющие специальное значение.

*   **`alert`**: сообщение уведомления.
*   **`badge`**: _(только для iOS)_ значение, указанное в правом верхнем углу значка приложения. Это поле может быть настроено на значение или на `Increment` для увеличения текущего значения на 1.
*   **`sound`**: _(только для iOS)_ название звукового файла в комплекте приложения.
*   **`content-available`**: _(только для iOS)_ при написании приложения [Киоск](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html) или приложения, использующего удаленные уведомления в фоновом режиме, [представленные в iOS7](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10) (также известные как &quot;Background Push&quot;), установите для этого поля значение 1, чтобы инициировать фоновую загрузку.
*   **`action`**: _(только для Android)_ должен срабатывать метод `Intent` при получении уведомления. Если не указаны значения полей `title` или `alert`, сработает метод `Intent`, но уведомление не будет показано пользователю.
*   **`title`**: _(только для Android, Windows 8 и Windows Phone 8)_ значение, которое отображается в панели задач Android, или всплывающее уведомление Windows.

Например, чтобы отправить уведомление, которое увеличит текущее число визитки на 1 и воспроизведет пользовательский звук, можно выполнить следующий код.

```objc
NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:
                       @"The Mets scored! The game is now tied 1-1!", @"alert",
                       @"Increment", @"badge",
                       @"cheering.caf", @"sound",
                       nil];
PFPush *push = [[PFPush alloc] init];
[push setChannels:[NSArray arrayWithObjects:@"Mets", nil]];
[push setData:data];
[push sendPushInBackground];
```

Также можно указать собственные данные в этом словаре. Как указано в разделе [Получение уведомлений](#receiving), вы будете иметь доступ к этим данным, только если пользователь откроет приложение через уведомление. Это может быть полезно для отображения другого элемента управления просмотром, когда пользователь открывает определенные уведомления.

```objc
NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:
                        @"Ricky Vaughn was injured in last night's game!", @"alert",
                        @"Vaughn", @"name",
                        @"Man bites dog", @"newsItem",
                        nil];
PFPush *push = [[PFPush alloc] init];
[push setQuery:injuryReportsQuery];
[push setChannel:@"Indians"];
[push setData:data];
[push sendPushInBackground];
```

Независимо от того, увеличивает ли уведомление число визитки приложения или устанавливает для нее определенное значение, приложению понадобится очистить свою визитку. Этот процесс описан в разделе [Очищение визитки](#receiving).

### Настройка даты истечения срока действия

Если устройство пользователя выключено или не подключено к Интернету, уведомления не могут быть доставлены. Если ваше уведомление зависит от времени, и его не стоит доставлять поздно, можно настроить дату истечения срока действия. Это позволяет избежать ненужных уведомлений с информацией, которая может быть уже неактуальной.

Существует два метода для класса `PFPush`, при помощи которых можно выполнить настройку даты истечения срока действия для уведомлений. Первый метод `expireAtDate:` просто указывает поле `NSDate`, которое определяет, когда Parse следует прекратить попытки отправки уведомления.

```objc
// Create date object for tomorrow
NSDateComponents *comps = [[NSDateComponents alloc] init];
[comps setYear:2015];
[comps setMonth:8];
[comps setDay:14];
NSCalendar *gregorian =
  [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
NSDate *date = [gregorian dateFromComponents:comps];

// Send push notification with expiration date
PFPush *push = [[PFPush alloc] init];
[push expireAtDate:date];
[push setQuery:everyoneQuery];
[push setMessage:@"Season tickets on sale until August 8th!"];
[push sendPushInBackground];
```

Однако, существуют некоторые предостережения для этого метода. Поскольку нет гарантии, что время на часах устройств выставлено точно, можно получить неверные результаты. Поэтому класс `PFPush` также предоставляет метод `expireAfterTimeInterval:`, который принимает объект `NSTimeInterval`. Срок действия уведомления закончится по истечении указанного периода.

```objc
// Create time interval
NSTimeInterval interval = 60*60*24*7; // 1 week

// Send push notification with expiration interval
PFPush *push = [[PFPush alloc] init];
[push expireAfterTimeInterval:interval];
[push setQuery:everyoneQuery];
[push setMessage:@"Season tickets on sale until next week!"];
[push sendPushInBackground];
```

### Таргетинг по платформе

При создании кроссплатформенного приложения вам может понадобиться охватить устройства с определенной операционной системой. Расширенное таргетирование позволяет отфильтровать охваченные устройства.

В приведенном ниже примере описан процесс отправки различных уведомлений пользователям Android, iOS и Windows 8.

```objc
PFQuery *query = [PFInstallation query];
[query whereKey:@"channels" equalTo:@"suitcaseOwners"];

// Notification for Android users
[query whereKey:@"deviceType" equalTo:@"android"];
PFPush *androidPush = [[PFPush alloc] init];
[androidPush setMessage:@"Your suitcase has been filled with tiny robots!"];
[androidPush setQuery:query];
[androidPush sendPushInBackground];

// Notification for iOS users
[query whereKey:@"deviceType" equalTo:@"ios"];
PFPush *iOSPush = [[PFPush alloc] init];
[iOSPush setMessage:@"Your suitcase has been filled with tiny apples!"];
[iOSPush setChannel:@"suitcaseOwners"];
[iOSPush setQuery:query];
[iOSPush sendPushInBackground];

// Notification for Windows 8 users
[query whereKey:@"deviceType" equalTo:@"winrt"];
PFPush *winPush = [[PFPush alloc] init];
[winPush setMessage:@"Your suitcase has been filled with tiny glass!"];
[winPush setQuery:query];
[winPush sendPushInBackground];

// Notification for Windows 8 users
[query whereKey:@"deviceType" equalTo:@"winphone"];
PFPush *winPush = [[PFPush alloc] init];
[wpPush setMessage:@"Your suitcase is very hip; very metro."];
[wpPush setQuery:query];
[wpPush sendPushInBackground];
```

## Планирование уведомлений

На данный момент отправка запланированных уведомлений не поддерживается в iOS SDK. Ознакомьтесь с REST API, JavaScript SDK или веб-консолью.

## Получение уведомлений

Как уже было рассмотрено в разделе [Настройка уведомлений](#options-data), вместе с сообщением уведомления можно отправлять произвольно выбранные данные. Эти данные можно использовать для изменения действия приложения, когда пользователь открывает уведомление. Например, при открытии уведомления, которое сообщает о том, что друг прокомментировал изображение пользователя, было бы целесообразно отображать это изображение.

Из-за ограничений на размер пакета, введенных Apple, необходимо внимательно управлять количеством дополнительных отправленных данных, так как это уменьшит максимальный размер вашего сообщения. Поэтому рекомендуется создавать дополнительные ключи и значения как можно меньшего размера.

```objc
NSDictionary *data = @{
    @"alert": @"James commented on your photo!",
    @"p": @"vmRZXZ1Dvo" // Photo's object id
};
PFPush *push = [[PFPush alloc] init];
[push setQuery:photoOwnerQuery];
[push setData:data];
[push sendPushInBackground];
```

### Отклик на информационное наполнение

Когда приложение открывается через уведомление, данные становятся доступными в методах `application:didFinishLaunchingWithOptions:` через словарь `launchOptions`.

```objc
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    . . .
    // Extract the notification data
    NSDictionary *notificationPayload = launchOptions[UIApplicationLaunchOptionsRemoteNotificationKey];
    // Create a pointer to the Photo object
    NSString *photoId = [notificationPayload objectForKey:@"p"];
    PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@"Photo"
                                      objectId:photoId];
    // Fetch photo object
    [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
        // Show photo view controller
        if (!error && [PFUser currentUser]) {
            PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];
            [self.navController pushViewController:viewController animated:YES];
        }
    }];
}
```

Если приложение уже запущено при получении уведомления, данные становятся доступными в методе `application:didReceiveRemoteNotification:fetchCompletionHandler:` через словарь `userInfo`.

```objc
- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))handler {
    // Create empty photo object
    NSString *photoId = [userInfo objectForKey:@"p"];
    PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@"Photo"
                                      objectId:photoId];
    // Fetch photo object
    [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
        // Show photo view controller
        if (error) {
            handler(UIBackgroundFetchResultFailed);
        } else if ([PFUser currentUser]) {
            PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];
            [self.navController pushViewController:viewController animated:YES];
            handler(UIBackgroundFetchResultNewData);
        } else {
            handler(UIBackgroundModeNoData);
        }
    }];
}
```

Дополнительные сведения об обработке уведомлений можно полу��ить в [Руководстве по локальному программированию и программированию уведомлений](http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/IPhoneOSClientImp/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW1) от Apple.

### Отслеживание уведомлений и запусков приложения

Для отслеживания вовлечения пользователей в течение некоторого времени и эффекта уведомлений предоставляется несколько обработчиков в классе `PFAnalytics`. Количество запусков приложения и запусков, связанных с уведомлениями, будет доступно в панели приложения.

Сначала добавьте следующий код к методу `application:didFinishLaunchingWithOptions:` для сбора сведений о времени и причине запуска приложения. Дополнительные проверки обеспечивают засчитывание события одиночного логического запуска приложения или запуска через уведомление даже при использовании расширенных функций фоновых уведомлений в iOS 7.

```objc
if (application.applicationState != UIApplicationStateBackground) {
    // Track an app open here if we launch with a push, unless
    // "content_available" was used to trigger a background push (introduced
    // in iOS 7). In that case, we skip tracking here to avoid double
    // counting the app-open.
    BOOL preBackgroundPush = ![application respondsToSelector:@selector(backgroundRefreshStatus)];
    BOOL oldPushHandlerOnly = ![self respondsToSelector:@selector(application:didReceiveRemoteNotification:fetchCompletionHandler:)];
    BOOL noPushPayload = ![launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];
    if (preBackgroundPush || oldPushHandlerOnly || noPushPayload) {
        [PFAnalytics trackAppOpenedWithLaunchOptions:launchOptions];
    }
}
```

Во-вторых, если приложение запущено или работает в фоновом режиме, метод `application:didReceiveRemoteNotification:` обрабатывает вместо этого информационное наполнение уведомления. Если пользователь выполняет действие с уведомлением, когда приложение работает в фоновом режиме, приложение станет приоритетным. Чтобы отследить подобный переход, когда приложение «открывается через уведомление», выполните еще одну дополнительную проверку перед вызовом любого кода отслеживания:

```objc
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
  if (application.applicationState == UIApplicationStateInactive) { 
    // The application was just brought from the background to the foreground, 
    // so we consider the app as having been "opened by a push notification." 
    [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];
  }
}
```

Наконец, при использовании любой новой функции уведомлений iOS 7 (включая новую функцию уведомлений «доступные материалы») также реализуйте обработчик для iOS 7:

```objc
- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
            if (application.applicationState == UIApplicationStateInactive) {
                [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];
            }
}
```

#### Отслеживание на OS X

Если приложение для OS X поддерживает получение уведомлений, и необходимо отслеживать запуск приложений по отношению к уведомлениям, добавьте обработчики к методу `application:didReceiveRemoteNotification:` (как в iOS) и следующий код к методу `applicationDidFinishLaunching:`.

```objc
- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {
    // ... other Parse setup logic here
    [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:[aNotification userInfo]];
}
```

#### Отслеживание локальных уведомлений (только для iOS)

Чтобы отслеживать аналитику локальных уведомлений, обратите внимание, что при реализации метод `application:didReceiveLocalNotification:` вызывается _в дополнение_ к методу `application:didFinishLaunchingWithOptions:`. Будьте осторожны, чтобы предотвратить отслеживание дублирующихся событий.

#### Очистка визитки

Визитку приложения обычно следует очищать при запуске приложения. Настройка свойства визитки в текущей установке обновит число значка-визитки приложения и будет гарантировать, что при следующем сохранении на сервере будет сохранено последнее значение визитки. Вам необходимо сделать следующее:

```objc
- (void)applicationDidBecomeActive:(UIApplication *)application {
    PFInstallation *currentInstallation = [PFInstallation currentInstallation];
    if (currentInstallation.badge != 0) {
        currentInstallation.badge = 0;
        [currentInstallation saveEventually];
    }
    // ... 
}
```

[Документация по UIApplicationDelegate](http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIApplicationDelegate_Protocol/Reference/Reference.html) содержит дополнительные сведения об обработчиках в жизненном цикле приложения; к наиболее подходящим обработчикам для сброса числа визитки относятся обработчики `applicationDidBecomeActive:`, `application:didFinishLaunchingWithOptions:` и `application:didReceiveRemoteNotification:`.

## Поиск и устранение неисправностей

Настройка уведомлений часто является источником проблем для разработчиков. Настройка представляет собой сложный процесс, во время которого постоянно возникают трудности. Если вы столкнулись с ними, попробуйте воспользоваться следующими советами. 

*   Убедитесь, что используется правильный идентификатор комплекта в файле `Info.plist` (как описано в шаге 4.1 [Руководства по уведомлениям для iOS](/tutorials/ios-push-notifications) под заголовком «Настройка приложения iOS с поддержкой уведомлений»).
*   Убедитесь, что настроен правильный профиль инициализации в параметрах «Проект» &gt; «Параметры сборки» (как описано в шаге 4.3 «Руководства по уведомлениям для iOS»).
*   Очистите проект и перезапустите Xcode.
*   Попробуйте повторно сгенерировать профиль инициализации, перейдя в раздел [Сертификаты, идентификаторы и профили](https://developer.apple.com/account/overview.action), изменив идентификатор приложения, установленный в профиле инициализации, и вернув настройки обратно. Будет необходимо переустановить профиль согласно описанию в шаге 2 руководства («Создание профиля инициализации») и настроить его в параметрах сборки проекта согласно описанию в шаге 4 («Настройка приложения iOS с поддержкой уведомлений»).
*   Откройте Xcode Organizer и удалите с компьютера и устройства iOS все профили инициализации, у которых истек срок действия и которые не используются.
*   Если компилирование и запуск приложения выполняются без ошибок, но вы по-прежнему не получаете уведомления, убедитесь, что приложение имеет разрешение на получение уведомлений. Это можно проверить в параметрах `Settings > Notification >        YourAppName` устройства iOS.*   Если приложение имеет разрешение на получение уведомлений, убедитесь, что код приложения подписывается при помощи надлежащего профиля инициализации. Ес��и вы загрузили сертификат разработки уведомлений в Parse, вы будете получать уведомления, только если приложение будет создано при помощи профиля инициализации для разработки. Если вы загрузили сертификат разработки уведомлений, необходимо подписать приложение при помощи профиля инициализации для дистрибуции. Профиль Ad Hoc и профиль инициализации для дистрибуции в App Store оба должны работать, когда приложение настроено при помощи сертификата разработки уведомлений.
*   При включении уведомлений для существующего идентификатора приложения на портале инициализации Apple iOS обязательно повторно сгенерируйте профиль инициализации, а затем добавьте обновленный профиль в Xcode Organizer.
*   Уведомления дистрибуции должны быть включены перед размещением приложения на App Store. Убедитесь перед размещением приложения, что были выполнены условия раздела 7 «Подготовка для App Store». Если любой из этих шагов был пропущен, возможно потребуется отправить новые бинарные данные в App Store.
*   Повторно убедитесь, что приложение может получать уведомления дистрибуции при входе с профилем Ad Hoc. Эта конфигурация является самой приближенной к той, которую можно получить от приложения, инициализированного на App Store.
*   Проверьте количество получателей в консоли уведомлений Parse. Совпадает ли это количество с ожидаемым количеством получателей? Возможно, уведомления неправильно таргетированы.
