# ユーザーインターフェイス

アプリのユーザーが触れるのは、結局のところAndroidのUIコンポーネントです。Parseデータを使いやすくするため、一般的なUIウィジェットのサブクラスが用意されています。

## ParseQueryAdapter

データの集合を表示するためには、`Adapter`の実装が提供されています。`ParseQueryAdapter`は、オブジェクトの静的な配列を用いる基礎的な`ListAdapter`を使用しません。代わりに、さまざまなレベルの抽象化を提供し、選択した`AdapterView`（`ListView`や`GridView`など）のParseクラスの1つを簡単に表示できます。

`Activity`のデータの表示に`ParseQueryAdapter`を使用するには、`Activity`の`onCreate`で、以下の手順に従います。

1.  `ParseQueryAdapter`をインスタンス化します。
<li>必要に応じて、カスタマイズします（特定のクエリからのデータの表示や、表示する`View`のUIの変更などの手順の詳細は、以下の項を参照してください）。
2.  `setAdapter()`を使って、`AdapterView`に新しい`Adapter`を設定します。

AdapterViewがウィンドウにアタッチされると、`ParseQueryAdapter`が自動的に最初のデータセットをフェッチします。このサブクラスにより、コードがシンプルになります。このサブクラスがない場合、以下の処理が必要になります。

1.  ページネーション。次のページを読み込むためにタップする行も必要です。
2.  行内における画像のダウンロードと表示。設定も可能です。
3.  Parseオブジェクト配列の自動読込みと管理。
4.  データサイクルの主要イベントからのコールバック。

`ListView`データの表示を行う非常にシンプルな`ParseQueryAdapter`を設定する、以下のコードを見てみましょう。ほぼそのままで、多くのデータを表示する、使える`ListView`ができあがります。

```java
// Inside an Activity
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    // Uses a layout with a ListView (id: "listview"), which uses our Adapter.
    setContentView(R.layout.main);
    ParseQueryAdapter<ParseObject> adapter = new ParseQueryAdapter<ParseObject>(this, "Instrument");
    adapter.setTextKey("name");
    adapter.setImageKey("photo");
    ListView listView = (ListView) findViewById(R.id.listview);
    listView.setAdapter(adapter);
}
```

このビューでは、Instrumentsのリストがアルファベット順に表示されます。このコードでは、多くの処理が記述されていないことに注目してください。順序に従った結果ページのフェッチ、後ろにあるデータ配列の手動更新や維持、バックグラウンドでの画像のダウンロードおよびUIウィジェットへの画像データの設定、および結果の次ページを読み込むトリガとなるタッチイベントの各処理のロジックはスキップ可能です。

`ParseQueryAdapter`は、どのデータを使用し、それをどう表示し、読み込み前後に何を行うかをカスタマイズできるよう設定できます。ニーズを満たすために何ができるのか、またそのために`ParseQueryAdapter`を調整する方法については、以下でさらに説明します。


### クエリのカスタマイズ

デフォルトでは、最もシンプルな`ParseQueryAdapter`コンストラクタは`Context`とParseクラス名を取ります。それから、そのクラスのあらゆる`ParseObject`が`createdAt`タイプスタンプ順にフェッチされます。

この動作を変更するために、`ArrayAdapter`の機能を採用しました。ただし、`ParseQueryAdapter`は、単純にアダプタで表示するオブジェクトのリストをとるだけでなく、アプリ開発者が定義した`ParseQuery`を返す`QueryFactory`クラスもとることができます。コンストラクタにそれを渡すと、次にアダプタはそのクエリを使ってどのオブジェクトをフェッチして表示するかを判定します。

以下に示す例では、メンバーが4人以上のパンクまたはメタルバンドを、レコード売り上げ枚数順に並べて表示する`ParseQueryAdapter`を設定します。

```java
ParseQueryAdapter<ParseObject> adapter =
    new ParseQueryAdapter<ParseObject>(this, new ParseQueryAdapter.QueryFactory<ParseObject>() {
        public ParseQuery<ParseObject> create() {
            // Here we can configure a ParseQuery to our heart's desire.
            ParseQuery query = new ParseQuery("Band");
            query.whereContainedIn("genre", Arrays.asList({ "Punk", "Metal" }));
            query.whereGreaterThanOrEqualTo("memberCount", 4);
            query.orderByDescending("albumsSoldCount");
            return query;
        }
    });
```

### 行のカスタマイズ

`AdapterView`における各`View`のレイアウトは、`ParseImageView`と`TextView`を使用したシンプルな`LinearLayout`です。`setTextKey(String)`を`ParseQueryAdapter`とあわせて使用する場合、パラメータは`TextView`で`ParseObject`のどのキーを表示するかを選択するのに使用されます。同様に、`setImageKey(String)`を使用する場合、パラメータはImageViewでどの画像を表示するかを決定するのに使用されます。

行をカスタマイズする方法の1つは、`getItemView(ParseObject, View, ViewGroup)`または`getNextPageView(View, ViewGroup)`をオーバーライドし、スーパークラスにおける適切なメソッドの実装を呼び出して処理を行わせることです。スーパークラスの実装に自分でレイアウトを提供している場合、`getItemView(ParseObject, View, ViewGroup)`と`getNextPageView(View, ViewGroup)`には以下のものが必要であることを覚えておいてください。`TextView`（id:`android.R.id.text1`）（`textKey`を設定している場合）、または`ParseImageView`（id:`android.R.id.icon`）（`imageKey`を設定している場合）。

次の例では、以下を使用して独自のレイアウトを拡大して設定しています。`TextView`、`ParseImageView`、および追加の&quot;description&quot; `TextView`（id:`R.id.description`）。

```java
@Override
public View getItemView(ParseObject object, View v, ViewGroup parent) 
    if (v == null) {
        v = View.inflate(getContext(), R.layout.adapter_item, null);
    }
    // Take advantage of ParseQueryAdapter's getItemView logic for
    // populating the main TextView/ImageView.
    // The IDs in your custom layout must match what ParseQueryAdapter expects
    // if it will be populating a TextView or ImageView for you.
    super.getItemView(object, v, parent);
    // Do additional configuration before returning the View.
    TextView descriptionView = (TextView) v.findViewById(R.id.description);
    descriptionView.setText(object.getString("description"));
    return v;
}
```

行をカスタマイズするもう1つの方法は、`ParseQueryAdapter`のメソッドをオーバーライドしてサブクラスの実装をすべて無視し、行の表示方法を完全に制御することです。以下の例では、項目をシンプルな行で表示し、色は`ParseObject`で定義します。

```java
@Override
public View getItemView(ParseObject object, View v, ViewGroup parent) {
    if (v == null) {
        v = View.inflate(getContext(), R.layout.adapter_item, null);
    }
    v.setBackgroundColor(object.getInt("color"));
    return v;
}

@Override
public View getNextPageView(View v, ViewGroup parent) {
    if (v == null) {
        // R.layout.adapter_next_page contains an ImageView with a custom graphic
        // and a TextView.
        v = View.inflate(getContext(), R.layout.adapter_next_page, null);
    }
    TextView textView = (TextView) v.findViewById(R.id.nextPageTextViewId);
    textView.setText("Loaded " + getCount() + " rows. Get more!");
    return v;
}
```

### 行へのリモート画像の読み込み

`ParseQueryAdapter` を使うと、シンプルな処理でリモート画像を表示できます。`setImageKey(String)`を呼び出すと、`ParseObject`のキー名を渡すことができます。このキーには、Parseからフェッチして、該当する`ParseImageView`の行に表示するための画像を格納した、`ParseFile`が含まれています。

画像は非同期的にダウンロードされ、適切な`ParseImageView`がバックグラウンドで更新されます。ユーザーがスクロールして行がアダプタによってリサイクルされると、行が見えて`ParseObject`が割り当てられるのにしたがって、画像がフェッチされます。

イメージのフェッチが完了する前に表示されるプレースホルダーの画像を指定することもできます。指定した`Drawable`をフォールバック画像として使用するには、`ParseQueryAdapter`で`setPlaceholder(Drawable)`を呼び出します。

### ライフサイクルメソッド

カスタムロジックを実行できるよう、アダプタのライフサイクルには2つのフックが用意されています。1つはParseにデータのクエリを実施する直前、もう1つはクエリによってフェッチされたオブジェクトが読み込まれた直後です。これらのメソッドは、読み込みUIの切り替えに特に便利です。

`OnQueryLoadListener`は`setOnQueryLoadListener(OnQueryLoadListener)`経由で設定できます。この実装のためには、`onLoading()`および`onLoaded(List<ParseObject>, Exception)`メソッドが用意されています。

### ページネーション

ページネーションを行うことにより、一度に1ページ分だけオブジェクトが読み込まれるようにします。1ページに読み込むオブジェクトの数は、`setObjectsPerPage(int)`を呼び出すことで設定できます。

クエリはページネーションを適用できるよう自動的に調整され、ページ切り替え操作用の行が`AdapterView`の下部に表示されます。

ページネーションはデフォルトで有効になっています。無効にするには、`setPaginationEnabled(false)`を呼び出します。ページネーションが無効の場合、`ParseQueryAdapter`はデフォルトで`ParseQuery`の結果に100件までという制限をかけます。

### データの自動読み込み

`ParseQueryAdapter`が設定されている`AdapterView`がウィンドウにアタッチされると、`ParseQueryAdapter`の`loadObjects()`が自動的に呼び出され、結果の最初のページがフェッチされます。この動作を無効にするには（データのフェッチを遅らせるため、カスタムロジックを事前に読み込むため、など）、`setAutoload(false)`を呼び出します。自動読み込みが無効になっている場合は、`loadObjects()`を手動で呼び出します。
