# Cloud Code

## 什么是 Cloud Code？

Parse 的愿景是让开发者摆脱服务器，随心所欲地开发各种移动应用程序。对于比较复杂的应用程序，开发者有时需要不在移动设备上运行的逻辑。Cloud Code 正好可以实现这一目标。

Cloud Code 的基础是 JavaScript SDK（后者支持着成千上万的应用程序），因而非常易于使用。它们之间唯一的区别在于 Cloud Code 是在 Parse 云中运行，而非在移动设备上运行。当您更新 Cloud Code 时，相关更新内容便可即刻向所有移动环境提供，让您无需等待应用程序新版发布。这不仅可以让您快速改变应用程序的运作，还可以更加快捷地添加新功能。

即便您只熟悉移动应用程序开发，我们仍希望 Cloud Code 能够带给您直观便捷的使用体验。

## 入门

您需要在用于开发应用程序的计算机上安装 Parse 的命令行工具，才能对 Parse 云中的代码进行管理。

### 安装或更新命令行工具 (Mac/Linux)

在 Mac OS 和 Linux/Unix 环境下，可通过运行这条命令获得 parse 工具：

```bash
curl -s https://www.parse.com/downloads/cloud_code/installer.sh | sudo /bin/bash
```

此操作将在 `/usr/local/bin/parse` 中安装&ldquo;parse&rdquo;工具。安装时不会产生其他垃圾文件，卸载时只需直接删除该文件即可。如果您已经安装 Parse 工具，此操作也能更新该命令行工具。

### 安装命令行工具 (Windows)

[点击此处](/downloads/windows/console/parse.zip)即可下载 Windows 版 Parse 命令行工具。下载并解压压缩文件后，双击 ParseConsole.exe 文件即可启动关于 Parse 的 PowerShell 会话。首次运行 ParseConsole 后，您也可以通过按 Win + R 快捷键并输入&ldquo;parse&rdquo;来启动 PowerShell 会话。

### 设置 Cloud Code

下一步是创建目录，用以存储在 Parse 云中运行的代码。通过命令 `parse new` 即可创建目录，系统会提示您选择为哪个应用程序创建 Cloud Code：

```bash
$ parse new MyCloudCode
Email: ninja@gmail.com
Password:
1:MyApp
Select an App: 1
$ cd MyCloudCode
```

使用您的 Parse 帐户的电子邮箱和密码进行登录。如果您是通过 OAuth 注册且从未设置密码，则应立即通过帐户设置创建密码。此操作将在当前目录中创建一个名为 `MyCloudCode` 的目录。系统会自动为您创建多个文件：

```bash
-config/
  global.json
-cloud/
  main.js
-public/
  index.html
```

`config` 目录中包含 JSON 配置文件（通常无需进行处理）；`cloud` 目录中存储的是您的 Cloud Code；`public` 目录中保存的是您想在 Parse 中托管的各种静态内容。而在 `cloud` 目录中，您通常只需编辑 `main.js` － 其中包含所有 Cloud Code 函数。您目前只需检查这些文件是否已创建成功。如果您使用版本控制，这时候可以导入所有这些文件。

### 简单函数

按照传统，我们看看如何在 Parse 云中运行尽可能简单的函数。查看 `cloud/main.js` 可看到一个返回字符串的示例函数：

```js
Parse.Cloud.define("hello", function(request, response) {
  response.success("Hello world!");
});
```

要从您的设备上部署代码至 Parse 云，请运行：

```bash
$ parse deploy
```

要在部署后运行此函数，请运行：

```common-java
ParseCloud.callFunctionInBackground("hello", new HashMap<String, Object>(), new FunctionCallback<String>() {
  void done(String result, ParseException e) {
    if (e == null) {
      // result is "Hello world!"
    }
  }
});
```
```common-objc
[PFCloud callFunctionInBackground:@"hello"
                   withParameters:@{}
                            block:^(NSString *result, NSError *error) {
   if (!error) {
     // result is @"Hello world!"
   }
}];
```
```common-swift
// no swift example
```
```common-php
// no php example
```
```common-csharp
var result = await ParseCloud.CallFunctionAsync<IDictionary<string, object>>("hello", new Dictionary<string, object>());
// result is "Hello world!"
```
```common-js
Parse.Cloud.run('hello', {}, {
  success: function(result) {
    // result is 'Hello world!'
  },
  error: function(error) {
  }
});
```

您应看到以下回复：

```json
{ "result": "Hello world!" }
```

恭喜！您已成功部署和运行 Cloud Code。

现在您可以熟悉部署循环。尝试将 `"Hello world!"` 更改为不同的字符串，然后再次部署和运行函数以获得不同的结果。Cloud Code 中可使用完整的 JavaScript SDK，因此您可以进行许多操作。下面详细介绍几个示例。

## 云函数

让我们看一个更复杂的示例，了解 Cloud Code 的强大功能。使用云计算的原因之一便是，当您只想要少量信息时，无需向设备发送大量对象列表。例如，假设您正在开发一款影评应用程序。单个 `Review` 对象可能像这样：

```json
{ 
  "movie": "The Matrix",
  "stars": 5,
  "comment": "Too bad they never made any sequels."
}
```

如果您想知道《黑客帝国》平均得到的评星数量，则可以在设备上查询所有影评，再计算平均的评星数量。但是，如果您只需一个数字，这样操作会消耗大量带宽。使用 Cloud Code 后，我们只需传入影片的名称，即可返回平均的星级。

云函数可接受 `request` 对象的 JSON 参数，因此我们可以用它来传入影片名称。整个 Parse JavaScript SDK 都可以在云环境中使用，因此我们可以用它来查询 `Review` 对象。整体而言，实施 `averageStars` 的代码如下所示：

```js
Parse.Cloud.define("averageStars", function(request, response) 
  var query = new Parse.Query("Review");
  query.equalTo("movie", request.params.movie);
  query.find({
    success: function(results) {
      var sum = 0;
      for (var i = 0; i < results.length; ++i) {
        sum += results[i].get("stars");
      }
      response.success(sum / results.length);
    },
    error: function() {
      response.error("movie lookup failed");
    }
  });
});
```

使用 `averageStars` 和 `hello` 的唯一区别在于，必须提供调用云函数时在 `request.params.movie` 中访问的参数。请继续参阅本文档了解关于调用云函数的更多信息。

### 调用云函数

云函数可从任意客户端 SDK 调用，也可通过 REST API（使用下方示例中的下拉菜单切换 SDK）调用。例如，要调用名称为 `averageStars` 且含有 `movie` 参数的云函数：

```common-java
HashMap<String, Object> params = new HashMap<String, Object>();
params.put("movie", "The Matrix");
ParseCloud.callFunctionInBackground("averageStars", params, new FunctionCallback<Float>() {
   void done(Float ratings, ParseException e) {
       if (e == null) {
          // ratings is 4.5
       }
   }
});
```
```common-objc
[PFCloud callFunctionInBackground:@"averageStars"
                   withParameters:@{@"movie": @"The Matrix"}
                            block:^(NSNumber *ratings, NSError *error) {
  if (!error) {
     // ratings is 4.5
  }
}];
```
```common-swift
// no swift example
```
```common-php
// no php example
```
```common-csharp
IDictionary<string, object> params = new Dictionary<string, object>
{
    { "movie", "The Matrix" }
};
var result = await ParseCloud.CallFunctionAsync<IDictionary<string, object>>("averageStars", params);
```
```common-js
Parse.Cloud.run('averageStars', { movie: 'The Matrix' }, {
  success: function(ratings) {
    // ratings should be 4.5
  },
  error: function(error) {
  }
});
```

通常来说，两个参数将被传入云函数：

1.  `request` - request 对象包含与请求相关的信息。设置以下字段：
    1.  `params` - 客户端发送至函数的参数对象。
    2.  `user` - 发出请求的 `Parse.User`。如果没有登录的用户，则无需进行此项设置。

如果函数调用成功，则客户端的回应显示为：

```json
{ "result": 4.8 }
```

如果出错，则客户端的回应显示为：

```json
{ 
  "code": 141,
  "error": "movie lookup failed"
}
```

### 保存时运行代码

在 Parse 云中运行代码的另一个原因是可以强制执行特定的数据格式。例如，您同时拥有 Android 版和 iOS 版应用程序，并想为他们验证数据。您不用分别在每个应用程序的客户端环境中编写代码，只需在 Cloud Code 中编写一次即可。

让我们以影评应用为例。当您想给某部电影星评的时候，通常只可以给 1 至 5 颗星，不能给出 -6 或 1337 颗星这样的评级。如果您想拒绝超出范围的影评，可以采用 `beforeSave` 方法：

```js
Parse.Cloud.beforeSave("Review", function(request, response) {
  if (request.object.get("stars") < 1) {
    response.error("you cannot give less than one star");
  } else if (request.object.get("stars") > 5) {
    response.error("you cannot give more than five stars");
  } else {
    response.success();
  }
});
```

如果 `response.error` 被调用，则 `Review` 对象将不会保存，客户端会收到错误提示。如果 `response.success` 被调用，则对象将正常保存。您的代码应调用这两种回调函数中的一种。

有用提示：即使您的移动应用程序有多个不同版本，均可适用相同版本的 Cloud Code。因此，如果启动的应用程序未正确检查输入数据的有效性，您仍然可以通过添加 `beforeSave` 验证修复这一问题。

如果您想在 Parse JavaScript SDK 中对某预定义的类（例如 [Parse.User](/docs/js/api/symbols/Parse.User.html)）使用 `beforeSave`，则不应为第一个参数传入字符串。相反，您应传入类别本身：

```js
Parse.Cloud.beforeSave(Parse.User, function(request, response) {
  if (!request.object.get("email")) {
    response.error("email is required for signup");
  } else {
    response.success();
  }
});
```

### 保存时修改对象

在某些情况下，您并不希望丢弃无效的数据。您可能想要对这些数据进行修改后再保存。`beforeSave` 也可以帮助您做到这一点。您只需调用已修改对象中的 `response.success` 即可。

在影评应用示例中，我们可能想要确保评论不要太冗长。单条评论如果太长，可能出现显示问题。我们可以使用 `beforeSave` 将 `comment` 字段截短至 140 个字符：

```js
Parse.Cloud.beforeSave("Review", function(request, response) {
  var comment = request.object.get("comment");
  if (comment.length > 140) {
    // Truncate and add a ...
    request.object.set("comment", comment.substring(0, 137) + "...");
  }
  response.success();
});
```

### 保存后执行操作

在某些情况下，您可能想要在保存某个对象后执行一些操作，例如推送。您可以通过使用 `afterSave` 方法来注册一个处理代码以达到此目的。例如，假设您想保持追踪某篇博客帖子的评论数量。则可以编写以下函数实现此目标：

```js
Parse.Cloud.afterSave("Comment", function(request) {
  query = new Parse.Query("Post");
  query.get(request.object.get("post").id, {
    success: function(post) {
      post.increment("comments");
      post.save();
    },
    error: function(error) {
      console.error("Got an error " + error.code + " : " + error.message);
    }
  });
});
```

处理代码终止运行（无论其终止运行的方式）后，客户端将收到对保存请求的成功回应。例如，即使处理代码出现例外情况，客户端仍将收到成功回应。您可以在 Cloud Code 日志中查看处理代码运行时出现的错误。

如果您想在 Parse JavaScript SDK 中对某预定义的类（例如 [Parse.User](/docs/js/api/symbols/Parse.User.html)）使用 `afterSave`，则不应为第一个参数传入字符串。相反，您应传入类别本身。

### 删除时运行代码

您可以在删除某个对象前运行自定义 Cloud Code。您可以用 `beforeDelete` 方法达到这个目的。例如，这可以被用来实施比 [ACL](/docs/js/api/symbols/Parse.ACL.html) 表达更成熟的限制删除政策。假设您有一款相册应用程序，每个相册中有许多相关的照片，而您想防止用户删除有照片的相册。则可以编写以下函数实现此目标：

```js
Parse.Cloud.beforeDelete("Album", function(request, response) {
  query = new Parse.Query("Photo");
  query.equalTo("album", request.object.id);
  query.count({
    success: function(count) {
      if (count > 0) {
        response.error("Can't delete album if it still has photos.");
      } else {
        response.success();
      }
    },
    error: function(error) {
      response.error("Error " + error.code + " : " + error.message + " when getting photo count.");
    }
  });
});
```

如果 `response.error` 被调用，则 `Album` 对象将不会删除，客户端会收到错误提示。如果 `response.success` 被调用，则对象将正常删除。您的代码应调用这两种回调函数中的一种。

如果您想在 Parse JavaScript SDK 中对某预定义的类（例如 [Parse.User](/docs/js/api/symbols/Parse.User.html)）使用 `beforeDelete`，则不应为第一个参数传入字符串。相反，您应传入类别本身。

### 删除后执行操作

在某些情况下，您可能想要在删除某个对象后执行一些操作，例如推送。您可以通过使用 `afterDelete` 方法来注册一个处理代码以达到此目的。例如，假设删除某篇博客帖子后，您还想删除与之相关的评论。则可以编写以下函数实现此目标：

```js
Parse.Cloud.afterDelete("Post", function(request) {
  query = new Parse.Query("Comment");
  query.equalTo("post", request.object.id);
  query.find({
    success: function(comments) {
      Parse.Object.destroyAll(comments, {
        success: function() {},
        error: function(error) {
          console.error("Error deleting related comments " + error.code + ": " + error.message);
        }
      });
    },
    error: function(error) {
      console.error("Error finding related comments " + error.code + ": " + error.message);
    }
  });
});
```

`afterDelete` 处理代码可以通过 `request.object` 访问删除的对象。此对象会被完全提取，但无法再次提取或重新保存。

处理代码终止运行（无论其终止运行的方式）后，客户端将收到对删除请求的成功回应。例如，即使处理代码出现例外情况，客户端仍将收到成功回应。您可以在 Cloud Code 日志中查看处理代码运行时出现的错误。

如果您想在 Parse JavaScript SDK 中对某预定义的类（例如 [Parse.User](/docs/js/api/symbols/Parse.User.html)）使用 `afterDelete`，则不应为第一个参数传入字符串。相反，您应传入类别本身。

### 资源限制

#### 超时

云函数运行 15 秒钟后将失效。`beforeSave`、`afterSave`、`beforeDelete` 和 `afterDelete` 函数运行 3 秒钟后将失效。如果云函数或 `beforeSave`/`afterSave`/`beforeDelete`/`afterDelete` 函数通过其他 Cloud Code 调用，则还将进一步受到调用函数剩余时间的限制。例如，`beforeSave` 函数运行 13 秒后被某个云函数触发，则 `beforeSave` 函数只有 2 秒钟运行时间，而不是正常情况下的 3 秒钟。如果您需要额外时间执行 Cloud Code 操作，请考虑使用[后台任务](#jobs)。

#### 网络请求

`success` 或 `error` 被调用后，仍在进行的网络请求将被取消。通常而言，您需要等待所有网络请求结束后再调用 `success`。对于不会调用 `success`/`error` 的 `afterSave` 函数和 `afterDelete` 函数，Cloud Code 会等待所有网络请求结束。

## 后台任务

Parse 允许您设置在后台运行的任务。对于长期运行的任务而言，后台任务非常有用，例如与响应时间较长的外部网站集成或分批发送推送通知。如果您在运行云函数时经常遇到超时错误，则可以考虑使用后台任务。

使用后台任务时需要记住几项限制条件：

*   任务运行 15 分钟后将终止。
*   应用程序可能有一项任务与其他请求并发运行，但是不能超过 20 个请求/秒的并发极限。
*   达到最大并发极限后启动的任务将被立即终止。

### 编写后台任务

编写后台任务与编写云函数类似。例如您想在向 `Parse.User` 对象添加 `plan` 字段后运行用户迁移任务。则代码应如下所示：

```js
Parse.Cloud.job("userMigration", function(request, status) 
  // Set up to modify user data
  Parse.Cloud.useMasterKey();
  var counter = 0;
  // Query for all users
  var query = new Parse.Query(Parse.User);
  query.each(function(user) {
    // Update to plan value passed in
    user.set("plan", request.params.plan);
    if (counter % 100 === 0) {
      // Set the  job's progress status
      status.message(counter + " users processed.");
    }
    counter += 1;
    return user.save();
  }).then(function() {
    // Set the job's success status
    status.success("Migration completed successfully.");
  }, function(error) {
    // Set the job's error status
    status.error("Uh oh, something went wrong.");
  });
});
```

与其他云函数一样，您需要处理成功和错误两种情形。对于后台任务，您可以在函数完成后通过调用 `status.success()` 或 `status.error()` 实现此目标。您的任务执行状态将随之设置为完成状态。如果不调用这些方法，您的任务将在 15 分钟后超时。您还可以通过调用 `status.message()` 在执行任务时设置进度消息。如果您在 `status.success()` 后调用 `status.message()`，则进度消息将被忽略。

当您部署代码后，可使用主密钥权限运行以下命令对任务进行测试：

```bash
curl -X POST \
  -H "X-Parse-Application-Id: $PARSE_APPLICATION_ID" \
  -H "X-Parse-Master-Key: $PARSE_MASTER_KEY" \
  -H "Content-Type: application/json" \
  -d '{"plan":"paid"}' \
  https://api.parse.com/1/jobs/userMigration
```

### 设置计划任务

当您部署后台任务代码后，可通过 Cloud Code 选项卡下的面板进行计划任务。已设置的计划任务窗格将列出当前所有的计划任务，并允许您添加新的计划任务。要在计划任务表中添加条目，可选择一个当前已部署的任务然后进行具体描述，包括各种必要的参数、开始时间及频率等。任务计划完成后，可通过点击&ldquo;立即运行&rdquo;来运行任务。您还可以删除计划任务表中的条目。任务状态窗格将列出任务执行的结果。您可以查看任务开始运行的时间，最新的状态消息，以及是否已经完成。

## 自定义 Webhook

您可以在 Cloud Code 中使用 [Express](http://expressjs.com/) 创建自定义 Webhook 来接收各种格式的数据。如果您编写的 Webhook 会被其他网络服务调用，则此功能非常有用。如果您需要接收非 JSON 数据，或调用您的端点的网络服务不支持发送 Parse 的 REST API 标题，则您应使用此功能，而非[云函数](#functions)。由于您的逻辑仍在 Cloud Code 中运行，因此在编写自定义 Webhook 时可以拥有 Parse JavaScript SDK 的完全访问权限。

在自定义 Webhook 中，您可以直接查看请求的标题和正文。您可以接收 JSON、表单编码或原始字节类数据，这些数据可使用您喜欢的解析工具进行解析。您还可以使用 HTTP 基本身份验证来保护 Webhook。下面是将消息保存至 Parse 云的 Webhook 示例。

```js
var express = require('express');
var app = express();

// Global app configuration section
app.use(express.bodyParser());
// Populate req.body
app.post('/notify_message',
  express.basicAuth('YOUR_USERNAME', 'YOUR_PASSWORD'),
  function(req, res) {
    // Use Parse JavaScript SDK to create a new message and save it.
    var Message = Parse.Object.extend("Message");
    var message = new Message();
    message.save({ text: req.body.text }).then(function(message) {
      res.send('Success');
    }, function(error) {
      res.status(500);
      res.send('Error');
    });
  });
app.listen();
```

上述代码使用 `express.bodyParser` 中间件来读取请求正文并填充 `req.body.text`。请注意，我们没有在全局应用配置部分写入 `app.use(express.basicAuth(…))`，因为我们只想为此端点设置 HTTP 基本身份验证，而不是为所有端点全局设置。通过这种方式，我们可以在应用程序中设置其他公开开放的端点。

要测试自定义端点，您可以运行以下命令，发送带表单编码类正文的请求。

```bash
$ curl -X POST \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d 'text=hi' http://YOUR_USERNAME:YOUR_PASSWORD@example.parseapp.com
```

如果您想访问请求正文的原始字节，则应在代码中使用 `parseExpressRawBody` 中间件，而不是 `express.bodyParser`。如果某些请求处理代码需要 JSON 解析或 www 表单编码解析，而其他处理代码需要请求的正文字节，则可以包含这两种中间件组件。

```js
var express = require('express');
var parseExpressRawBody = require('parse-express-raw-body');
var app = express();

// Global app configuration section
app.use(express.bodyParser());
app.use(parseExpressRawBody());

app.post('/receive_raw_data',
  express.basicAuth('YOUR_USERNAME', 'YOUR_PASSWORD'),
  function(req, res) {
    // If you send this endpoint JSON or www-form-encoded data, then
    // express.bodyParser will fill req.body with the corresponding data.
    // Otherwise, parseExpressRawBody will fill req.body with a Buffer
    // object containing the request body.  You can also convert this
    // Buffer to a string using req.body.toString().
  });
app.listen();
```

## 开发与产品

您可使用开发应用来试验新代码，而使用产品应用来运行您发布给大众的应用。

### 为项目添加新应用程序

您将需要把多个应用程序关联到您的项目。`parse new` 将把第一个应用程序关联到项目。要添加更多应用程序，可以运行 `parse add [alias]`，如下所示：

```bash
$ parse add production
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounterProd
2:PiecesOfEightCounterDev
Select an App: 1
```

上述示例把 `PiecesOfEightCounterProd` 应用程序关联到您的 Cloud Code 项目。它还会为新应用建立一个名为 `production` 的别名，为该应用提供一个简略称呼。

### 开发 Cloud Code

在开发新代码时，您可使用 `develop` 命令让 Parse 命令行工具持续检查您项目的更新，并将更改上传至 Cloud Code。命令类似于： 

```bash
$ parse develop development
E2013-03-19:20:17:01.423Z] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
New release is named v58 I2013-03-19T20:17:10.343Z]
Deployed v58 with triggers:
  GameScore:
    before_save
```

注意，对于 `develop` 命令，您需要明确将接收新更改推送的应用。这会避免在产品应用上意外运行 `develop`，那有可能对其部署未经测试的代码。命令行工具将上传代码更改并显示新的日志消息，直至您点击 Ctrl-C。

### 向产品部署代码

在完成测试并更新您的代码后，可将代码部署到产品，只需将产品应用作为参数传递到 `deploy` 命令即可，如下所示：

```bash
$ parse deploy production
New release is named v2
```

## Cloud Code 日志

要想将一个消息记录到 `parse log` 显示的日志文件，可使用 `console.log`、`console.error` 或 `console.warn`。`console.error` 和 `console.warn` 都将写入错误日志。

```js
Parse.Cloud.define("Logger", function(request, response) {
  console.log(request.params);
  response.success();
});
```

云函数最多可为每个请求记录 100 条消息。

## 联网

Cloud Code 允许使用 `Parse.Cloud.httpRequest` 向任意 HTTP 服务器发送 HTTP 请求。此函数使用选项对象来配置调用。每次仅限 2 个并发 `httpRequest`，其余的请求将排队等候处理。

简单的 GET 请求如下：

```js
Parse.Cloud.httpRequest({
  url: 'http://www.parse.com/',
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

对成功的 HTTP 状态代码调用 `success`；否则将调用 `error`。

### 查询参数

您可以通过设置选项对象上的 `params` 来指定附加在地址末尾的查询参数。您还可以传入键值对的 JSON 对象，代码如下：

```js
Parse.Cloud.httpRequest({
  url: 'http://www.google.com/search',
  params: {
    q : 'Sean Plott'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

 或传入原始 `String`，代码如下：

```js
Parse.Cloud.httpRequest({
  url: 'http://www.google.com/search',
  params: 'q=Sean Plott',
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

### 设置标题

您可以通过设置选项对象的 `header` 属性来发送 HTTP 标题。假设您想要设置请求的内容类型 (Content-Type)，可以：

```js
Parse.Cloud.httpRequest({
  url: 'http://www.example.com/',
  headers: {
    'Content-Type': 'application/json;charset=utf-8'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

### 发送 POST 请求

您可以通过设置选项对象的 `method` 属性来发送 POST 请求。POST 请求的正文可通过 `body` 进行设置。举一个简单的示例：

```js
Parse.Cloud.httpRequest({
  method: 'POST',
  url: 'http://www.example.com/create_post',
  body: {
    title: 'Vote for Pedro',
    body: 'If you vote for Pedro, your wildest dreams will come true'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

此代码将向 `http://www.example.com/create_post` 发送一个 POST 请求，其正文采用 URL 表单编码的 `body` 属性。如果您想使用 JSON 编码的正文，则可以：

```js
Parse.Cloud.httpRequest({
  method: 'POST',
  url: 'http://www.example.com/create_post',
  headers: {
    'Content-Type': 'application/json;charset=utf-8'
  },
  body: {
    title: 'Vote for Pedro',
    body: 'If you vote for Pedro, your wildest dreams will come true'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

为确保您的 HTTP 请求正文编码正确，请务必始终在 Content-Type 标题中包含相应字符集。

### 回应对象

传入 `success` 和 `error` 的回应对象包括：

1.  `status` - HTTP 回应状态。
<li>`headers` - 回应标题
2.  `text` - 原始回应正文。
3.  `data` - 已解析的回应（如果 Cloud Code 知道如何解析已发送的 content-type）。

## 模块

Cloud Code 支持将 JavaScript 代码分解为模块。为避免加载模块时出现不良副效应，Cloud Code 模块采取类似于 CommonJS 模块的运行方式。加载模块时，系统也会加载 JavaScript 文件、执行源代码并返回全局 `exports` 对象。例如，`cloud/name.js` 含有以下源代码：

```js
var coolNames = ['Ralph', 'Skippy', 'Chip', 'Ned', 'Scooter'];
exports.isACoolName = function(name) {
  return coolNames.indexOf(name) !== -1;
}
```

 而 `cloud/main.js` 含有：

```js
var name = require('cloud/name.js');
name.isACoolName('Fred');
// returns false
name.isACoolName('Skippy');
// returns true;
name.coolNames;
// undefined.
```

 `name` 包含名为 `isACoolName` 的函数。`require` 使用的路径与 Parse 项目的根目录相关联。只有 `cloud/` 目录中的模块才能加载。

### 云模块

云模块是将您的 Parse 应用程序与第三方服务和数据库集成的最简单的方式。云模块与 JavaScript 模块的工作原理类似，但人人都可以随时使用。请访问[云模块指南](/docs/cloud_modules_guide)了解更多详情。

## 命令行工具

我们已经了解 Parse 的命令行工具如何用来向云部署新代码。它还有其他几个有用的功能。如需安装说明，请阅读[安装工具](#started-installing)部分。

### 简介

同一个代码可部署到多个不同的应用。这方便您拥有独立的&ldquo;开发&rdquo;和&ldquo;产品&rdquo;应用。然后，您先在开发应用上测试代码，再将其用到产品应用。

添加的第一个应用（通过 `new` 命令添加）将是所有命令行操作的默认应用。除了 `new` 以外，所有命令都可选择一个应用来执行。

### 部署

要部署一个新版本，请在命令行中运行 `parse deploy`：

```bash
$ parse deploy
New release is named v1
```

这会将新代码（在 `cloud/main.js` 中）推送到 Parse 云，并将此代码部署到默认对象，该对象要么是添加的第一个应用，要么是您通过 `parse default` 设置的那个。可以通过将目标作为一个参数添加到 `deploy`，从而向该目标部署，代码如下所示：
```bash
$ parse deploy "My Other App"
New release is named v2
```
通过 `-d` 或 `--description=` 选项，您可将发行说明添加到部署中

在将 `parse deploy` 嵌入到其他脚本时（例如在自动测试/部署环境中），您可以来 Parse 命令行工具的退出代码得知命令是否成功。部署成功时显示退出代码 0，失败时显示的退出代码不为 0。

### 开发 Cloud Code

您还可以通过 `develop` 命令在开发模式运行 Parse 命令行工具。这将让工具监视源目录的任何更新，并将这些更新部署到 Parse，同时提供日志的实时流。

```bash
$ parse develop development
E2013-03-19:20:17:01.423Z] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
New release is named v58 I2013-03-19T20:17:10.343Z]
Deployed v58 with triggers:
  GameScore:
    before_save
```

不同于其他命令，在 `develop` 中，您必须指定作为更新推送对象的 Parse 应用。这是为了避免在产品应用上意外运行 develop 而导致您在产品应用上运行未经测试的代码。

### 添加新目标

通过运行 `add` 命令，您可将新的 parse 应用添加为目标。这会提示您提供 Parse.com 电子邮箱和密码，并为您提供一列应用供选择：

```bash
$ parse add
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounter
2:BootyDivider
Select an App: 1
```

`add` 命令有一个可选参数，是为应用指定的别名，可取代应用名称。

通常，所有此配置数据都会存储到 `global.json`。但是，您可能有一个用来开发但不想与团体的其他人分享的应用。您可使用 `--local` 标志来添加此配置，而不需要单独的 `local.json` 文件。这样，您可将 `global.json` 上传到版本控制，同时只将 `local.json` 保存在本机上。

### 设置默认应用

`parse deploy`、`parse log`、`parse rollback` 和 `parse releases` 都使用默认应用来执行命令。`parse default` 可用来更改此默认应用。

```bash
$ parse default MyApp
Default app set to MyApp.
$ parse default
Current default app is MyApp
```

### 回滚

您可通过 `parse rollback` 回滚版本。如同 `parse deploy` 一样，您可以指定一个版本作为参数。

```bash
$ parse rollback
Rolled back to v1
```

这会回滚到代码的前一版本。通过 `-r` 或 `--release=` 选项，您还可指定要回滚到哪个版本。

### 读取日志

Cloud Code 的每个部署、回滚和激活都会记录到日志。您可通过 `parse log` 命令检索日志结尾。共有两种类型的日志：

*   `INFO` － 包含所有内容。
*   `ERROR` － 只包含错误。

Log 命令可以加一个目标参数，同时还有两个选项：

*   `-n` － 要显示的日志行数（默认为 10）
*   `--level/-l` － 要使用的日志级别（默认为 INFO）
*   `-f` － 模仿 tail 命令 (Unix) -f

```bash
$ parse log -n 1
I2012-07-10:13:37:00] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
```

### 版本列表

您可以使用 `releases` 命令在 Parse 云中列出已知的发布版本。Parse 只追踪最近发布的 10 个版本。

### 设置 SDK 版本

此目录中用于 Cloud Code 的默认 Parse JavaScript SDK 版本是对此目录运行 `new` 命令时的最新版本。您可以使用 `parse jssdk` 对其进行更改。您不仅可以通过 `parse jssdk -a` 查看所有可用的 Parse JavaScript SDK，还可以使用 `parse jssdk` 查看当前所用的 Parse JavaScript SDK 版本。

```bash
$ parse jssdk
Current JavaScript SDK version is 1.2.13
$ parse jssdk -a
  1.2.18
  1.2.17
  1.2.16
  1.2.15
  1.2.14
* 1.2.13
  1.2.12
  1.2.11
$ parse jssdk 1.2.18
Current JavaScript SDK version is 1.2.18
$ parse jssdk -a
* 1.2.18
  1.2.17
  1.2.16
  1.2.15
  1.2.14
  1.2.13
  1.2.12
  1.2.11
```

### 更新命令行工具

您可以通过 `parse update` 更新命令行工具。它会自动为您更新到最新版 Parse 命令行工具。

```bash
$ parse update
Fetching latest version ...
######################################################################## 100%
Installing ...
```
