# 푸시 알림

푸시 알림은 사용자의 참여를 이끌어내고 앱에 대해 알리는 데 유용한 방법입니다. 전체 사용자 층에 빠르고 효과적으로 도달할 수 있습니다. 이 가이드는 푸시 알림을 보내도록 Parse를 설정하는 절차와 일반적인 사용법에 대해 안내합니다.

<div class='tip info'><div>
  현재 JavaScript SDK에서는 푸시 받기를 지원하지 않습니다. iOS 및 Android 앱에 알림을 보내는 용도로만 사용할 수 있습니다. 일반적으로는 [Cloud Code](/docs/kr/cloud_code_guide)에서 푸시 알림을 보냅니다.
</div></div>

## 푸시 설정

JavaScript SDK를 사용하여 푸시 알림을 보내는 데 설정은 필요하지 않습니다. iOS 또는 Android 클라이언트에서 푸시를 사용하도록 구성하지 않은 경우에는 맨 위에 있는 플랫폼 선택 메뉴를 사용하여 적절한 설정 지침을 확인하세요.

## 설치

푸시 알림을 받도록 등록된 기기에 설치된 모든 Parse 앱에는 연결된 `Installation` 개체가 있습니다. `Installation` 개체는 푸시 알림을 타게팅하는 데 필요한 모든 데이터를 저장하는 위치입니다. 예를 들어 야구 앱에서 사용자의 관심 팀을 저장하여 실적에 대한 업데이트를 보낼 수 있습니다.

`Installation` 데이터는 클라이언트 SDK, 데이터 브라우저 또는 REST API에서만 수정할 수 있습니다.

이 클래스에는 기기를 관리하고 타게팅하는 데 도움이 되는 특수 필드가 있습니다.

*   **`badge`**: iOS 앱용 아이콘 배지의 현재 값입니다. 서버에서 이 값에 대한 변경 사항은 이후 배지 증가 푸시 알림에 사용됩니다.
*   **`channels`**: 기기가 현재 가입된 채널의 배열입니다.
*   **`timeZone`**: 대상 기기가 위치한 지역의 현재 시간대입니다. 이 값은 기기에서 `Installation` 개체가 저장될 때마다 동기화됩니다_(읽기 전용)_.
*   **`deviceType`**: 기기 유형을 지정하며, &quot;ios&quot; 또는 &quot;android&quot;입니다_(읽기 전용)_.
*   **`installationId`**: Parse에서 사용하는 기기의 고유 ID입니다_(읽기 전용)_.
*   **`deviceToken`**: Apple에서 생성한 토큰으로 iOS 기기에 사용됩니다_(읽기 전용)_.

## 푸시 전송

Parse를 사용하여 푸시 알림을 보내는 방법에는  [채널](#sending-channels)과 [고급 타게팅](#sending-queries), 두 가지가 있습니다. 채널은 간단하고 사용하기 쉬운 푸시 전송 모델을 제공하는 반면 고급 타게팅은 보다 강력하고 유연한 모델을 제공합니다. 둘 다 서로 완전히 호환되며 이 섹션에서 다뤄집니다.

알림 전송은 주로 웹 콘솔이나 REST API, Cloud Code에서 수행됩니다. JavaScript SDK가 Cloud Code에서 사용되므로 클라우드 함수에서 푸시를 보내려면 여기에서 시작합니다. 그러나 Cloud Code 외부의 JavaScript SDK나 다른 클라이언트 SDK에서 알림을 보내려는 경우에는 Parse 앱의 Push Notifications 설정에서 **Client Push Enabled**를 설정해야 합니다.

![](/images/docs/client_push_settings.png)

### 채널 사용

알림을 보내는 가장 간단한 방법은 채널을 사용하는 것입니다. 채널을 사용하면 푸시 전송에 게시자-가입자 모델을 사용할 수 있습니다. 기기가 하나 이상의 채널에 가입하는 것으로 시작하고 나중에 가입자에게 알림이 전송될 수 있습니다. 지정된 `Installation`으로 가입된 채널은 `Installation` 개체의 `channels` 필드에 저장됩니다.

#### 채널에 가입

현재 JavaScript SDK는 푸시에 대한 iOS 및 Android 기기 가입을 지원하지 않습니다. 위쪽에 있는 플랫폼 선택 메뉴를 사용하여 iOS, Android 또는 REST 푸시 가이드를 살펴보세요.

#### 채널에 푸시 전송

JavaScript SDK에서는 다음 코드를 사용하여 &quot;Giants&quot; 및 &quot;Mets&quot; 채널의 모든 가입자에게 경기 결과를 알릴 수 있습니다. 알림을 보내면 iOS 사용자에게는 알림 센터에 알림이 표시되고 Android 사용자에게는 시스템 트레이에 알림이 표시됩니다.

```js
  Parse.Push.send({
    channels: [ "Giants", "Mets" ],
    data: {
      alert: "The Giants won against the Mets 2-3."
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

### 고급 타게팅 사용

채널은 많은 앱에 유용하지만 푸시 알림의 수신자를 좀 더 정확하게 타게팅해야 하는 경우가 있습니다. Parse에서는 [쿼리 API](#queries)를 사용하여 일부 `Installation` 개체에 대한 쿼리를 작성한 다음 푸시를 보낼 수 있습니다.

`Installation` 개체는 Parse에 저장된 다른 개체와 비슷하기 때문에 원하는 데이터를 저장하고 `Installation` 개체와 다른 개체 사이에 관계를 만들 수도 있습니다. 이렇게 하면 사용자 층의 맞춤화된 동적 세그먼트로 푸시를 보낼 수 있습니다.

#### 설치 데이터 저장

현재 JavaScript SDK에서는 `Installation` 개체 수정을 지원하지 않습니다. 위쪽에있는 플랫폼 선택 메뉴를 사용하여 iOS, Android 또는 REST 푸시 가이드를 살펴보세요.

#### 쿼리에 푸시 전송

`Installation` 개체에 데이터를 저장하고 나면 쿼리를 사용하여 일부 기기를 타게팅할 수 있습니다. `Parse.Installation` 쿼리는 다른 [Parse 쿼리](#queries)와 같은 방식으로 작동합니다.

```js
  var query = new Parse.Query(Parse.Installation);
  query.equalTo('injuryReports', true);

  Parse.Push.send({
    where: query, // Set our Installation query
    data: {
      alert: "Willie Hayes injured by own pop fly."
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

채널을 쿼리와 함께 사용할 수도 있습니다. 다음과 같이 &quot;Giants&quot; 채널의 모든 가입자에게 푸시를 보내지만 점수 업데이트를 원하는 가입자로 필터링할 수 있습니다.

```js
  var query = new Parse.Query(Parse.Installation);
  query.equalTo('channels', 'Giants'); // Set our channel
  query.equalTo('scores', true);

  Parse.Push.send({
    where: query,
    data: {
      alert: "Giants scored against the A's! It's now 2-2."
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

`Installation` 클래스의 다른 개체에 관계를 저장하는 경우 쿼리에서 이를 사용할 수 있습니다. 예를 들어 다음과 같이 지정된 위치 근처의 모든 사용자에게 푸시 알림을 보낼 수 있습니다.

```js
  // Find users near a given location
  var userQuery = new Parse.Query(Parse.User);
  userQuery.withinMiles("location", stadiumLocation, 1.0);

  // Find devices associated with these users
  var pushQuery = new Parse.Query(Parse.Installation);
  pushQuery.matchesQuery('user', userQuery);
  // Send push notification to query
  Parse.Push.send({
    where: pushQuery,
    data: {
      alert: "Free hotdogs at the Parse concession stand!"
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

## 전송 옵션

푸시 알림은 단순히 메시지를 전송하는 일 외에 더 많은 것을 할 수 있습니다. iOS에서 푸시는 재생할 사운드와 표시할 배지 번호뿐 아니라 보내려는 모든 맞춤 데이터를 포함할 수 있습니다. Android에서는 알림을 받으면 `Intent`를 시작하게 지정할 수도 있습니다. 또한 시간에 민감한 경우 알림에 만기일을 설정할 수 있습니다.

### 알림 사용자 지정

메시지뿐 아니라 더 많은 것을 보내려는 경우에는 `data` 딕셔너리에서 다른 필드를 설정할 수 있습니다. 다음과 같이 특별한 의미가 있는 예약된 필드가 있습니다.

*   **`alert`**: 알림 메시지입니다.
*   **`badge`**: _(iOS에만 해당)_ 앱 아이콘의 오른쪽 상단에 표시되는 값입니다. 이 필드를 값에 설정하거나, `Increment`에 설정하여 현재 값을 1씩 증가시킬 수 있습니다.
*   **`sound`**: _(iOS에만 해당)_ 앱 번들에 있는 사운드 파일의 이름입니다.
*   **`content-available`**: _(iOS에만 해당)_ [뉴스스탠드](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html) 앱이나 [iOS7에 도입된](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10) 원격 알림 백그라운드 모드(&quot;백그라운드 푸시&quot;라고도 함)를 사용하는 앱을 작성하는 경우 이 값을 1로 설정하여 백그라운드 다운로드를 트리거할 수 있습니다.
*   **`action`**: _(Android에만 해당)_ 푸시를 받으면 `Intent`가 시작됩니다. `title` 또는 `alert` 값을 지정하지 않으면 `Intent`가 시작되지만 사용자에게 알림이 표시되지 않습니다.
*   **`title`**: _(Android만 해당)_ Android 시스템 트레이 알림에 표시되는 값입니다.

예를 들어 현재 배지 번호가 1씩 증가하고 iOS 기기에서는 사용자 지정 사운드를 재생하고 Android 사용자에게는 특정 제목을 표시하는 알림을 보내려면 다음과 같이 할 수 있습니다.

```js
  Parse.Push.send({
    channels: [ "Mets" ],
    data: {
      alert: "The Mets scored! The game is now tied 1-1.",
      badge: "Increment",
      sound: "cheering.caf",
      title: "Mets Score!"
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

이 딕셔너리에 자신만의 데이터를 지정할 수도 있습니다. iOS 및 Android의 알림 수신 섹션에서 설명한 것처럼, iOS에서는 사용자가 알림을 통해 앱을 연 경우에만 이 데이터에 접근할 수 있고 Android에서는 지정된 `Intent`에서 이 데이터를 제공합니다.

```js
  var query = new Parse.Query(Parse.Installation);
  query.equalTo('channels', 'Indians');
  query.equalTo('injuryReports', true);
  Parse.Push.send({
    where: query,
    data: {
      action: "com.example.UPDATE_STATUS",
      alert: "Ricky Vaughn was injured in last night's game!",
      name: "Vaughn",
      newsItem: "Man bites dog"
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

### 만기일 설정

사용자의 기기가 꺼져있거나 인터넷에 연결되어 있지 않을 때에는 푸시 알림이 전달되지 않습니다. 시간에 민감한 알림이 있는 경우 만기일을 설정할 수 있습니다. 이렇게 하면 더 이상 관련이 없는 정보를 불필요하게 사용자에게 알리지 않습니다.

Parse에서 제공하는 두 가지 매개변수로 알림에 만기일을 설정할 수 있습니다. 첫 번째는 `expiration_time`이며 Parse에서 알림 전송을 중지해야 할 때를 지정하는 `Date`를 사용합니다. 지금으로부터 정확하게 1주 후에 알림이 만료되게 하려면 다음을 사용할 수 있습니다.

```js
var oneWeekAway = new Date(...);

Parse.Push.send({
  where: everyoneQuery,
  expiration_time: oneWeekAway,
  data: {
    alert: "Season tickets on sale until next week!"
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

또는 `expiration_interval` 매개변수를 사용하여 알림이 만료될 때까지의 기간을 지정할 수 있습니다. 이 값은 [알림 예약](#scheduled)에 사용되는 `push_time` 매개변수에 상대적인 값입니다. 즉, 1일 이내에 보내도록 예약되어 있고 만료 기간이 6일인 푸시 알림은 지금으로부터 최대 1주일까지 받을 수 있습니다.

```js
var oneDayAway = new Date(...);
var sixDaysAwayEpoch = (new Date(...)).getTime();

Parse.Push.send({
  push_time: oneDayAway,
  expiration_interval: sixDaysAwayEpoch,
  data: {
    alert: "Season tickets on sale until next week!"
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

### 플랫폼별 타게팅

플랫폼 간 앱을 빌드하는 경우 iOS 또는 Android 기기만 타게팅할 수 있습니다. 타게팅할 기기를 필터링하는 데 사용되는 메서드는 두 가지입니다. 기본적으로는 두 플랫폼을 모두 타게팅합니다.

다음 예에서는 Android와 iOS 사용자에게 서로 다른 알림을 보냅니다.

```js
  // Notification for Android users
  var query = new Parse.Query(Parse.Installation);
  query.equalTo('deviceType', 'android');
  Parse.Push.send({
    where: query,
    data: {
      alert: "Your suitcase has been filled with tiny robots!"
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
  // Notification for iOS users
  var query = new Parse.Query(Parse.Installation);
  query.equalTo('deviceType', 'ios');
  Parse.Push.send({
    where: query,
    data: {
      alert: "Your suitcase has been filled with tiny apples!"
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

## 푸시 예약

`push_time`을 지정하여 푸시 시간을 미리 예약할 수 있습니다. 예를 들어 사용자가 UTC로 12PM 정오에 게임 알림을 예약하는 경우에는 다음을 보내서 푸시 알림을 예약할 수 있습니다.

```js
var tomorrowDate = new Date(...);

var query = new Parse.Query(Parse.Installation);
query.equalTo('user_id', 'user_123');

Parse.Push.send({
  where: query,
  data: {
    alert: "You previously created a reminder for the game today" 
  },
  push_time: tomorrowDate
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

`expiration_interval`도 지정하는 경우에는 푸시를 제출한 시간이 아닌 예약된 푸시 시간을 기준으로 계산됩니다. 1주 내에 보내도록 예약되어 있고 만료 기간이 하루인 푸시는 요청을 보낸 후 8일이 지나면 만료됩니다.

이미 지난 시간은 예약할 수 없으며, 앞으로 최대 2주까지 예약할 수 있습니다. 위 예와 같이 날짜, 시간, 시간대를 표시한 ISO 8601 날짜로 지정할 수도 있고, 초 단위로 UNIX epoch 시간을 표시한 숫자 값(UTC)으로 지정할 수도 있습니다. UTC 시간으로 08/22/2015 정오에 알림을 예약하려면 `push_time`을 `2015-08-022T12:00:00.000Z` 또는 `1440226800000` 으로 설정할 수 있습니다.

## 푸시 수신

현재 JavaScript SDK에서는 푸시 받기를 지원하지 않습니다.  플랫폼별 가이드에서 iOS 및 Android 기기의 푸시 알림 수신에 대한 내용을 참조하세요.

