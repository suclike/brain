# Роли

По мере увеличения масштабов и базы пользователей приложения вам может понадобиться более широкий контроль над доступом к участкам данных, чем могут предоставить связанные с пользователями ACL. Для обеспечения этого требования Parse поддерживает форму [управления доступом на основе ролей](http://en.wikipedia.org/wiki/Role-based_access_control). Роли обеспечивают логическую группировку пользователей с основными правами доступа к данным Parse. Роли являются проименованными объектами, которые включают пользователей и другие роли.  Любое разрешение, предоставленное для роли, косвенным образом предоставляется всем пользователям этой роли, а также пользователям всех ролей, которые она содержит.

Например, в приложении с отобранными материалами может быть определенное количество пользователей с ролью «Модераторы», которые могут изменять и удалять материалы, созданные другими пользователями.  Также может быть группа пользователей с ролью «Администраторы», которые имеют такие же права, как и Модераторы, но также могут изменять глобальные параметры приложения. Добавлением пользователям этих ролей обеспечивается предоставление новым пользователям роли модератора или администратора без необходимости вручную предоставлять права для каждого ресурса каждому пользователю.

Предоставляется специальный класс под названием `Parse.Role`, который представляет эти объекты-роли в коде клиента. `Parse.Role` &mdash; это подкласс объекта `Parse.Object`, который имеет такие же функции, например гибкую схему, автоматическое сохранение и интерфейс значений ключа.  Все методы, существующие для класса `Parse.Object`, также существуют для класса `Parse.Role`.  Разница заключается в том, что класс `Parse.Role` имеет специальные дополнения, специфические для управления ролями.

## Свойства

Класс `Parse.Role` имеет свойства, которые отличают его от класса `Parse.Object`:

*   name: имя роли.  Это обязательное значение, которое можно установить только один раз при создании роли.  Имя должно состоять из цифр, букв, пробелов, дефисов (-) или подчеркиваний (_).  Это имя будет использоваться для определения роли без указания ее идентификатора objectId.
*   users: [связь](#objects-pointers) с набором пользователей, которые унаследуют разрешения, предоставленные для роли.
*   roles: [связь](#objects-pointers) с набором ролей, для которых связанные пользователи и роли унаследуют разрешения, предоставленные роли.

## Безопасность объектов роли

Класс `Parse.Role` использует такую же схему безопасности (ACL), как и все другие объекты Parse, кроме того, что для этого класса ACL должно быть настроено явным образом. Как правило, только пользователи с повышенным уровнем доступа (например, администратор) должны иметь возможность создавать или изменять роли, поэтому следует соответствующим образом определить ACL для них.  Помните, что при предоставлении пользователю доступа с правом записи для роли `Parse.Role` этот пользователь может добавлять других пользователей для этой роли или полностью ее удалить.

Чтобы написать новую роль `Parse.Role`, следует написать такой код:

```js
// By specifying no write privileges for the ACL, we can ensure the role cannot be altered.
var roleACL = new Parse.ACL();
roleACL.setPublicReadAccess(true);
var role = new Parse.Role("Administrator", roleACL);
role.save();
```

Можно добавлять пользователей и роли, которые унаследуют новые разрешения для роли через связи &quot;users&quot; («пользователи») и &quot;roles&quot; («роли») для роли `Parse.Role`:

```js
var role = new Parse.Role(roleName, roleACL);
for (var i = 0; i < usersToAddToRole.length; i++) {
  role.getUsers().add(usersToAddToRole[i]);
}
for (var i = 0; i < rolesToAddToRole.length; i++) {
  role.getRoles().add(rolesToAddToRole[i]);
}
role.save();
```

Будьте особенно внимательны при назначении ACL ролям, чтобы роли могли изменяться только теми пользователями, которые должны иметь разрешение на их изменение.

## Безопасность других объектов

После создания набора ролей для приложения их можно использовать с ACL для определения прав, которые получат соответствующие пользователи. Каждый объект `Parse.Object` может указать класс `Parse.ACL`, который предоставляет список управления доступом, указывающий на то, какие пользователи и роли должны получить доступ с правом чтения или записи для объекта.

Предоставить роли разрешения на чтение или запись для объекта нетрудно.  Также можно воспользоваться классом `Parse.Role`:

```js
var moderators = /* Query for some Parse.Role */;
var wallPost = new Parse.Object("WallPost"); 
var postACL = new Parse.ACL();
postACL.setRoleWriteAccess(moderators, true);
wallPost.setACL(postACL);
wallPost.save();
```

Можно не выполнять запрос на роль, указав ее имя в ACL:

```js
var wallPost = new Parse.Object("WallPost");
var postACL = new Parse.ACL();
postACL.setRoleWriteAccess("Moderators", true);
wallPost.setACL(postACL);
wallPost.save();
```

## Иерархия ролей

Как описано выше, одна роль может содержать другую, устанавливая иерархическую связь между двумя ролями. Последствием этой связи является то, что любое разрешение, предоставленное родительской роли, косвенным образом предоставляется всем дочерним ролям.

Такие типы связей можно найти в приложениях с материалами, управляемыми пользователями, например на форумах. Небольшой подкласс пользователей «Администраторы» имеет наивысший уровень доступа с возможностью изменения параметров приложения, создания новых форумов, настройки глобальных сообщений и т.д. Другой подкласс пользователей «Модераторы» ответственен за обеспечение соответствия нормам материалов, создаваемых пользователями. Любой пользователь с правами администратора должен также иметь права модератора. Чтобы установить эту связь, необходимо сделать роль «Администраторы» дочерней ролью роли «Модераторы» следующим образом:

```js
var administrators = /* Your "Administrators" role */;
var moderators = /* Your "Moderators" role */;
moderators.getRoles().add(administrators);
moderators.save();
```
