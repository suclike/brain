# 사용자 인터페이스

앱 사용자들은 하루가 끝날 때 UIKit 구성 요소와 상호 작용합니다. Parse에서는 `%{ParseUser}` 로그인/가입과 `%{ParseObject}` 표시를 쉽게 수행할 수 있는 `UIViewController` 하위 클래스를 몇 개 제공합니다.

## PFLogInViewController

Parse를 사용하여 모바일 앱에서 사용자를 관리하고 있다면 이미 `%{ParseUser}` 클래스에 익숙할 것입니다. 앱에서 원하는 지점에 `%{ParseUser}` 로그인 화면을 표시할 수 있습니다.  Parse에는 여기에 사용되는 보기 컨트롤러가 있습니다.

<div class='tip info'><div>
  [로그인 및 가입 보기 사용에 관한 튜토리얼](/tutorials/login-and-signup-views)에는 사용자 지정한 후 `%{ParseUser}`를 사용하는 앱에 삽입할 수 있는 기본 제공 보기가 있습니다.
</div></div>

`PFLogInViewController` 클래스를 사용하여 보기를 인스턴스화한 후 모달 방식으로 표시합니다.

```objc
PFLogInViewController *logInController = [[PFLogInViewController alloc] init];
logInController.delegate = self;
[self presentModalViewController:logInController animated:YES];
```

이렇게만 하면 작동하는 로그인 화면을 표시할 수 있습니다.

### 로그인 요소 구성

![](/images/docs/login_diagram.png)

`PFLogInViewController`는 다양한 로그인 옵션을 제공하도록 구성할 수 있습니다. 기본적으로 `PFLogInViewController`에서는 다음 UI를 표시합니다.

*   사용자 이름 및 비밀번호 필드
*   비밀번호 잊음 버튼
*   로그인 버튼
*   가입 버튼
*   무시 버튼

위 기능은 모두 켜고 끌 수 있습니다. `PFLogInViewController`에 `fields` 속성을 사용하면 옵션을 설정할 수 있습니다.

```objc
logInController.fields = PFLogInFieldsUsernameAndPassword
                         | PFLogInFieldsLogInButton
                         | PFLogInFieldsSignUpButton
                         | PFLogInFieldsPasswordForgotten
                         | PFLogInFieldsDismissButton;
```

기본적으로 비트 OR 연산자(`|`)를 사용하여 로그인 화면에 포함할 모든 옵션을 연결하고 `fields`에 값을 할당합니다.

그리고 다음과 같이 켤 수 있는 다른 옵션도 많습니다.

*   Facebook 버튼
*   Twitter 버튼

마찬가지로 Facebook이나 Twitter 로그인 기능도 켤 수 있습니다.

```objc     logInController.fields = PFLogInFieldsUsernameAndPassword          | PFLogInFieldsFacebook         | PFLogInFieldsTwitter;```

위의 코드를 사용하면 사용자 이름, 비밀번호, Facebook, Twitter 버튼이 포함된 로그인 화면이 생성됩니다. Facebook 로그인 권한은 `facebookPermissions`를 통해 설정할 수 있습니다.

```objc
PFLogInViewController *logInController = [[PFLogInViewController alloc] init];
logInController.delegate = self;
logInController.facebookPermissions = @[@"friends_about_me"];
[self presentModalViewController:logInController animated:YES];
```

### 로그인 성공, 실패, 취소에 응답

사용자가 로그인하거나 로그인을 취소하면 `PFLogInViewController`에서 델리게이트에게 이벤트를 알립니다. 이 콜백을 받으면 델리게이트가 최소한 `PFLogInViewController`를 무시해야 합니다. 또한 델리게이트는 보기를 업데이트하거나 `%{ParseUser}`에 대해 알아야 할 다른 구성 요소로 메시지를 전달할 수 있습니다.

```objc
- (void)logInViewController:(PFLogInViewController *)controller
        didLogInUser:(PFUser *)user {
    [self dismissModalViewControllerAnimated:YES];
}

- (void)logInViewControllerDidCancelLogIn:(PFLogInViewController *)logInController {
    [self dismissModalViewControllerAnimated:YES];
}
```

`PFLogInViewController`에서는 델리게이트 패턴 외에도 알림 패턴을 지원하므로 로그인 이벤트에 여러 옵저버가 있는 경우에 유용합니다.

### 로고 및 배경 이미지 사용자 지정

자기만의 로고나 배경 이미지를 사용할 수 있습니다. 이렇게 하려면 `PFLogInViewController`를 하위 클래스로 만들고 `viewDidLoad`를 재정의합니다.

```objc
@interface MyLogInViewController : PFLogInViewController

@end

@implementation MyLogInViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    self.view.backgroundColor = [UIColor darkGrayColor];

    UIImageView *logoView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"logo.png"]];
    self.logInView.logo = logoView; // logo can be any UIView
}
@end
```

연결된 가입 보기의 로고와 배경을 수정하려면 `PFSignUpViewController` 하위 클래스를 만들고 하위 클래스의 인스턴스를 만들어 `PFLogInViewController`를 인스턴스화하는 즉시 `signUpController`에 할당해야 합니다.

```objc
MyLogInViewController *logInController = [[MyLogInViewController alloc] init];
logInController.signUpController = [[MySignUpViewController alloc] init];
[self presentModalViewController:logInController animated:YES];
```

### 추가 보기 사용자 지정

경우에 따라 `PFLogInViewController`를 추가로 사용자 지정할 수 있습니다. 예를 들어 플레이스홀더 텍스트를 &quot;이메일&quot;로 변경하거나 로그인 버튼의 크기를 변경할 수 있습니다. 두 경우 모두 `PFLogInViewController` 하위 클래스를 만들고 `viewDidLoad` 또는 `viewDidLayoutSubviews`를 재정의해야 합니다. 레이아웃과 관련이 있는 동작인 경우에는 앞의 것을 재정의하고, 그렇지 않은 경우에는 뒤의 것을 재정의합니다.

```objc
@interface MyLogInViewController : PFLogInViewController

@end

@implementation MyLogInViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.logInView.usernameField.placeholder = @"email";
}

- (void)viewDidLayoutSubviews {
    [super viewDidLayoutSubviews];
    self.logInView.logInButton.frame = CGRectMake(...); // Set a different frame.
}

@end
```

이러한 종류의 사용자 지정에 관심이 있는 개발자는 사용자 지정할 수 있는 모든 속성이 기록된 [`PFLogInView`](ios/api/Classes/PFLogInView.html) 인터페이스를 살펴봐야 합니다.

### 세로 및 가로

기본적으로 `PFLogInViewController`는 iPhone의 `UIInterfaceOrientationPortraitUpsideDown`을 제외하고 모든 방향을 지원합니다. `shouldAutorotateToInterfaceOrientation:`을 하위 클래스로 만들고 재정의하여 이 동작을 재정의할 수 있습니다.

### iPhone 및 iPad

`PFLogInViewController`는 모든 iOS 기기 크기 및 픽셀 밀도에서 작동합니다.

## PFSignUpViewController

`PFLogInFieldsSignUpButton` 옵션을 활성화한 상태로 `PFLogInViewController`를 사용하는 경우에는 추가 작업을 하지 않아도 가입 기능을 활성화할 수 있습니다. 사용자가 로그인 화면에서 가입 버튼을 누르면 나타나는 가입 화면을 통해 가입할 수 있습니다. 그러나 로그인 화면과 별도로 가입 화면을 사용할 수도 있습니다. 그런 경우에 `PFSignUpViewController`를 이용하면 편리합니다.

`PFSignUpViewController`는 보기를 인스턴스화한 다음 모달 방식으로 표시합니다.

```objc
PFSignUpViewController *signUpController = [[PFSignUpViewController alloc] init];
signUpController.delegate = self;
[self presentModalViewController:signUpController animated:YES];
```

이렇게만 하면 작동하는 가입 화면을 표시할 수 있습니다.

### 가입 요소 구성

![](/images/docs/signup_diagram.png)

`PFSignUpViewController`는 다양한 가입 옵션을 제공하도록 구성할 수 있습니다. 기본적으로는 다음과 같은 UI를 표시합니다.

*   사용자 이름 및 비밀번호 필드
*   이메일
*   가입 버튼
*   무시 버튼

가입 화면에 기본 필드 외에도 &quot;전화번호&quot;와 같은 추가 필드가 필요한 경우에는 'additional' 필드를 설정할 수 있습니다.

```objc
signUpController.fields = PFSignUpFieldsUsernameAndPassword
                          | PFSignUpFieldsSignUpButton
                          | PFSignUpFieldsEmail
                          | PFSignUpFieldsAdditional
                          | PFSignUpFieldsDismissButton;
```

기본적으로 비트 OR 연산자(`|`)를 사용하여 가입 화면에 포함할 모든 옵션을 연결하고 `fields`에 값을 할당합니다. 마찬가지로 필드 할당을 생략하여 필드를 끌 수 있습니다.

### 가입 성공, 실패, 취소에 응답

사용자가 가입하거나 가입을 취소하면 `PFSignUpViewController`에서 델리게이트에 이벤트를 알립니다. 이 콜백을 받으면 델리게이트가 최소한 `PFSignUpViewController`를 무시해야 합니다. 또한 델리게이트는 보기를 업데이트하거나 `%{ParseUser}`에 대해 알아야 할 다른 구성 요소로 메시지를 전달할 수 있습니다.

```objc
- (void)signUpViewController:(PFSignUpViewController *)signUpController didSignUpUser:(PFUser *)user {
    [self dismissModalViewControllerAnimated:YES];
}

- (void)signUpViewControllerDidCancelSignUp:(PFSignUpViewController *)signUpController {
    [self dismissModalViewControllerAnimated:YES];
}
```

`PFSignUpViewController`에서는 델리게이트 패턴 외에도 `NSNotification`을 지원하므로 가입 이벤트에 여러 수신자가 있는 경우에 유용합니다.

### 로고 및 배경 이미지 사용자 지정

자기만의 로고나 배경 이미지를 사용할 수 있습니다. 이렇게 하려면 `PFSignUpViewController`를 하위 클래스로 만들고 `viewDidLoad`를 재정의합니다.

```objc
@interface MySignUpViewController : PFSignUpViewController

@end

@implementation MySignUpViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    self.view.backgroundColor = [UIColor darkGrayColor];

    UIImageView *logoView = [[UIImageView alloc] initWithImage:@"logo.png"];
    self.signUpView.logo = logoView; // logo can be any UIView
}

@end
```

### 검증 로직 사용자 지정

가입 정보를 Parse Cloud에 제출하기 전에 클라이언트 측 검증을 실행하는 것이 좋을 수도 있습니다. `PFSignUpViewControllerDelegate`의 `signUpViewController:shouldBeginSignUp:` 메서드에 검증 로직을 추가할 수 있습니다. 예를 들어 8자 미만인 비밀번호가 너무 짧다고 생각되는 경우에는 다음을 수행할 수 있습니다.

```objc
- (BOOL)signUpViewController:(PFSignUpViewController *)signUpController
           shouldBeginSignUp:(NSDictionary *)info {
    NSString *password = info[@"password"];
    return (password.length >= 8); // prevent sign up if password has to be at least 8 characters long
}
```

`info`는 사용자 이름, 비밀번호, 이메일, 추가 등의 가입 필드가 모두 포함된 딕셔너리입니다.

### 추가 보기 사용자 지정

경우에 따라 `PFSignUpViewController`를 추가로 사용자 지정할 수 있습니다. 예를 들어 &quot;additional&quot; 플레이스홀더 텍스트를 &quot;전화&quot;로 변경하거나 가입 버튼의 크기를 변경할 수 있습니다. 언제든지 `PFSignUpViewController` 하위 클래스를 만들고 `UIViewController`의 다양한 메서드를 재정의할 수 있습니다. 변경할 동작이 보기 레이아웃과 관련이 없는 경우에는 `viewDidLoad`를 재정의하고, 그렇지 않은 경우에는 `viewWillLayoutSubviews`를 재정의합니다.

```objc
@interface MySignUpViewController : PFSignUpViewController

@end

@implementation MySignUpViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.signUpView.usernameField.placeholder = @"phone";
}

- (void)viewDidLayoutSubviews {
    [super viewDidLayoutSubviews];
    self.signUpView.signUpButton.frame = CGRectMake(...); // Set a different frame.
}

@end
```

이러한 종류의 사용자 지정에 관심이 있는 개발자는 사용자 지정할 수 있는 모든 속성이 기록된 [`PFSignUpView`](ios/api/Classes/PFSignUpView.html) 인터페이스를 살펴봐야 합니다.

### 세로 및 가로

기본적으로 `PFSignUpViewController`는 iPhone의 `UIInterfaceOrientationPortraitUpsideDown`을 제외하고 모든 방향을 지원합니다. `shouldAutorotateToInterfaceOrientation:`을 하위 클래스로 만들고 재정의하여 이 동작을 재정의할 수 있습니다.

### iPhone 및 iPad

`PFSignUpViewController`는 모든 iOS 기기 크기 및 픽셀 밀도에서 작동합니다.

## PFQueryTableViewController

데이터 중심의 iOS 앱은 대부분이 `UITableViewController`와 해당 `UITableView`의 컬렉션입니다. Parse를 사용할 때 `UITableView`의 각 셀은 일반적으로 `%{ParseObject}`의 데이터를 나타냅니다. `PFQueryTableViewController`는 Parse 클래스 중 하나에서 데이터를 쉽게 표시할 수 있도록 추상화 레이어를 제공하는 `UITableViewController`의 하위 클래스입니다.

<div class='tip info'><div>
  Parse 앱에 `Todo` 클래스의 개체를 표시하려면 [PFQueryTableViewController 사용에 관한 튜토리얼](/tutorials/parse-query-table)을 참조하세요.
</div></div>

`PFQueryTableViewController`를 사용하는 방법은 `UITableViewController`를 사용하는 경우와 비슷합니다.

1.  `PFQueryTableViewController`의 하위 클래스를 만들고 사용자 지정합니다. [템플릿 파일](https://gist.github.com/ba03c1a550f14f88f95d)을 시작점으로 사용합니다.
2.  그러면 이 파일이 자동으로 델리게이트 및 데이터 소스로 설정됩니다.
3.  `parseClassName` 인스턴스 변수를 설정하여 데이터를 쿼리할 Parse 클래스를 지정합니다.
4.  `queryForTable` 메서드를 재정의하여 테이블의 개체를 가져오는 데 사용할 사용자 지정 `PFQuery`를 생성합니다.
5.  `tableView:cellForRowAtIndexPath:object:` 메서드를 재정의하여 각 `%{ParseObject}`에 맞는 사용자 지정 셀을 반환합니다.
6.  사용자 지정 셀 클래스를 구현하고 `PFTableViewCell` 클래스에서 상속하게 합니다. 보기가 로드되면 클래스는 구성된 쿼리를 통해 자동으로 `%{ParseObject}`를 확보하고 테이블에 로드합니다. 여기에는 바로 사용할 수 있는 페이지 매기기와 당겨서 새로고침(pull-to-refresh)도 포함되어 있습니다.

이 클래스를 사용하면 인덱스 경로에 대해 고심하지 않고 `%{ParseObject}`와 `UITableViewCell`의 일대일 매핑만 생각할 수 있습니다. 다음과 같은 기능도 바로 사용할 수 있습니다.

*   셀을 눌러 다음 페이지를 로드할 수 있는 페이지 매기기
*   당겨서 새로 고칠 수 있는 테이블 보기 헤더
*   셀에서 원격 이미지 자동 다운로드 및 표시
*   데이터를 로드하기 전에 표시되는 로드 중 화면
*   개체 배열의 자동 로드 및 관리
*   데이터 주기의 주요 이벤트에서 재정하여 사용자 지정 동작을 실행할 수 있는 다양한 메서드

예를 통해 이 클래스를 쉽게 이해할 수 있습니다. `PFQueryTableViewController`의 이 하위 클래스는 일련의 Todo 항목과 우선 순위 번호를 표시합니다.

```objc
@interface SimpleTableViewController : PFQueryTableViewController

@end

@implementation SimpleTableViewController

- (instancetype)initWithStyle:(UITableViewStyle)style {
    self = [super initWithStyle:style];
    if (self) { // This table displays items in the Todo class 
      self.parseClassName = @"Todo"; 
      self.pullToRefreshEnabled = YES; 
      self.paginationEnabled = YES; 
      self.objectsPerPage = 25;
    }
    return self;
}

- (PFQuery *)queryForTable {
    PFQuery *query = [PFQuery queryWithClassName:self.parseClassName];

    // If no objects are loaded in memory, we look to the cache first to fill the table
    // and then subsequently do a query against the network.
    if (self.objects.count == 0) { 
      query.cachePolicy = kPFCachePolicyCacheThenNetwork;
    }

    [query orderByDescending:@"createdAt"];

    return query;
}

- (UITableViewCell *)tableView:(UITableView *)tableView  
         cellForRowAtIndexPath:(NSIndexPath *)indexPath 
                        object:(PFObject *)object {
    static NSString *cellIdentifier = @"cell";

    PFTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
    if (!cell) { 
      cell = [[PFTableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle
                                    reuseIdentifier:cellIdentifier];
    }

    // Configure the cell to show todo item with a priority at the bottom
    cell.textLabel.text = object[@"text"];
    cell.detailTextLabel.text = [NSString stringWithFormat:@"Priority: %@",  object[@"priority"]];

    return cell;
}

@end
```

![](/images/docs/todo_view.gif)

이 보기는 Todo 항목 목록을 표시한 것입니다. 사용자는 당겨서 새로 고치거나, 테이블 끝에 있는 셀을 눌러 다음 페이지를 로드할 수 있습니다. 또한 개체 캐시 기능도 적절하게 사용하여, 보기가 더 이상 메모리에 없는 상태에서 다음에 다시 로드하면 네트워크 호출로 업데이트 정보를 확인하는 동안 쿼리 캐시를 사용하여 이전에 로드한 개체를 바로 표시합니다.

여기서 모든 코드를 작성하지는 않습니다. 데이터를 테이블에 로드하고, 인덱스 경로와 씨름하고, 까다로운 페이지 매기기 코드를 처리할 필요가 없습니다. 그런 기능은 전부 `PFQueryTableViewController`에서 자동으로 처리됩니다.

자세히 살펴보기에 좋은 시작점은 [클래스의 API](/docs/ios/api/Classes/PFQueryTableViewController.html)와 [템플릿 하위 클래스 파일](https://gist.github.com/ba03c1a550f14f88f95d)입니다. 클래스는 사용자 지정을 염두에 두고 디자인했기 때문에 `UITableViewController`를 사용하던 많은 인스턴스를 수용할 수 있습니다.

### 셀에서 원격 이미지 로드

`PFQueryTableViewController`를 사용하면 Parse Cloud에 저장된 원격 이미지를 간단하게 `PFFile`로 표시할 수 있습니다. `tableView:cellForRowAtIndexPath:object:`를 재정의하고 `imageView`의 `file` 속성이 지정된 `PFTableViewCell`을 반환하기만 하면 됩니다. 원격 이미지를 로드하기 전에 나타나는 플레이스홀더 이미지를 표시하려면 `imageView`의 `image` 속성에 플레이스홀더 이미지를 할당하세요.

```objc
@implementation SimpleTableViewController

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath object:(PFObject *)object {
    static NSString *identifier = @"Cell";
    PFTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];
    if (!cell) {
        cell = [[PFTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];
    }
    cell.textLabel.text = object[@"title"];
    PFFile *thumbnail = object[@"thumbnail"];
    cell.imageView.image = [UIImage imageNamed:@"placeholder.jpg"];
    cell.imageView.file = thumbnail;
    return cell;
}
@end
```

![](/images/docs/images_table.png)

이 테이블에는 Parse Cloud에 저장된 귀여운 동물 사진의 목록이 `PFFile`로 표시됩니다. 'placeholder.jpg'는 동물 사진을 다운로드하기 전에 표시되는 앱 번들에 포함된 이미지입니다.

이미지는 요청 시 다운로드됩니다. 테이블을 스크롤할 때 현재 보이는 셀의 이미지가 다운로드됩니다. 이 방식은 대역폭을 절약할 뿐만 아니라 보이는 이미지를 적절한 시기에 표시할 수 있어 유용합니다. 더 적극적인 로드 동작이 필요한 경우에는 `imageView`에 `loadInBackground` 메서드를 사용하여 이미지를 다운로드할 수 있습니다.

### 쿼리 사용자 지정

기본 쿼리는 클래스에서 `createdAt`의 내림차순으로 개체를 가져오도록 설정됩니다. 직접 지정한 `PFQuery`를 반환하도록 `queryForTable` 메서드를 재정의하기만 하면 사용자 지정도 가능합니다. 테이블에서는 표시할 개체를 가져올 때 이 쿼리를 사용합니다.

### 셀 사용자 지정

테이블의 모양을 사용자가 변경하도록 하려면 사용자가 원하는 셀을 반환하도록 `tableView:cellForRowAtIndexPath:object:`를 재정의합니다. 이 메서드는 일반적인 테이블 데이터 소스 메서드와 비슷하지만 `%{ParseObject}`가 매개변수로 직접 포함되어 있습니다.

더 이상 `tableView:cellForRowAtIndexPath:`는 재정의하지 않습니다.

_중요:_ 테이블 보기 셀은 `UITableViewCell`이 아닌 `PFTableViewCell`로부터 상속해야 합니다. `PFTableViewCell`은 원격 이미지 로드를 지원하는 `UITableViewCell`의 하위 클래스입니다. `PFQueryTableViewController`에서 사용하면 `PFTableViewCell`의 원격 이미지가 자동으로 로드됩니다.

### 수명 주기 메서드

테이블의 데이터 수명 주기 동안 주요 이벤트가 발생하면 몇 가지 메서드가 호출되어 노출됩니다. 여기에는 쿼리에서 개체를 로드한 후와 쿼리가 시작되기 직전에 각각 호출되는 `objectsDidLoad:`와 `objectsWillLoad`가 포함됩니다. 이러한 메서드를 재정의하면 이런 이벤트 동안 추가 기능을 제공할 수 있습니다.

### 페이지 매기기

![](/images/docs/pagination.png)

페이지 매기기는 테이블에 개체 페이지가 한 번에 하나씩만 표시되게 합니다. `objectsPerPage` 인스턴스 변수를 설정하여 한 페이지에 포함되는 개체의 수를 사용자 지정할 수 있습니다.

페이지 매기기를 적용하도록 쿼리가 자동으로 수정되며, 테이블을 처음 로드하면 개체의 첫 페이지만 표시됩니다. 테이블 하단에 나타나는 페이지 매기기 셀을 사용하면 다음 페이지를 로드할 수 있습니다. `tableView:cellForNextPageAtIndexPath:`를 재정의하면 이 셀을 사용자 지정할 수 있습니다.

페이지 매기기는 기본적으로 켜져 있습니다. 이 기능을 끄려면 `paginationEnabled`를 `NO`로 설정하면 됩니다.

### 당겨서 새로고침

![](/images/docs/pull_to_refresh.png)

당겨서 새로고침은 테이블을 아래로 당겼다가 놓는 방법으로 데이터를 다시 로드하는 기능입니다. 기본적으로 데이터의 첫 페이지가 클래스에서 로드되고 테이블이 지워졌다가 업데이트된 데이터가 나타납니다. Parse에서는 `EGOTableViewPullRefresh` 라이브러리를 사용하여 이 효과를 얻습니다.

당겨서 새로고침은 기본적으로 켜져 있습니다. 이 기능을 끄려면 `pullToRefreshEnabled`를 `NO`로 설정하면 됩니다.

### 로드 중 보기

로드 중 보기는 테이블 보기 컨트롤러에서 데이터의 첫 페이지를 로드하는 동안 표시됩니다. 이 기능은 기본적으로 켜져 있으며 `loadingViewEnabled` 속성을 통해 끌 수 있습니다.

### 오프라인 및 오류 메시지

사용자가 오프라인 상태이거나 쿼리에서 Parse 오류가 생성된 경우에는 사용자에게 자동으로 경고가 표시될 수 있습니다. 기본적으로 `PFQueryTableViewController`를 사용할 때는 이 기능이 켜져 있습니다. 이 동작을 끄려면 `Parse` 클래스에서 `offlineMessagesEnabled` 및 `errorMessagesEnabled` 메서드를 사용합니다.

## PFImageView

Parse Cloud에 저장된 이미지를 `PFFile`로 표시해야 하는 앱도 많습니다. 그러나 기본 제공되는 `UIImageView`에 원격 이미지를 로드하려면 여러 줄의 상용 코드(boilerplate code)를 작성해야 합니다. `PFImageView`를 사용하면 이 작업을 간소화할 수 있습니다.

```objc
PFImageView *imageView = [[PFImageView alloc] init];
imageView.image = [UIImage imageNamed:@"..."]; // placeholder image
imageView.file = (PFFile *)someObject[@"picture"]; // remote image
[imageView loadInBackground];
```

`image` 속성이 할당된 경우 이 속성은 원격 이미지를 다운로드하기 전에 플레이스홀더를 표시하는 데 사용됩니다. 다운로드는 `file` 속성이 할당된 직후에 시작되지 않으며 `loadInBackground:`를 호출할 때만 로드가 시작됩니다. 원격 이미지는 메모리와 디스크 모두에 캐시됩니다. 캐시에서 이미지가 발견되면 `loadInBackground:`에 대한 호출이 즉시 반환됩니다.

## PFTableViewCell

Parse Cloud에 저장된 이미지를 포함하는 테이블 보기 셀을 `PFFile`로 표시해야 하는 앱이 많습니다. 그러나 기본 제공되는 `UITableViewCell`에 원격 이미지를 로드하려면 여러 줄의 상용 코드(boilerplate code)를 작성해야 합니다. `PFTableViewCell`은 원격 이미지 로드를 지원하는 `PFImageView` 유형의 `imageView` 속성을 노출하여 이 작업을 간소화합니다.

```objc
@implementation SimpleTableViewController

- (UITableViewCell *)tableView:(UITableView *)tableView  cellForRowAtIndexPath:(NSIndexPath *)indexPath object:(PFObject *)object {
    static NSString *identifier = @"cell";
    PFTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];
    if (!cell) { cell = [[PFTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];
    }
    cell.textLabel.text = object[@"title"];

    PFFile *thumbnail = object[@"thumbnail"];
    cell.imageView.image = [UIImage imageNamed:@"placeholder.jpg"];
    cell.imageView.file = thumbnail;
    return cell;
}

@end
```

`UITableViewCell`과 마찬가지로 `PFTableViewCell`도 기본 레이아웃 스타일을 지원합니다. `UITableViewCell`과 달리 `PFTableViewCell`의 `imageView` 속성은 `PFFile`의 원격 이미지 다운로드를 지원하는 `PFImageView` 유형입니다.

`PFTableViewCell`은 독립적으로 사용할 수도 있지만 `PFQueryTableViewController`에 사용하는 것이 가장 좋습니다. `PFQueryTableViewController`에서는 `PFTableViewCell`을 알고 자동으로 이미지를 로드합니다. 이러한 동작에 대한 내용은 `PFQueryTableViewController` 설명서에서 자세히 설명합니다.

## 문자열 리소스 사용자 지정/현지화

Parse의 UI 클래스에 있는 모든 문자열은 사용자 지정/현지화가 가능합니다. 문자열을 사용자 지정하는 가장 쉬운 방법은 iOS에서 제공하는 [기본 현지화 지원](https://developer.apple.com/internationalization/)을 사용하는 것입니다.

예를 들어, `PFSignUpViewController`의 HUD에서 &quot;Loading...&quot;이라는 로드 중 메시지를 사용자 지정할 수 있습니다. 현지화 가이드에 따라 `Localizable.strings`를 `en.lproj` 디렉터리에 설정한 경우를 가정하겠습니다. `Localizable.strings`에 이제 다음을 입력할 수 있습니다. 

```js
"Loading..." = "In progress";
```

 그러면 문자열이 &quot;In progress&quot;로 사용자 지정됩니다. 왼쪽의 키는 사용자 지정할 원래 문자열이고 오른쪽의 값은 사용자 지정된 값입니다.

`PFSignUpViewController`에서 사용자 지정하려는 오류 메시지가 &quot;The email address &quot;andrew@x&quot; is invalid. Please enter a valid email.&quot;인 경우를 생각해 보겠습니다. 이 메시지에는 변수가 포함되어 있기 때문에 `Localizable.strings`에 메시지를 입력하는 방법을 알기가 어려울 수 있습니다.

Parse SDK에는 Parse 프레임워크에서 현지화가 가능한 키가 모두 포함된 `Localizable.string`이라는 파일이 있습니다. 개발자들은 이 파일을 탐색하여 사용자 지정할 문자열의 키를 찾을 수 있습니다. 여기에서 파일의 키는 &quot;The email address \&quot;%@\&quot; is invalid. Please enter a valid email.&quot;인 것을 확인할 수 있습니다. `Localizable.strings`에서 이제 다음을 입력할 수 있습니다.

```js
"The email address \"%@\" is invalid. Please enter a valid email." = "Wrong email: \"%@\"";
```

이제 문자열이 사용자 지정되었습니다.
