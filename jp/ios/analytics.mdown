# 分析

Parseには、アプリの稼働状況を簡単に確認できるフックが多数用意されています。アプリの機能、使用頻度、使用時間を把握の重要性も認識されています。

このセクションではParseの分析バックエンドを十分に活用するためのアプリの設定方法をいくつか紹介しますが、Parseを使用してデータを保存、取得するだけでも、開発者はすでにParseの指標を活用していることになります。

クライアント側のロジックを実装しなくても、アプリのダッシュボードでAPIリクエストのリアルタイムのグラフや詳細情報（機器の種類、Parseクラス名、REST動詞ごと）を表示したり、必要なデータに簡単にアクセスできるようにグラフフィルタを保存しておくことができます。

## アプリのオープン/プッシュ分析

最初の分析フックでは、起動するアプリケーションを追跡することができます。次の行を`application:didFinishLaunching:`へ追加すると、アプリケーションが開く時間と頻度に関するデータの収集を開始します。

```objc 
[PFAnalytics trackAppOpenedWithLaunchOptions:launchOptions];
```

統計のグラフや内訳はアプリのダッシュボードからアクセスできます。

プッシュ通知配信と起動確率についての詳細分析が利用できます。リモート通知ペイロードとプッシュ関連のコールバックについての詳細情報はプッシュガイドの[プッシュとアプリ起動時の追跡サブセクション](/docs/push_guide#receiving-tracking/iOS) を参照してください。

## カスタム分析

`PFAnalytics`では、いくつかの`NSString`キーと値で自由形式イベントを追跡することもできます。このようにしてトラッキング対象を追加することで、アプリのダッシュボードからカスタムイベントをセグメント化できます。

たとえば、アパートの出品広告を検索するアプリにメタデータを追加することで、機能の使用回数をトラッキングします。

```objc
NSDictionary *dimensions = @{
    // Define ranges to bucket data points into meaningful segments
    @"priceRange": @"1000-1500",
    // Did the user filter the query?
    @"source": @"craigslist",
    // Do searches happen more often on weekdays or weekends?
    @"dayType": @"weekday"
};
// Send the dimensions to Parse along with the 'search' event
[PFAnalytics trackEvent:@"search" dimensions:dimensions];
```

`PFAnalytics`は軽量のエラートラッキングツールとしても使用でき、次のコードを呼び出すだけで、アプリのエラー率や頻度の概要、エラーコードごとの詳細を確認できます。

```objc
NSString *codeString = [NSString stringWithFormat:@"%d", [error code]];
[PFAnalytics trackEvent:@"error" dimensions:@{ @"code": codeString }];
```

現在Parseは、`trackEvent:dimensions:`への呼び出しごとに最初の8つのトラッキング対象のペアのみを保存します。
