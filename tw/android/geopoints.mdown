# GeoPoint

Parse 能讓您將現實世界的經緯度座標與物件建立關聯。將 `ParseGeoPoint` 加入 `ParseObject`，能在進行查詢時，將某個物件與參考點之間的鄰近性列入考慮。這讓您很容易完成一些操作，比如找出哪些使用者距離其他使用者最近，或是哪些地點離使用者最近。

## ParseGeoPoint

若要建立某地點與物件的關聯，您必須先建立 `ParseGeoPoint`。例如，若要建立經度 -30.0 度緯度 40.0 度的地點：

```java
ParseGeoPoint point = new ParseGeoPoint(40.0, -30.0);
```

接著此地點會被當成一般欄位儲存在物件中。

```java
placeObject.put("location", point);
```

## Geo 查詢

既然您有一堆具有空間座標的物件，若能找出哪個物件離某個地點最近會很棒。這點可以透過使用 `whereNear` 將另一個限制加入 `ParseQuery` 來達成。若要取得距離使用者最近十個位置的清單，看起來會像是：

```java
ParseGeoPoint userLocation = (ParseGeoPoint) userObject.get("location");
ParseQuery<ParseObject> query = ParseQuery.getQuery("PlaceObject");
query.whereNear("location", userLocation);
query.setLimit(10);
query.findInBackground(new FindCallback<ParseObject>() { ... });
```

此時的 `nearPlaces` 會是物件陣列，且會依照跟 `userLocation` 之間的距離排序（由近至遠）。請注意，如果有套用額外的 `orderByAscending()`/`orderByDescending()` 限制，此限制將優先於距離排序。

若要使用距離限制結果，請檢查 `whereWithinKilometers`、`whereWithinMiles` 和 `whereWithinRadians`。

也可以查詢包含在特定區域內的物件組合。若要找出矩形邊框內的物件，請將 `whereWithinGeoBox` 限制加入 `ParseQuery`。

```java
ParseGeoPoint southwestOfSF = new ParseGeoPoint(37.708813, -122.526398);
ParseGeoPoint northeastOfSF = new ParseGeoPoint(37.822802, -122.373962);
ParseQuery<ParseObject> query = ParseQuery.getQuery("PizzaPlaceObject");
query.whereWithinGeoBox("location", southwestOfSF, northeastOfSF);
query.findInBackground(new FindCallback<ParseObject>() { ... });
```

## 注意事項

此時有一些要注意的事項：

1.  每個 ParseObject 類別的 ParseGeoPoint 物件只會有一個索引鍵。
2.  地點不應等同或超過範圍的極值。緯度不應為 -90.0 或 90.0。經度不應為 -180.0 或 180.0。若嘗試將經緯度設在界外將造成錯誤。
