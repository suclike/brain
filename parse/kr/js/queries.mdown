# 쿼리

`get`으로 `Parse.Query`를 수행하여 Parse에서 싱글 `Parse.Object`를 검색하는 방법을 살펴보았습니다. `Parse.Query`를 사용하여 데이터를 검색할 수 있는 방법은 많습니다. 한 번에 여러 개체를 검색할 수도 있고 검색할 개체에 조건을 넣을 수도 있습니다.

## 기본 쿼리

검색할 개체를 지정하기에는 `get`만으로 충분하지 않은 경우가 많습니다. `Parse.Query`에서는 다양한 방법으로 싱글 개체가 아닌 개체 목록을 검색할 수 있습니다.

일반적인 패턴은 `Parse.Query`를 만들고 조건을 지정한 다음 `find`를 사용하여 일치하는 `Parse.Object`의 `Array`를 가져오는 것입니다. 예를 들어 특정 `playerName`의 점수를 검색하려면 `equalTo` 메서드를 사용하여 키의 값을 제한합니다.

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.equalTo("playerName", "Dan Stemkoski");
query.find({
  success: function(results) {
    alert("Successfully retrieved " + results.length + " scores.");
    // Do something with the returned Parse.Object values
    for (var i = 0; i < results.length; i++) {
      var object = results[i];
      alert(object.id + ' - ' + object.get('playerName'));
    }
  },
  error: function(error) {
    alert("Error: " + error.code + " " + error.message);
  }
});
```

## 쿼리 조건

`Parse.Query`에서 찾은 개체에 조건을 지정하는 방법에는 여러 가지가 있습니다. 다음과 같이 `notEqualTo`로 특정 키-값 쌍을 사용하여 개체를 필터링할 수 있습니다.

```js
query.notEqualTo("playerName", "Michael Yabuti");
```

여러 조건을 지정할 수 있으며 개체는 모든 조건에 일치하는 경우에만 결과에 포함됩니다.  즉, AND 조건과 같습니다.

```js
query.notEqualTo("playerName", "Michael Yabuti");
query.greaterThan("playerAge", 18);
```

`limit`를 설정하여 결과 개수를 제한할 수 있습니다. 기본적으로 결과는 100개로 제한되지만 유효한 제한 개수는 1~1000개입니다.

```js
query.limit(10); // limit to at most 10 results
```

정확히 1개의 결과만 원하는 경우에는 `find`를 사용하는 대신 `first`를 사용하는 것이 더욱 편리할 수 있습니다.

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.equalTo("playerEmail", "dstemkoski@example.com");
query.first({
  success: function(object) {
    // Successfully retrieved the object.
  },
  error: function(error) {
    alert("Error: " + error.code + " " + error.message);
  }
});
```

`skip`을 설정하여 첫 번째 결과를 건너뛸 수 있습니다. 이 방법은 페이지를 매길 때 유용할 수 있습니다.

```js
query.skip(10); // skip the first 10 results
```

숫자와 문자열 같이 정렬할 수 있는 유형의 경우 다음과 같이 결과가 반환되는 순서를 제어할 수 있습니다.

```js
// Sorts the results in ascending order by the score field
query.ascending("score");
// Sorts the results in descending order by the score field
query.descending("score");
```

또한 다음과 같이 정렬 가능한 유형의 쿼리에서 비교를 사용할 수 있습니다.

```js
// Restricts to wins < 50
query.lessThan("wins", 50);

// Restricts to wins <= 50
query.lessThanOrEqualTo("wins", 50);

// Restricts to wins > 50
query.greaterThan("wins", 50);

// Restricts to wins >= 50
query.greaterThanOrEqualTo("wins", 50);
```

여러 다른 값이 일치하는 개체를 검색하려면 허용 가능한 값의 배열을 제공하는 `containedIn`을 사용할 수 있습니다. 주로 여러 쿼리를 싱글 쿼리로 대체하는 데 유용합니다. 예를 들어 다음과 같이 특정 목록에서 모든 플레이어의 점수를 검색하려는 경우 쿼리는 다음과 같습니다.

```js
// Finds scores from any of Jonathan, Dario, or Shawn
query.containedIn("playerName",
                  ["Jonathan Walsh", "Dario Wunsch", "Shawn Simon"]);
```

여러 값 중 아무 값과도 일치하지 않는 개체를 검색하려면 허용 가능한 값의 배열을 제공하는 `notContainedIn`을 사용할 수 있습니다.  예를 들어 다음과 같이 목록에 없는 플레이어의 점수를 검색하려는 경우 쿼리는 다음과 같습니다.

```js
// Finds scores from anyone who is neither Jonathan, Dario, nor Shawn
query.notContainedIn("playerName",
                     ["Jonathan Walsh", "Dario Wunsch", "Shawn Simon"]);
```

특정 키 세트가 있는 개체를 검색하려는 경우 `exists`를 사용할 수 있습니다. 반대로 특정 키 세트가 없는 개체를 검색하려는 경우 `doesNotExist`를 사용할 수 있습니다.

```js
// Finds objects that have the score set
query.exists("score");

// Finds objects that don't have the score set
query.doesNotExist("score");
```

`matchesKeyInQuery` 메서드를 사용하여 키가 다른 쿼리 결과에서 가져온 개체 세트에 있는 키의 값과 일치하는 개체를 가져올 수 있습니다.  예를 들어 스포츠 팀이 포함된 클래스가 있고 사용자 클래스에 사용자의 연고지를 저장하는 경우 하나의 쿼리로 우승 기록이 있는 연고지 팀의 사용자 목록을 찾을 수 있습니다.  쿼리는 다음과 같습니다.

```js
var Team = Parse.Object.extend("Team");
var teamQuery = new Parse.Query(Team);
teamQuery.greaterThan("winPct", 0.5);
var userQuery = new Parse.Query(Parse.User);
userQuery.matchesKeyInQuery("hometown", "city", teamQuery);
userQuery.find({
  success: function(results) {
    // results has the list of users with a hometown team with a winning record
  }
});
```

이와 반대로 키가 다른 쿼리 결과에서 가져온 개체 세트에 있는 키의 값과 일치하지 않는 개체를 가져오려면 `doesNotMatchKeyInQuery`를 사용할 수 있습니다. 예를 들어 패배 기록이 있는 연고지 팀의 사용자를 찾으려는 경우 쿼리는 다음과 같습니다.

```js
var losingUserQuery = new Parse.Query(Parse.User);
losingUserQuery.doesNotMatchKeyInQuery("hometown", "city", teamQuery);
losingUserQuery.find({
  success: function(results) {
    // results has the list of users with a hometown team with a losing record
  }
});
```

키 목록을 사용하여 `select`를 호출하면 반환되는 필드를 제한할 수 있습니다. `score`와 `playerName` 필드(및 `objectId`, `createdAt`, `updatedAt` 등 기본 제공되는 특수 필드)만 포함된 문서를 가져오려는 경우 쿼리는 다음과 같습니다.

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.select("score", "playerName");
query.find().then(function(results) {
  // each of results will only have the selected fields available.
});
```

나머지 필드는 반환된 개체에서 `fetch`를 호출하여 나중에 불러올 수 있습니다.

```js
query.first().then(function(result) {
  // only the selected fields of the object will now be available here.
  return result.fetch();
}).then(function(result) {
  // all fields of the object will now be available here.
});
```

## 배열 값 쿼리

배열 유형인 키의 경우 다음과 같이 쿼리하여 키의 배열 값에 2가 포함된 개체를 찾을 수 있습니다.

```js
// Find objects where the array in arrayKey contains 2.
query.equalTo("arrayKey", 2);
```

또한 다음과 같이 키의 배열 값에 요소 2, 3, 4가 각각 포함된 개체를 찾을 수 있습니다.

```js
// Find objects where the array in arrayKey contains all of the elements 2, 3, and 4.
query.containsAll("arrayKey", [2, 3, 4]);
```

## 문자열 값 쿼리

`startsWith`를 사용하여 특정 문자열로 시작하는 문자열 값으로 제한할 수 있습니다. MySQL LIKE 연산자와 마찬가지로 색인이 생성되므로 큰 데이터 세트에 효율적입니다.

```js
// Finds barbecue sauces that start with "Big Daddy's".
var query = new Parse.Query(BarbecueSauce);
query.startsWith("name", "Big Daddy's");
```

## 관계형 쿼리

관계형 데이터를 쿼리하는 방법에는 여러 가지가 있습니다. 필드가 특정 `Parse.Object`와 일치하는 개체를 검색하려는 경우 다른 데이터 유형과 마찬가지로 `equalTo`를 사용할 수 있습니다. 예를 들어 각 `Comment`의 `post` 필드에 `Post` 개체가 있는 경우 특정 `Post`에 대한 댓글을 가져올 수 있습니다.

```js
// Assume Parse.Object myPost was previously created.
var query = new Parse.Query(Comment);
query.equalTo("post", myPost);
query.find({
  success: function(comments) {
    // comments now contains the comments for myPost
  }
});
```

필드에 다른 쿼리와 일치하는 `Parse.Object`가 포함된 개체를 검색하려는 경우 `matchesQuery`를 사용할 수 있습니다. 기본 한도 100개와 최대 한도 1000개가 내부 쿼리에도 적용되므로 데이터 세트가 큰 경우 쿼리를 신중하게 구성해야 원하는 동작을 얻을 수 있습니다. 이미지가 있는 게시물에 대한 댓글을 찾으려면 다음 쿼리를 수행하세요.

```js
var Post = Parse.Object.extend("Post");
var Comment = Parse.Object.extend("Comment");
var innerQuery = new Parse.Query(Post);
innerQuery.exists("image");
var query = new Parse.Query(Comment);
query.matchesQuery("post", innerQuery);
query.find({
  success: function(comments) {
    // comments now contains the comments for posts with images.
  }
});
```

필드에 다른 쿼리와 일치하지 않는 `Parse.Object`가 포함된 개체를 가져오려면 `doesNotMatchQuery`를 사용할 수 있습니다.  이미지가 없는 게시물에 대한 댓글을 찾으려면 다음 쿼리를 수행하세요.

```js
var Post = Parse.Object.extend("Post");
var Comment = Parse.Object.extend("Comment");
var innerQuery = new Parse.Query(Post);
innerQuery.exists("image");
var query = new Parse.Query(Comment);
query.doesNotMatchQuery("post", innerQuery);
query.find({
  success: function(comments) {
    // comments now contains the comments for posts without images.
  }
});
```

또한 다음과 같이 `objectId`별로 관계형 쿼리를 수행할 수 있습니다.

```js
var post = new Post();
post.id = "1zEcyElZ80";
query.equalTo("post", post);
```

하나의 쿼리로 관계된 개체의 여러 유형을 반환하려는 경우 `include` 메서드로 수행할 수 있습니다. 예를 들어 최근 10개의 댓글을 가져오면서 동시에 관련된 게시물을 가져오려면 다음과 같이 쿼리합니다.

```js
var query = new Parse.Query(Comment);

// Retrieve the most recent ones
query.descending("createdAt");

// Only retrieve the last ten 
query.limit(10);

// Include the post data with each comment
query.include("post");

query.find({
  success: function(comments) {
    // Comments now contains the last ten comments, and the "post" field
    // has been populated. For example
    for (var i = 0; i < comments.length; i++) 
      // This does not require a network access.
      var post = comments[i].get("post");
    }
  }
});
```

또한 점 표시를 사용하여 여러 수준 포함을 수행할 수 있습니다.  댓글에 대한 게시물과 게시물 작성자를 포함하려면 다음과 같이 쿼리합니다.

```js
query.include(["post.author"]);
```

`include`를 여러 번 호출하여 여러 필드가 포함된 쿼리를 수행할 수 있습니다. 이 기능은 `first`와 `get` 등의 Parse.Query 헬퍼에서도 작동합니다.

## 개체 계산

쿼리와 일치하는 개체 수만 계산하면 되고 일치하는 개체를 모두 가져올 필요는 없는 경우 `find` 대신 `count`를 사용할 수 있습니다. 예를 들어 특정 플레이어가 한 게임 수를 계산하려면 다음과 같이 쿼리합니다.

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.equalTo("playerName", "Sean Plott");
query.count({
  success: function(count) {
    // The count request succeeded. Show the count
    alert("Sean has played " + count + " games");
  },
  error: function(error) {
    // The request failed
  }
});
```

개체 수가 1000개 이상인 클래스의 경우 시간 초과로 계산 작업이 제한됩니다. 이 경우 일상적으로 시간 초과 오류가 발생하거나 대략적인 결과만 반환할 수도 있습니다. 따라서 앱에서 이러한 종류의 계산 작업을 방지하도록 설계하는 것이 좋습니다.

## 복합 쿼리

여러 쿼리 중 하나와 일치하는 개체를 찾으려면 `Parse.Query.or` 메서드를 사용하여 전달된 쿼리의 OR에 해당하는 쿼리를 구성할 수 있습니다. 예를 들어 우승을 많이 한 플레이어나 적게 한 플레이어를 찾으려면 다음과 같이 쿼리할 수 있습니다.

```js
var lotsOfWins = new Parse.Query("Player");
lotsOfWins.greaterThan("wins", 150);

var fewWins = new Parse.Query("Player");
fewWins.lessThan("wins", 5);

var mainQuery = Parse.Query.or(lotsOfWins, fewWins);
mainQuery.find({
  success: function(results) {
    // results contains a list of players that either have won a lot of games or won only a few games.
  },
  error: function(error) {
    // There was an error.
  }
});
```

새로 생성된 `Parse.Query`에 'and' 연산자처럼 작동하는 조건을 추가할 수 있습니다.

하지만 복합 쿼리의 하위 쿼리에서 필터링되지 않는 조건(예: `limit`, `skip`, `ascending`/`descending`, `include`)은 지원되지 않습니다.
