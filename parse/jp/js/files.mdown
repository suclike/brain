# ファイル

## Parse.Fileの作成

`Parse.File`を使用すると、通常の`Parse.Object`に入れるには大きすぎるか、作業が煩雑すぎるアプリケーションファイルをクラウドに保存できます。最も一般的な使用例は画像の保存ですが、文書、動画、音楽、その他のバイナリデータ（最大10メガバイト）にも使用できます。

`Parse.File`は簡単に使用できます。ファイル作成にはいくつかの方法がありますが、まずは、base64エンコードされた文字列を使用します。

```js
var base64 = "V29ya2luZyBhdCBQYXJzZSBpcyBncmVhdCE=";
var file = new Parse.File("myfile.txt", { base64: base64 });
```

また、バイト値の配列からもファイルを作成できます。

```js
var bytes = [ 0xBE, 0xEF, 0xCA, 0xFE ];
var file = new Parse.File("myfile.txt", bytes);
```

Parseはアップロード中のファイルのタイプを、そのファイル拡張子に基づいて自動検出しますが、3つ目のパラメータで`Content-Type`を指定できます。

```js
var file = new Parse.File("myfile.zzz", fileData, "image/png");
```

ただし、ほとんどがHTML5アプリの場合ですが、ファイルアップロード制御が可能なHTMLフォームの使用が必要になることがあります。新しいブラウザでは簡単に設定できます。ファイル入力タグを作成すると、利用者がローカルドライブからファイルを選択してアップロードできます。

```html
  <input type="file" id="profilePhotoFileUpload">
```

次に、クリックハンドラかその他の関数で、そのファイルへの参照を取得します。

```js
var fileUploadControl = $("#profilePhotoFileUpload")[0];
if (fileUploadControl.files.length > 0) {
  var file = fileUploadControl.files[0];
  var name = "photo.jpg";
  var parseFile = new Parse.File(name, file);
}
```

この例では、ファイル名を`photo.jpg`としています。ここでは2つの点に注目します。 

*   ファイル名の競合を考慮する必要はありません。それぞれのアップロードには一意のIDが設定されるため、`photo.jpg`という名前のファイルを複数アップロードしても問題ありません。
*   ファイルにはファイル拡張子の付いた名前を指定するようにします。そうすることで、Parseでファイルの種類が識別され、適切に処理されます。たとえば、PNG画像を保存する場合は、ファイル名の末尾に必ず`.png`を付けます。

次に、ファイルをクラウドに保存します。`Parse.Object`と同じように、自分に都合のよいフォールバックの種類やエラー処理に合わせて、さまざまな`save`メソッドを使用できます。

```js
parseFile.save().then(function() {
  // The file has been saved to Parse.
}, function(error) {
  // The file either could not be read, or could not be saved to Parse.
});
```

最後に、保存が完了したら、データの他の部分と同じように`Parse.File`を`Parse.Object`に関連付けます。

```js
var jobApplication = new Parse.Object("JobApplication");
jobApplication.set("applicantName", "Joe Smith");
jobApplication.set("applicantResumeFile", parseFile);
jobApplication.save();
```

## ファイルコンテンツの取得

ファイルコンテンツの最適な取得方法はアプリケーションのコンテキストによって異なります。クロスドメインリクエストの問題により、ブラウザから取得することをお勧めします。通常は、ファイルのURLをDOMにレンダリングすることになります。ここでは、ページにアップロードしたプロフィール写真をjQueryでレンダリングします。

```js
var profilePhoto = profile.get("photoFile");
$("profileImg")[0].src = profilePhoto.url();
```

ファイルのデータをCloud Codeで処理する場合は、ParseのHTTPネットワークライブラリを使用してファイルを取得できます。

```js
Parse.Cloud.httpRequest({ url: profilePhoto.url() }).then(function(response) {
  // The file contents are in response.buffer.
});
```

[REST API](/docs/rest#files-deleting)では、オブジェクトの参照先ファイルを削除できます。ファイルの削除を許可するには、マスターキーを入力する必要があります。

アプリ内のオブジェクトがファイルを参照していない場合は、REST APIを使用してファイルを削除できません。アプリの設定ページで、未使用ファイルのクリーンアップをリクエストすることもできます。ファイルのクリーンアップを実行すると、URLプロパティを通じて未参照ファイルへのアクセスに依存する機能が壊れる場合があるのでご注意ください。現在オブジェクトに関連付けられているファイルは影響を受けません。
