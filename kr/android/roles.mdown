# 역할

앱의 범위와 사용자 기반이 늘면 데이터에 대한 액세스를 사용자에 연결된 ACL보다는 더 개략적으로 제어해야 하는 경우가 생길 수 있습니다. 이 요구 사항을 해결하기 위해 Parse에서는 [역할 기반 액세스 제어](http://en.wikipedia.org/wiki/Role-based_access_control) 방법을 지원합니다. 역할은 Parse 데이터에 대한 공통 액세스 권한을 가지는 사용자를 그룹화하는 논리적인 방법을 제공합니다. 역할은 사용자 및 다른 역할을 포함하는 명명된 개체입니다.  역할에 권한을 부여하면 이 역할의 사용자 및 이 역할에 포함된 모든 역할의 사용자에게 해당 권한이 암묵적으로 부여됩니다.

예를 들어 엄선된 콘텐츠가 있는 앱에서 다른 사용자가 만든 콘텐츠를 수정하고 삭제할 수 있는 여러 명의 &quot;댓글 관리자&quot;가 있을 수 있습니다.  또한 일련의 &quot;관리자&quot; 사용자가 있고 이 사용자들은 댓글 관리자와 동일한 권한을 가질 뿐 아니라 앱의 전역 설정도 수정할 수 있습니다. 이런 역할에 사용자를 추가하면 각 사용자의 모든 리소스에 대한 권한을 일일이 부여하지 않고도 새 사용자를 댓글 관리자나 관리자로 만들 수 있습니다.

Parse에서는 클라이언트 코드에서 이러한 역할 개체를 나타내는 `ParseRole`이라는 전문 클래스를 제공합니다. `ParseRole`은 `ParseObject`의 하위 클래스이며, 유연한 스키마, 자동 지속성, 키 값 인터페이스 등 동일한 기능을 모두 제공합니다.  또한 `ParseObject`에 있는 모든 메서드가 `ParseRole`에도 있습니다.  다른 점은 `ParseRole`에는 역할 관리와 관련된 추가 기능이 몇 가지 있다는 것입니다.

## 속성

`ParseRole`에는 다음과 같이 `ParseObject`와 구분되는 여러 속성이 있습니다.

*   name: 역할의 이름입니다.  이 값은 필수 항목이며 역할을 만들 때 한 번만 설정할 수 있습니다.  이름에는 영숫자, 공백, - 또는 _만 포함해야 합니다.  이 이름은 해당 개체 ID 없이도 역할을 확인하는 데 사용됩니다.
*   users: 포함하는 역할에 부여된 권한을 상속하는 사용자 집합과의 [관계](#objects-pointers)입니다.
*   roles: 포함하는 역할에 부여된 권한을 상속하는 역할 및 사용자의 역할 집합과의 [관계](#objects-pointers)입니다.

## 역할 개체에 대한 보안

`ParseRole`은 Parse의 다른 모든 개체와 동일한 보안 스키마(ACL)를 사용하지만, ACL을 명시적으로 설정해야 하는 점만 다릅니다. 일반적으로 권한이 높은 사용자(예: 마스터 사용자나 관리자)만 역할을 만들거나 수정할 수 있어야 하므로, ACL을 적절히 정의해야 합니다.  `ParseRole`에 대한 쓰기 권한을 사용자에게 주는 경우 해당 사용자가 역할에 다른 사용자를 추가할 수도 있고 역할을 완전히 삭제할 수도 있으니 주의하세요.

새 `ParseRole`을 만들려면 다음을 작성합니다.

```java
// By specifying no write privileges for the ACL, we can ensure the role cannot be altered.
ParseACL roleACL = new ParseACL();
roleACL.setPublicReadAccess(true);
ParseRole role = new ParseRole("Administrator", roleACL);
role.saveInBackground();
```

`ParseRole`에서 &quot;users&quot; 및 &quot;roles&quot; 관계를 통해 새 역할의 권한을 상속할 사용자 및 역할을 추가할 수 있습니다.

```java
ParseRole role = new ParseRole(roleName, roleACL);
for (ParseUser user : usersToAddToRole) {
    role.getUsers().add(user)
}
for (ParseRole childRole : rolesToAddToRole) {
    role.getRoles().add(childRole);
}
role.saveInBackground();
```

역할에 ACL을 할당할 때는 ACL을 수정할 권한이 필요한 사용자만 수정할 수 있도록 주의해서 할당해야 합니다.

## 다른 개체에 대한 보안

앱에서 사용할 역할 집합을 만들었으므로 이제 역할과 ACL을 함께 사용하여 사용자가 받을 권한을 정의할 수 있습니다. 각 `ParseObject`는 `ParseACL`을 지정할 수 있고, 이 ACL은 개체에 대한 읽기 또는 쓰기 권한을 부여할 사용자 및 역할을 지정하는 액세스 제어 목록을 제공합니다.

역할에 개체에 대한 읽기 또는 쓰기 권한은 쉽게 부여할 수 있습니다.  다음과 같이 `ParseRole`을 사용할 수도 있습니다.

```java
ParseRole moderators = /* Query for some ParseRole */;
ParseObject wallPost = new ParseObject("WallPost");
ParseACL postACL = new ParseACL();
postACL.setRoleWriteAccess(moderators);
wallPost.setACL(postACL);
wallPost.saveInBackground();
```

ACL에 대한 역할 이름을 지정하여 역할에 대한 쿼리를 방지할 수 있습니다.

```java
ParseObject wallPost = new ParseObject("WallPost");
ParseACL postACL = new ParseACL();
postACL.setRoleWriteAccess("Moderators", true);
wallPost.setACL(postACL);
wallPost.save();
```

또한 앱의 기본 ACL을 지정할 때 역할 기반 `ParseACL`을 사용할 수도 있습니다. 이 경우 간단히 사용자 데이터를 보호하고 추가 권한이 있는 사용자에게 액세스 권한을 부여할 수 있습니다.  예를 들어 댓글 관리 포럼 앱에서는 다음과 같은 기본 ACL을 지정할 수 있습니다.

```java 
ParseACL defaultACL = new ParseACL();
// Everybody can read objects created by this user
defaultACL.setPublicReadAccess(true);
// Moderators can also modify these objects
defaultACL.setRoleWriteAccess("Moderators");
// And the user can read and modify its own objects
ParseACL.setDefaultACL(defaultACL, true);
```

## 역할 계층

위에서 설명한 대로 역할에 다른 역할을 포함하여 두 역할 간에 상위-하위 관계를 설정할 수 있습니다. 이 관계의 결과로 상위 역할에 부여된 권한이 하위 역할 모두에 암묵적으로 부여됩니다.

이러한 유형의 관계는 포럼과 같이 사용자가 관리하는 콘텐츠가 포함된 앱에서 일반적으로 발견됩니다. 소수의 일부 사용자는 &quot;관리자&quot;로, 앱 설정 조정, 새 포럼 만들기, 글로벌 메시지 설정 등 최고 수준의 액세스 권한을 갖습니다. 또다른 사용자 집합은 &quot;댓글 관리자&quot;로, 사용자가 만드는 콘텐츠가 적절한 내용으로 유지되도록 하는 일을 담당합니다. 관리자 권한이 있는 사용자에게는 댓글 관리자의 권한도 부여해야 합니다. 이 관계를 설정하려면 다음과 같이 &quot;관리자&quot; 역할을 &quot;댓글 관리자&quot;의 하위 역할로 만듭니다.

```java
ParseRole administrators = /* Your "Administrators" role */;
ParseRole moderators = /* Your "Moderators" role */;
moderators.getRoles().add(administrators);
moderators.saveInBackground();
```
