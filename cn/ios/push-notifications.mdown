# 推送通知

推送通知是让用户参与您的应用程序并了解其最新动态的有效方法。您可以快速有效地到达整个用户群。本指南将帮助您了解设置流程和 Parse 发送推送通知的基本用法。

## 设置推送

如果您想开始使用推送，请先完成 [iOS 推送教程](/tutorials/ios-push-notifications)，学习如何配置应用程序。完成之后再返回本指南，了解关于 Parse 所提供的推送功能的更多信息。

## 安装

安装于注册了推送通知的设备上的每个 Parse 应用程序均有一个相关的 `Installation` 对象。该 `Installation` 对象是您储存推送通知目标定位所需的全部信息的位置。例如，在某个棒球应用中，您可以保存用户感兴趣的球队，以便发送关于球队成绩的更新信息。

在 iOS 中，可以通过 `ParseInstallation` 类（`%{ParseObject}` 的一个子类）可以获得 `Installation` 对象。其采用[相同的 API](#objects) 来储存和检索数据。要想从您的 iOS 应用程序中访问当前的 `Installation` 对象，请采用 `[PFInstallation currentInstallation]` 方法。第一次保存 `%{ParseInstallation}` 时，Parse 会将其添加到 `Installation` 类中，之后其便可以用于定位推送通知，只要其 `deviceToken` 字段置位。

```objc
- (void)application:(UIApplication *)application
        didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    // Store the deviceToken in the current Installation and save it to Parse.
    PFInstallation *currentInstallation = [PFInstallation currentInstallation];
    [currentInstallation setDeviceTokenFromData:deviceToken];
    [currentInstallation saveInBackground];
}
```

可以像修改 `%{ParseObject}` 一样修改 `%{ParseInstallation}`，但有几个特殊字段有助于管理和定位设备。

*   **`badge`**：iOS 应用程序图标标记的当前值。在 `%{ParseInstallation}` 上修改该值会更新应用图标上的标记值。更改将保存到服务器上，使之能用于之后根据推送通知的数量计算图标标记增量。
*   **`channels`**：设备当前订阅内容的各种传送通道。
*   **`timeZone`**：目标设备所在地的当前时区。设备每次保存 `Installation` 对象时，该值就会进行同步_（只读）_。
*   **`deviceType`**：设备类型，值为&ldquo;ios&rdquo;、&ldquo;android&rdquo;、&ldquo;winrt&rdquo;、&ldquo;winphone&rdquo;或&ldquo;dotnet&rdquo;_（只读）_。
*   **`installationId`**：Parse 使用的设备唯一 Id_（只读）_。
*   **`deviceToken`**：Apple 生成的供 iOS 设备使用的令牌_（只读）_。
*   **`channelUris`**：微软生成的用于 Windows 设备的推送 URI_（只读）_。
*   **`appName`**：本安装所属用户应用程序的显示名称_（只读）_。
*   **`appVersion`**：本安装所属用户应用程序的版本号字符串_（只读）_。
*   **`parseVersion`**：本安装所用的 Parse SDK 的版本_（只读）_。
*   **`appIdentifier`**：本安装的用户应用程序的唯一标识符。iOS 上，这是捆绑标识符_（只读）_。

## 发送推送通知

通过 Parse 发送推送通知的方式有两种：[通道](#sending-channels)和[高级定位](#sending-queries)。通道提供了一种简单而且使用方便的推送通知发送模式，而高级定位提供了一种更加强大和灵活的模式。两者完全兼容，本节将对其进行详细介绍。

一般通过 Web Console、REST API 或 Cloud Code 发送通知。但是，也可以通过现有的客户端 SDK 触发推送通知。如果决定从客户端 SDK 发送通知，则需要在 Parse 应用程序的推送通知设置中设置 **Client Push Enabled**。

![](/images/docs/client_push_settings.png)

### 使用通道

开始发送通知最简单的方式就是使用通道。这种方式下可以采用&ldquo;发布者-订阅者&rdquo;模式发送推送通知。设备先订阅一个或多个通道，然后通知会发送到这些订阅者的设备上。由给定 `Installation` 订阅的通道储存在 `Installation` 对象的 `channels` 字段中。

#### 订阅通道

通道通过以字母开头，由字母数字字符、下划线和短划线组成的一个字符串识别。这些通道只有明确创建才能使用，每个 `Installation` 可以订阅任意数量的通道。

在 `%{ParseObject}` 中使用 `addUniqueObject:` 方法即可添加订阅通道。例如，在棒球分数应用程序中，我们可以这样：

```objc
// When users indicate they are Giants fans, we subscribe them to that channel.
PFInstallation *currentInstallation = [PFInstallation currentInstallation];
[currentInstallation addUniqueObject:@"Giants" forKey:@"channels"];
[currentInstallation saveInBackground];
```

一旦订阅&ldquo;Giants&rdquo;（巨人队）通道后，您的 `Installation` 对象会出现更新的 `channels` 字段。

![](/images/docs/installation_channel.png)

退订通道也很简单：

```objc
// When users indicate they are no longer Giants fans, we unsubscribe them.
PFInstallation *currentInstallation = [PFInstallation currentInstallation];
[currentInstallation removeObject:@"Giants" forKey:@"channels"];
[currentInstallation saveInBackground];
```

订阅的通道集缓存在 `currentInstallation` 目标中：

```objc
NSArray *subscribedChannels = [PFInstallation currentInstallation].channels;
```

如果您想通过 Cloud Code 或数据浏览器修改通道，要注意，您需要在这一行前面调用某种类型的 `fetch`，以获取最近的通道。

#### 向通道发送推送通知

在 iOS SDK 中，以下代码可用于提醒&ldquo;Giants&rdquo;（巨人队）通道的所有订阅者他们最喜爱的球队刚才得分了。这在 iOS 用户的设备上将显示为通知中心提醒，而在 Android 用户的设备上将显示为系统托盘通知。

```objc
// Send a notification to all devices subscribed to the "Giants" channel.
PFPush *push = [[PFPush alloc] init];
[push setChannel:@"Giants"];
[push setMessage:@"The Giants just scored!"];
[push sendPushInBackground];
```

如果您想将单条推送通知推送至多个通道，可以采用通道 `NSArray`。

```objc
NSArray *channels = [NSArray arrayWithObjects:@"Giants", @"Mets", nil];
PFPush *push = [[PFPush alloc] init];
// Be sure to use the plural 'setChannels'.
[push setChannels:channels];
[push setMessage:@"The Giants won against the Mets 2-3."];
[push sendPushInBackground];
```

### 使用高级定位

对于很多应用程序来说，通道非常好用，但是有时您在定位推送通知接收者时需要更精确。Parse 允许您使用[查询 API](#queries) 编写关于 `Installation` 对象任何子集的查询，然后向它们发送推送通知。

由于 `%{ParseInstallation}` 是 `%{ParseObject}` 的子类，因此您可以保存您想要的任何数据，甚至可以在 `Installation` 对象与其他对象之间创建关系。这样您可以将推送通知发送给您自定义并且动态变化的一部分用户群体。

#### 保存安装数据

将数据保存在 `Installation` 对象上和将[任何其他数据](#objects)保存在 Parse 上一样简单。在我们的棒球应用程序上，用户可以获得关于球赛结果、得分和受伤报告的推送通知。

```objc
// Store app language and version
PFInstallation *installation = [PFInstallation currentInstallation];
[installation setObject:YES forKey:@"scores"];
[installation setObject:YES forKey:@"gameResults"];
[installation setObject:YES forKey:@"injuryReports"];
[installation saveInBackground];
```

您甚至可以在 `Installation` 对象与 Parse 上保存的其他类之间创建关系。例如，要将 PFInstallation 与某个用户关联，您只需要将当前用户保存在 `%{ParseInstallation}` 上即可。

```objc
// Associate the device with a user
PFInstallation *installation = [PFInstallation currentInstallation];
installation[@"user"] = [PFUser currentUser];
[installation saveInBackground];
```

#### 向查询发送推送通知

将数据储存在 `Installation` 对象中之后，您可以使用 `PFQuery` 来定位这些设备的某个子集。`Installation` 查询的运行方式与其他任何 [Parse 查询](#queries)相同，但我们使用专门的静态方法 `[PFInstallation query]` 来创建它。我们将此查询设置在我们的 `PFPush` 对象上以后，才可以发送通知。

```objc
// Create our Installation query
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"injuryReports" equalTo:YES];
// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
// Set our Installation query
[push setMessage:@"Willie Hayes injured by own pop fly."];
[push sendPushInBackground];
```

我们甚至可以将查询与通道一同使用。若要向&ldquo;Giants&rdquo;（巨人队）通道的所有订阅者发送推送通知，但是又要过滤想接收得分更新消息的订阅者，我们可以执行以下操作：

```objc
// Create our Installation query
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"channels" equalTo:@"Giants"];
// Set channel
[pushQuery whereKey:@"scores" equalTo:YES];
// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
[push setMessage:@"Giants scored against the A's! It's now 2-2."];
[push sendPushInBackground];
```

如果我们在 `Installation` 类中储存了与其他对象的关系，我们也可以在查询中使用这些关系。例如，我们可以向这样向给定位置附近的所有用户发送推送通知：

```objc
// Find users near a given location
PFQuery *userQuery = [PFUser query];
[userQuery whereKey:@"location"
           nearGeoPoint:stadiumLocation
           withinMiles:[NSNumber numberWithInt:1]]
// Find devices associated with these users
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"user" matchesQuery:userQuery];

// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
// Set our Installation query
[push setMessage:@"Free hotdogs at the Parse concession stand!"];
[push sendPushInBackground];
```

## 发送选项

���送通知不仅仅只是发���消息。在 iOS 中，推送通知还可以包括待播放的声音、待显示的图标标记数字以及您希望发送的任何自定义数据。若是时效性通知，还可设置通知的到期日期。

### 自定义您的通知

如果您不仅仅只想发送一条消息，则需要使用 `NSDictionary` 打包所有这些数据。有些保留字段有特殊意义。

*   **`alert`**：通知的提醒消息。
*   **`badge`**：_（仅限 iOS ）_应用程序图标右上角显示的值。可将其设置为一个值或 `Increment`，以便将当前值加 1。
*   **`sound`**：_（仅限 iOS）_应用程序包中声音文件的名称。
*   **`content-available`**：_（仅限 iOS）_如果您在编写 [Newsstand](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html) 应用程序或是使用远程通知后台模式（[iOS7 中引入](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10)，又称&ldquo;后台推送&rdquo;）的应用程序，请将此值设置为 1，以便激活后台下载。
*   **`action`**：_（仅限 Android）_收到推送通知后应激活 `Intent`。若未指定 `title` 或 `alert` 值，则 `Intent` 将被激活，但是用户看不到任何通知。
*   **`title`**：_（仅限 Android、Windows 8 和 Windows Phone 8）_Android 系统托盘或 Windows 消息条通知上显示的值。

例如，想要发送将当前标记数字加 1 并播放自定义声音的通知时，可以按编写以下代码。

```objc
NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:
                       @"The Mets scored! The game is now tied 1-1!", @"alert",
                       @"Increment", @"badge",
                       @"cheering.caf", @"sound",
                       nil];
PFPush *push = [[PFPush alloc] init];
[push setChannels:[NSArray arrayWithObjects:@"Mets", nil]];
[push setData:data];
[push sendPushInBackground];
```

您还可以在此字典中指定您自己的数据。正如我们通过[接收通知](#receiving)小节所知，只有当用户通过通知打开您的应用程序时，您才能访问该数据。当用户打开某些通知时，这可以用来显示不同的视图控制器。

```objc
NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:
                        @"Ricky Vaughn was injured in last night's game!", @"alert",
                        @"Vaughn", @"name",
                        @"Man bites dog", @"newsItem",
                        nil];
PFPush *push = [[PFPush alloc] init];
[push setQuery:injuryReportsQuery];
[push setChannel:@"Indians"];
[push setData:data];
[push sendPushInBackground];
```

无论您的推送通知增加应用程序标记值还是将其设置为一个特定值，您的应用程序最终都要清除其标记。这在[清除标记](#receiving)中有介绍。

### 设置有效期

用户设备关机或未连接网络的情况下，推送通知无法送达。如果您想发送具有时效性、不适合太晚发送的通知，您可以为其设置有效期。这样可以避免向用户提醒可能不再相关的信息。

`PFPush` 类提供了两个方法帮助您为通知设置有效期。第一个参数是 `expireAtDate:`，该参数用 `NSDate` 规定 Parse 停止尝试发送通知的时间。

```objc
// Create date object for tomorrow
NSDateComponents *comps = [[NSDateComponents alloc] init];
[comps setYear:2015];
[comps setMonth:8];
[comps setDay:14];
NSCalendar *gregorian =
  [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
NSDate *date = [gregorian dateFromComponents:comps];

// Send push notification with expiration date
PFPush *push = [[PFPush alloc] init];
[push expireAtDate:date];
[push setQuery:everyoneQuery];
[push setMessage:@"Season tickets on sale until August 8th!"];
[push sendPushInBackground];
```

但是采用这种方法需注意以下事项。由于设备时钟可能不准确，所以您得到的结果可能不准确。为此，`PFPush` 类还提供了接受 `NSTimeInterval` 对象的 `expireAfterTimeInterval:` 方法。规定时间段过后，通知将失效。

```objc
// Create time interval
NSTimeInterval interval = 60*60*24*7; // 1 week

// Send push notification with expiration interval
PFPush *push = [[PFPush alloc] init];
[push expireAfterTimeInterval:interval];
[push setQuery:everyoneQuery];
[push setMessage:@"Season tickets on sale until next week!"];
[push sendPushInBackground];
```

### 通过平台定位

如果您创建了跨平台应用程序，则可能想要只定位某种操作系统的设备。高级定位可以让您过滤定位哪些设备。

以下示例为向 Android、iOS 和 Windows 8 用户发送不同通知。

```objc
PFQuery *query = [PFInstallation query];
[query whereKey:@"channels" equalTo:@"suitcaseOwners"];

// Notification for Android users
[query whereKey:@"deviceType" equalTo:@"android"];
PFPush *androidPush = [[PFPush alloc] init];
[androidPush setMessage:@"Your suitcase has been filled with tiny robots!"];
[androidPush setQuery:query];
[androidPush sendPushInBackground];

// Notification for iOS users
[query whereKey:@"deviceType" equalTo:@"ios"];
PFPush *iOSPush = [[PFPush alloc] init];
[iOSPush setMessage:@"Your suitcase has been filled with tiny apples!"];
[iOSPush setChannel:@"suitcaseOwners"];
[iOSPush setQuery:query];
[iOSPush sendPushInBackground];

// Notification for Windows 8 users
[query whereKey:@"deviceType" equalTo:@"winrt"];
PFPush *winPush = [[PFPush alloc] init];
[winPush setMessage:@"Your suitcase has been filled with tiny glass!"];
[winPush setQuery:query];
[winPush sendPushInBackground];

// Notification for Windows 8 users
[query whereKey:@"deviceType" equalTo:@"winphone"];
PFPush *winPush = [[PFPush alloc] init];
[wpPush setMessage:@"Your suitcase is very hip; very metro."];
[wpPush setQuery:query];
[wpPush sendPushInBackground];
```

## 推送通知排程

iOS SDK 目前不支持发送排程的推送通知。了解 REST API、JavaScript SDK 或 Web Console。

## 接收推送通知

我们在[自定义您的通知](#options-data)部分中看到的，可以随通知消息一起发送任意数据。当用户打开一个通知时，我们可以利用该数据修改您应用程序的行为。例如，打开的通知提示好友评论了您的照片，最好能够展示该照片。

由于 Apple 对数据包大小的限制，所以您需要谨慎管理发送的额外数据量，因为它会减小您消息的最大容许长度。因此，建议您保持额外的键和值尽可能小。

```objc
NSDictionary *data = @{
    @"alert": @"James commented on your photo!",
    @"p": @"vmRZXZ1Dvo" // Photo's object id
};
PFPush *push = [[PFPush alloc] init];
[push setQuery:photoOwnerQuery];
[push setData:data];
[push sendPushInBackground];
```

### 回应净负载

从通知打开应用时，可以通过 `launchOptions` 词典在 `application:didFinishLaunchingWithOptions:` 方法中查看数据。

```objc
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    . . .
    // Extract the notification data
    NSDictionary *notificationPayload = launchOptions[UIApplicationLaunchOptionsRemoteNotificationKey];
    // Create a pointer to the Photo object
    NSString *photoId = [notificationPayload objectForKey:@"p"];
    PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@"Photo"
                                      objectId:photoId];
    // Fetch photo object
    [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
        // Show photo view controller
        if (!error && [PFUser currentUser]) {
            PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];
            [self.navController pushViewController:viewController animated:YES];
        }
    }];
}
```

若收到通知时您的应用已经在运行，那么可以通过 `userInfo` 词典在 `application:didReceiveRemoteNotification:fetchCompletionHandler:` 方法中查看数据。

```objc
- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))handler {
    // Create empty photo object
    NSString *photoId = [userInfo objectForKey:@"p"];
    PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@"Photo"
                                      objectId:photoId];
    // Fetch photo object
    [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
        // Show photo view controller
        if (error) {
            handler(UIBackgroundFetchResultFailed);
        } else if ([PFUser currentUser]) {
            PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];
            [self.navController pushViewController:viewController animated:YES];
            handler(UIBackgroundFetchResultNewData);
        } else {
            handler(UIBackgroundModeNoData);
        }
    }];
}
```

若想了解有关处理推送通知的更多内容，请查看 Apple 的[本地和推送通知编程指南](http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/IPhoneOSClientImp/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW1)。

### 跟踪推送和应用开启次数

为了跟踪您的用户在一段时间内的参与情况以及推送通知的效果，我们在 `PFAnalytics` 类内提供了一些回调方法。可以在您的应用程序面板上查看应用程序开启次数和与推送相关的开启率。

首先，向您的 `application:didFinishLaunchingWithOptions:` 方法添加以下代码，以收集有关应用程序打开时间和触发因素的信息。额外的检查可确保，即使 iOS 7 有更先进的后台推送功能，单一逻辑应用开启或推送开启事件计数方法也是一样。

```objc
if (application.applicationState != UIApplicationStateBackground) {
    // Track an app open here if we launch with a push, unless
    // "content_available" was used to trigger a background push (introduced
    // in iOS 7). In that case, we skip tracking here to avoid double
    // counting the app-open.
    BOOL preBackgroundPush = ![application respondsToSelector:@selector(backgroundRefreshStatus)];
    BOOL oldPushHandlerOnly = ![self respondsToSelector:@selector(application:didReceiveRemoteNotification:fetchCompletionHandler:)];
    BOOL noPushPayload = ![launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];
    if (preBackgroundPush || oldPushHandlerOnly || noPushPayload) {
        [PFAnalytics trackAppOpenedWithLaunchOptions:launchOptions];
    }
}
```

其次，若您的应用程序正在运行或在后台运行，`application:didReceiveRemoteNotification:` 方法会代而处理推送负载。当应用程序在后台运行时，若用户针对推送通知进行操作，那么应用程序会被调到前台。若要在应用程序&ldquo;通过推送通知打开&rdquo;时跟踪此变化，在调用任何跟踪代码前再执行一次检查：

```objc
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
    if (application.applicationState == UIApplicationStateInactive) { 
        // The application was just brought from the background to the foreground, 
        // so we consider the app as having been "opened by a push notification." 
        [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];
    }
}
```

最后，若使用 iOS 7 的任何新推送功能（包括新&ldquo;可用内容&rdquo;推送功能），还必须要执行 iOS 7 专用处理代码。

```objc
- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
            if (application.applicationState == UIApplicationStateInactive) {
                [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];
            }
}
```

#### 跟踪 OS X

若您的 OS X 应用支持接收推送通知，而且您喜欢跟踪推送相关的应用程序打开次数，请将回调方法添加到 `application:didReceiveRemoteNotification:` 方法中（与 iOS 相同）并将以下代码添加到 `applicationDidFinishLaunching:` 中

```objc
- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {
    // ... other Parse setup logic here
    [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:[aNotification userInfo]];
}
```

#### 跟踪本地通知（仅限 iOS）

若要跟踪围绕本地通知的分析，请注意_除了_调用 `application:didFinishLaunchingWithOptions:`以外，还需调用 `application:didReceiveLocalNotification:`。请注意避免跟踪重复事件。

#### 清除标记

清除应用标记的最佳时间一般是打开应用时。设置当前安装应用的标记属性会更新应用程序的图标标记编号，确保下次保存时会将最新标记值保存到服务器中。您只需要执行以下代码：

```objc
- (void)applicationDidBecomeActive:(UIApplication *)application {
    PFInstallation *currentInstallation = [PFInstallation currentInstallation];
    if (currentInstallation.badge != 0) {
        currentInstallation.badge = 0;
        [currentInstallation saveEventually];
    }
    // ... 
}
```

[UIApplicationDelegate 文件](http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIApplicationDelegate_Protocol/Reference/Reference.html)中包含有关应用生命周期中回调接口的更多信息；与重置标记计数关系最密切的挂接点是 `applicationDidBecomeActive:`、`application:didFinishLaunchingWithOptions:` 和 `application:didReceiveRemoteNotification:`。

## 疑难解答

设置推送通知经常会困扰开发人员。这个过程复杂而且经常会出现各种问题。碰到问题时，请尝试以下这些疑难解答提示。 

*   确保您在 `Info.plist` 文件中使用正确的捆绑标识符（参阅 [iOS 推送通知教程](/tutorials/ios-push-notifications)步骤 4.1 步&ldquo;配置推送启用的 iOS 应用程序&rdquo;）。
*   确保在&ldquo;项目 &gt; 生成设置&rdquo;中设置正确的预置配置文件（参阅 iOS 推送通知教程步骤 4.3）。
*   清除您的项目和重启 Xcode。
*   通过导航至[证书、标识符和预置配置文件](https://developer.apple.com/account/overview.action)，更改预置配置文件的应用 ID 设置，然后再改回来，就可以尝试重新生成预置配置文件。您需要按照教程步骤 2（创建预置配置文件）中的说明重新安装预置配置文件，并按照步骤 4（配置推送启用的 iOS 应用程序）中的说明在项目 Build 设置中进行配置。
*   打开 Xcode 管理器，从您的电脑和 iOS 设备中删除所有过期的和未使用的预置配置文件。
*   如果一切编译和运行都没有错误，但您仍然收不到推送，请确保您的应用程序已获得接收通知的权限。您可以在 iOS 设备的 `Settings > Notification >        YourAppName` 上验证这一点。*   若您的应用已经获得接收推送通知的权限，请确保您用正确的预置配置文件对应用进行代码签名。若您已将开发推送通知证书上传至 Parse，用开发预置配置文件创建应用时，则只会收到推送通知。如果你已经上传了产品推送通知证书，你应该用一个发行预置配置文件签署您的应用程序。用产品推送通知证书配置您的应用时，临时配置文件和 App Store 发行配置文件应均可使用。
*   在 Apple iOS 预置门户中启用针对现有应用 ID 的推送通知时，请务必重新生成预置配置文件，然后将更新后的配置文件添加到 Xcode 管理器中。
*   发行推送通知需要在向 App Store 提交应用之前启用。请在提交应用前确保已执行第 7 节&ldquo;为 App Store 做好准备&rdquo;中所述的操作。若您跳过任何一步，都可能需要向 App Store 提交新的二进制代码。
*   复查您的应用，确保应用可以在签署临时配置文件时接收发行推送通知。该配置是您接触 App Store 预置应用的最近距离。
*   在您的 Parse 推送控制台中确认接收者数量。其是否与预期的接收者数量相符？否则的话，您的推送未进行正确的受众定位。
