# Пользователи

В основе многих приложений лежит принцип аккаунтов пользователей, которые позволяют пользователям получить безопасный доступ к своей информации. Мы предоставляем специальный класс пользователей под названием `%{ParseUser}`, который автоматически обрабатывает большинство функций, необходимых для управления аккаунтами пользователей.

При помощи этого класса можно будет добавлять функции аккаунтов пользователей в приложение.

`%{ParseUser}` &mdash; это подкласс объекта `%{ParseObject}`, который имеет такие же функции, например гибкую схему, автоматическое сохранение и интерфейс значений ключа. Все методы для объекта `%{ParseObject}` также существуют для подкласса `%{ParseUser}`. Разница заключается в том, что подкласс PFUser имеет специальные дополнения, специфические для аккаунтов пользователей.

## Свойства

Класс `%{ParseUser}` имеет свойства, которые отличают его от класса `%{ParseObject}`:

*   username: имя пользователя для пользователя (обязательно).
*   password: пароль для пользователя (обязательно при регистрации).
*   email: адрес электронной почты для пользователя (не обязательно).

Каждое из этих свойств будет подробно рассмотрено при ознакомлении с различными вариантами использования для пользователей. Помните, что при настройке `username` и `email` при помощи этих свойств не нужно настраивать их при помощи метода `setObject:forKey:` &mdash; настройка выполняется автоматически.

## Регистрация

В первую очередь ваше приложение, скорее всего, попросит пользователя зарегистрироваться. Приведенный ниже код демонстрирует типичный процесс регистрации:

```objc
 - (void)myMethod {
    PFUser *user = [PFUser user];
    user.username = @"my name";
    user.password = @"my pass";
    user.email = @"email@example.com";

    // other fields can be set just like with PFObject
    user[@"phone"] = @"415-392-0202";

    [user signUpInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {
        if (!error) {
            // Hooray! Let them use the app now.
        } else {
            NSString *errorString = [error userInfo][@"error"];
            // Show the errorString somewhere and let the user try again.
        }
    }];
}
```

Этот вызов асинхронно создаст нового пользователя в вашем приложении Parse. Перед этим будет осуществлена проверка уникальности имени пользователя и адреса электронной почты. Кроме того, осуществляется безопасное хэширование пароля в облаке. Пароли никогда не хранятся, а также не передаются обратно клиентам в виде незашифрованного текста.

Обратите внимание на то, что использовался метод `signUp`, а не `save`. Новые пользователи `%{ParseUser}` всегда должны создаваться при помощи метода `signUp`. Последующие обновления пользователя могут выполняться путем вызова метода `save`.

Метод `signUp` имеет несколько разновидностей с возможностью возвращать ошибки, а также синхронные версии. Как обычно, настоятельно рекомендуется по возможности использовать асинхронные версии, чтобы не блокировать интерфейс пользователя приложения. Дополнительные сведения об этих специфических методах см. в [документации по API](/docs/ios/).

Если регистрация не проходит успешно, следует ознакомиться с объектом ошибки, который возвращается. Самая частая ошибка происходит в том случае, когда имя пользователя или адрес электронной почты уже заняты другим пользователем. Необходимо четко объяснить это пользователям и попросить их использовать другое имя пользователя.

В качестве имени пользователя можно использовать адрес электронной почты. Просто попросите пользователей ввести адрес электронной почты, но внесите его в свойства имени пользователя. Подкласс `%{ParseUser}` будет работать как обычно. Эта процедура будет описана в разделе о сбросе пароля.

## Вход

После регистрации пользователи должны войти в свой аккаунт. Для этого можно использовать метод класса `logInWithUsernameInBackground:password:`.

```objc
[PFUser logInWithUsernameInBackground:@"myname" password:@"mypass"
    block:^(PFUser *user, NSError *error) {
        if (user) {
            // Do stuff after successful login.
        } else {
            // The login failed. Check error to see why.
        }
}];
```

## Подтверждение электронной почты

Включение подтверждения электронной почты в параметрах приложения позволяет приложению выделить часть функций для пользователей с подтвержденным адресом электронной почты. Подтверждение электронной почты добавляет ключ `emailVerified` к объекту `%{ParseUser}`. Когда ключ `email` объекта `%{ParseUser}` настроен или изменен, для переменной `emailVerified` устанавливается значение `false`. После этого Parse отправит пользователю ссылку, которая установит для переменной `emailVerified` значение `true`.

Существуют три состояния переменной `emailVerified`:

1.  `true`: пользователь подтвердил свой электронный адрес, перейдя по ссылке, присланной по электронной почте от Parse. Объекты `PFUsers` не могут иметь значение `true` при первоначальном создании аккаунта пользователя.
2.  `false`: при последнем обновлении объекта `%{ParseUser}` пользователь не подтвердил свой адрес электронной почты. Если переменная `emailVerified` имеет значение `false`, вызовите метод `refresh:` для объекта `%{ParseUser}`.
3.  _Отсутствует_: объект `%{ParseUser}` был создан, когда подтверждение электронной почты было отключено, или у объекта `%{ParseUser}` нет поля `email`.

## Текущий пользователь

Если пользователю нужно входить каждый раз при запуске приложения, это неудобно. Подобную ситуацию можно избежать при помощи кэшированного объекта `currentUser`.

Каждый раз при использовании любого метода регистрации и входа пользователь кэшируется на диске. Этот кэш может считаться сеансом, поэтому автоматически считается, что для пользователя осуществлен вход:

```objc
PFUser *currentUser = [PFUser currentUser];
if (currentUser) {
    // do stuff with the user
} else {
    // show the signup or login screen
}
```

Можно очистить данные по текущему пользователю, осуществив для него выход:

```objc
[PFUser logOut];
PFUser *currentUser = [PFUser currentUser]; // this will now be nil
```

## Анонимные пользователи

Возможность связи данных и объектов с конкретными пользователями является очень важной, но иногда это может быть необходимо без указания имени пользователя и пароля.

Анонимный пользователь &mdash; это пользователь, которого можно создать без имени пользователя и пароля, но ко��орый будет иметь такие же возможности, что и любой другой пользователь `%{ParseUser}`. После выхода анонимный пользователь удаляется, а его данные больше не доступны.

Анонимного пользователя можно создать при помощи класса `PFAnonymousUtils`:

```objc
[PFAnonymousUtils logInWithBlock:^(PFUser *user, NSError *error) {
    if (error) {
        NSLog(@"Anonymous login failed.");
    } else {
        NSLog(@"Anonymous user logged in.");
    }
}];
```

Анонимного пользователя можно преобразовать в обычного, настроив имя пользователя и пароль, а затем вызвав метод `signUp`, осуществив вход или связав пользователя со службой [Facebook](#fbusers) или [Twitter](#twitterusers). Для преобразованного пользователя будут сохранены все его данные.  Чтобы определить, является ли текущий пользователь анонимным, можно проверить метод `PFAnonymousUtils isLinkedWithUser`:

```objc
if ([PFAnonymousUtils isLinkedWithUser:[PFUser currentUser]]) {
    [self enableSignUpButton];
} else {
    [self enableLogOutButton];
}
```

Анонимные пользователи также могут автоматически создаваться без сетевого запроса, поэтому можно начать работу с пользователем сразу же после запуска приложения.  Если включить автоматическое создание анонимных пользователей при запуске приложения, метод `[PFUser currentUser]` никогда не приобретет значение `nil`. Пользователь будет автоматически создаваться в облаке при первоначальном сохранении пользователя или любого объекта, связанного с пользователем.  До этого момента идентификатор объекта пользователя будет иметь значение `nil`.  Автоматическое создание пользователей обеспечивает непосредественную ассоциацию данных с пользователями.  Например, для функции `application:didFinishLaunchingWithOptions:` можно использовать такой код:

```objc
[PFUser enableAutomaticUser];
[[PFUser currentUser] incrementKey:@"RunCount"];
[[PFUser currentUser] saveInBackground];
```

## Настройка текущего пользователя

Если вы создали собственную программу авторизации или другим способом осуществили вход пользователя со стороны сервера, теперь можно передать сеансовый идентификатор клиенту и использовать метод `become`. Этот метод подтвердит сеансовый идентификатор перед настройкой текущего пользователя.

```objc
[PFUser becomeInBackground:@"session-token-here" block:^(PFUser *user, NSError *error) {
    if (error) {
        // The token could not be validated.
    } else {
        // The current user is now set to user.
    }
}];
```

## Безопасность объектов «пользователь»

Класс `%{ParseUser}` защищен по умолчанию. Данные, хранящиеся в классе `%{ParseUser}`, могут изменяться только этим пользователем. По умолчанию данные по-прежнему может прочитать любой клиент. Поэтому некоторые объекты `%{ParseUser}` могут быть авторизованы и изменены, в то время как другие будут доступны только для чтения.

В частности, будет невозможно вызвать любой из методов `save` или `delete`, если объект `%{ParseUser}` не был получен при помощи метода авторизации, например `logIn` или `signUp`. Таким образом, только пользователи могут изменять собственные данные.

Представленный ниже код демонстрирует эту политику безопасности:

```objc
PFUser *user = [PFUser logInWithUsername:@"my_username" password:@"my_password"];
user.username = "my_new_username"; // attempt to change username
[user save]; // This succeeds, since the user was authenticated on the device

// Get the user from a non-authenticated method
PFQuery *query = [PFUser query];
PFUser *userAgain = (PFUser *)[query getObjectWithId:user.objectId];

userAgain.username = "another_username";

// This will throw an exception, since the PFUser is not authenticated
[userAgain save];
```

Объект `%{ParseUser}`, полученный через метод `currentUser`, будет всегда проверяться на подлинность.

Если необходимо проверить, авторизирован ли объект `%{ParseUser}`, можно вызвать метод `isAuthenticated`. Вам не потребуется проверять метод `isAuthenticated` для объектов `%{ParseUser}`, полученных через метод авторизации.

## Безопасность других объектов

Модель безопасности, применимая к объекту `%{ParseUser}`, может применяться и к другим объектам. Для любого объекта можно указать, какие пользователи могут читать объект, а какие могут изменять его. Для поддержки такого типа безопасности каждый объект имеет [список управления доступом](http://en.wikipedia.org/wiki/Access_control_list), реализованный при помощи класса `PFACL`.

Самый простой способ использования класса `PFACL` заключается в указании, что объект может быть только прочитан и записан одним пользователем. Чтобы создать такой объект, сперва необходимо осуществить вход при помощи пользователя `%{ParseUser}`. Затем метод `ACLWithUser` генерирует класс `PFACL`, который ограничивает доступ для этого пользователя. ACL объекта обновляется при сохранении объекта, как и любое другое свойство. Таким образом, чтобы создать конфиденциальное примечание, доступ к которому будет только у текущего пользователя, необходимо выполнить следующее:

```objc
PFObject *privateNote = [PFObject objectWithClassName:@"Note"];
privateNote[@"content"] = @"This note is private!";
privateNote.ACL = [PFACL ACLWithUser:[PFUser currentUser]];
[privateNote saveInBackground];
```

После этого данное примечание будет доступно только текущему пользователю, несмотря на то, что оно будет доступно с любого устройства, на котором этот пользователь осуществил вход. Эта функция полезна для приложений, в которых необходимо предоставить доступ к пользовательским данным на разных устройствах, например для личного списка дел.

Разрешения можно также предоставлять для каждого пользователя в отдельности. Вы можете добавлять отдельные разрешения к классу `PFACL` при помощи методов `setReadAccess:forUser:` и `setWriteAccess:forUser:`. Например, у вас есть сообщение, которое будет отправлено группе разных пользователей, при этом каждый из них будет иметь права на чтение и удаление этого сообщения:

```objc
PFObject *groupMessage = [PFObject objectWithClassName:@"Message"];
PFACL *groupACL = [PFACL ACL];
// userList is an NSArray with the users we are sending this message to.
for (PFUser *user in userList) {
    [groupACL setReadAccess:YES forUser:user];
    [groupACL setWriteAccess:YES forUser:user];
}
groupMessage.ACL = groupACL;
[groupMessage saveInBackground];
```

Можно также предоставлять разрешения всем пользователям одновременно при помощи методов `setPublicReadAccess:` и `setPublicWriteAccess:`. Таким образом разрешается использование таких структур, как публикация комментариев на форуме. Например, чтобы создать публикацию, которую сможет редактировать только ее автор, но мог бы читать любой пользователь:

```objc
PFObject *publicPost = [PFObject objectWithClassName:@"Post"];
PFACL *postACL = [PFACL ACLWithUser:[PFUser currentUser]];
[postACL setPublicReadAccess:YES];
publicPost.ACL = postACL;
[publicPost saveInBackground];
```

Чтобы обеспечить безопасность данных пользователей по умолчанию, можно настроить, чтобы ACL по умолчанию применялся для всех вновь созданных объектов `PFObjects`:

```objc
[PFACL setDefaultACL:defaultACL withAccessForCurrentUser:YES];
```

В приведенном выше коде второй параметр setDefaultACL создает команду Parse на обеспечение того, что ACL по умолчанию, назначенный во время создания объекта, дает текущему пользователю доступ к чтению и записи в этот момент.  Без этого параметра необходимо будет сбрасывать параметр defaultACL каждый раз, когда пользователь входит или выходит, чтобы текущий пользователь получал соответствующий доступ.  При наличии этого параметра можно игнорировать изменения текущего пользователя, пока явно не нужно будет предоставлять различные виды доступа.

Параметры ACL по умолчанию упрощают создание приложений, придерживающихся общих примеров доступа. Приложения вроде Twitter, в которых материалы пользователя обычно видны всем, могут настраивать ACL по умолчанию следующим образом:

```objc
PFACL *defaultACL = [PFACL ACL];
[defaultACL setPublicReadAccess:YES];
[PFACL setDefaultACL:defaultACL withAccessForCurrentUser:YES];
```

Для таких приложений, как Dropbox, в которых данные пользователя доступны только самому пользователю, пока не выдано явное разрешение, будет указываться ACL по умолчанию, при котором только текущий пользователь имеет доступ:

```objc
[PFACL setDefaultACL:[PFACL ACL] withAccessForCurrentUser:YES];
```

Для приложения, логирующего данные в Parse, но не предоставляющего доступ пользователям к этим данным, будет запрещен доступ для текущего пользователя с указанием запрещающего ACL:

```objc
[PFACL setDefaultACL:[PFACL ACL] withAccessForCurrentUser:NO];
```

Запрещенные действия, например, удаление объекта, к которому отсутствует доступ с правами записи, приведут к коду ошибки `kPFErrorObjectNotFound`. Из соображений безопасности таким образом предотвращается возможность клиентов определять, какие идентификаторы объектов существуют и защищены, а какие идентификаторы не существуют вообще.

## Сброс паролей

Общеизвестно, что как только в системе появляются пароли, пользователи склонны их забывать. В таких случаях наша библиотека обеспечивает безопасные способы сброса паролей.

Чтобы запустить процедуру сброса пароля, запросите у пользователя адрес электронной почты, а затем выполните вызов:

```objc
[PFUser requestPasswordResetForEmailInBackground:@"email@example.com"];
```

Система попытается найти совпадение для указанной электронной почты с электронной почтой пользователя или полем имени пользователя, а затем отправит пользователю электронное письмо для сброса пароля. Благодаря этому можно разрешить пользователям использовать свою электронную почту в качестве имени пользователя. Вы также можете собирать данные об электронной почте отдельно и хранить ее в поле электронной почты.

Процедура сброса пароля выполняется следующим образом:

1.  Пользователь запрашивает сброс пароля и вводит свой адрес электронной почты.
2.  Parse отправляет на указанный адрес электронное письмо со специальной ссылкой для сброса пароля.
3.  Пользователь нажимает ссылку для сброса и переадресуется на специальную страницу Parse, где можно ввести новый пароль.
4.  Пользователь вводит новый пароль. Пароль сбрасывается на новый пароль, указанный пользователем.

Обратите внимание, что в этой процедуре рассылка будет ссылаться на ваше приложение по тому названию, которое было указано при создании этого приложения в Parse.

## Запросы

Для выполнения запросов пользователей необходимо использовать специальный запрос пользователей:

```objc
PFQuery *query = [PFUser query];
[query whereKey:@"gender" equalTo:@"female"]; // find all the women
NSArray *girls = [query findObjects];
```

Кроме того, можно использовать метод `getUserObjectWithId:objectId`, чтобы найти объект `%{ParseUser}` по его идентификатору.

## Ассоциации

Ассоциации, включающие объект `%{ParseUser}`, работают в рамках стандартного решения. Например, вы создаете приложение для блогов. Чтобы сохранить новую публикацию для пользователя и извлечь все его публикации:

```objc
PFUser *user = [PFUser currentUser];
// Make a new post
PFObject *post = [PFObject objectWithClassName:@"Post"];
post[@"title"] = @"My New Post";
post[@"body"] = @"This is some great content.";
post[@"user"] = user;
[post save];

// Find all posts by the current user
PFQuery *query = [PFQuery queryWithClassName:@"Post"];
[query whereKey:@"user" equalTo:user];
NSArray *usersPosts = [query findObjects];
```

## Пользователи Facebook

Parse предоставляет простую интеграцию Facebook с вашим приложением. Пакет SDK Facebook может использоваться с нашим SDK и интегрируется с классом `%{ParseUser}` для простой связи пользователей с их учетными записями в Facebook.

<div class='tip info'><div>
  Узнайте, как использовать Parse с Facebook API для создания приложения для просмотра профилей. В [Руководстве по интеграции Facebook в iOS](/tutorials/integrating-facebook-in-ios) рассказано о создании и входе для пользователей `PFUsers` через Facebook, а также выполнении запросов в Facebook Graph API.
</div></div>

Благодаря интеграции с Facebook можно связать авторизированного пользователя Facebook с пользователем `%{ParseUser}`. С помощью всего нескольких строк кода, можно предоставить для приложения возможность входа с Facebook и сохранения данных пользователей в Parse.

### Установка

Чтобы начать использовать Facebook с Parse, необходимо выполнить следующие действия:

1.  [Установите приложение Facebook](https://developers.facebook.com/apps), если вы еще этого не сделали.
2.  Добавьте идентификатор приложения Facebook вашего приложения на странице параметров вашего приложения Parse.
3.  Выполните инструкции Facebook для [начала работы с SDK Facebook](https://developers.facebook.com/docs/getting-started/facebook-sdk-for-ios/), чтобы создать приложение, связанное с SDK Facebook. Повторно проверьте, чтобы значения FacebookAppID и URL Scheme были добавлены в файл .plist приложения.

Добавьте следующий код при инициализации Parse SDK, например, как в методе `application:didFinishLaunchingWithOptions:`.

```objc
[PFFacebookUtils initializeFacebook];
```

Добавьте следующие обработчики в делегате приложения:

```objc
- (BOOL)application:(UIApplication *)application     openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication  annotation:(id)annotation {
     return [FBAppCall handleOpenURL:url   sourceApplication:sourceApplication withSession:[PFFacebookUtils session]];
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    [FBAppCall handleDidBecomeActiveWithSession:[PFFacebookUtils session]];
}
```

Существует два основных способа использования Facebook с пользователями Parse: (1) вход (или регистрация) в качестве пользователя Facebook и создание пользователя `%{ParseUser}`, или (2) связывание Facebook с существующим пользователем `%{ParseUser}`.

### Вход и регистрация

Класс `%{ParseUser}` предоставляет разрешение для пользователей входить или регистрироваться через Facebook. Это осуществляется при помощи метода `logInWithPermissions` следующим образом:

```objc
[PFFacebookUtils logInWithPermissions:permissions block:^(PFUser *user, NSError *error) {
    if (!user) {
        NSLog(@"Uh oh. The user cancelled the Facebook login.");
    } else if (user.isNew) {
        NSLog(@"User signed up and logged in through Facebook!");
    } else {
        NSLog(@"User logged in through Facebook!");
    }
}];
```

Parse совместим с Facebook SDK для iOS версии 3.2.

При выполнении этого кода происходит следующее:

1.  Пользователь видит диалоговое окно входа в Facebook.
2.  Пользователь авторизируется через Facebook, приложение получает обратный вызов при помощи `handleOpenURL`.
3.  Наш SDK получает данные Facebook и сохраняет их в класс `%{ParseUser}`. Если это новый пользователь на основе идентификатора Facebook, тогда создается этот пользователь.
4.  Блок кода вызывается пользователем.

Аргумент разрешений &mdash; это массив строк, который указывает, какие разрешения необходимы для вашего приложения от пользователя Facebook. Эти разрешения должны включать только разрешения на чтение. Интеграция пользователя `%{ParseUser}` не требует разрешений для работы в стандартном решении. [Подробнее о разрешениях см. в руководстве для разработчиков Facebook.](https://developers.facebook.com/docs/reference/api/permissions/)

Чтобы получить для пользователя разрешение на публикацию, например, чтобы приложение могло публиковать обновление статуса от имени пользователя, необходимо вызвать `[PFFacebookUtils reauthorizeUser:withPublishPermissions:audience:block]`:

```objc
[PFFacebookUtils reauthorizeUser:[PFUser currentUser]
                 withPublishPermissions:@["publish_actions"]
                 audience:FBSessionDefaultAudienceFriends
                 block:^(BOOL succeeded, NSError *error) {
                    if (succeeded) {
                        // Your app now has publishing permissions for the user
                    }
                 }];
```

<div class='tip info'><div>
  Вы самостоятельно решаете, нужно ли записывать необходимые данные от пользователя Facebook после прохождения авторизации. Чтобы выполнить это, необходимо [создать графический запрос через SDK Facebook](https://parse.com/questions/how-can-i-find-parse-users-that-are-facebook-friends-with-the-current-user).
</div></div>

### Связывание

Если необходимо связать существующего пользователя `%{ParseUser}` с аккаунтом Facebook, это можно сделать следующим образом:

```objc
if (![PFFacebookUtils isLinkedWithUser:user]) {
    [PFFacebookUtils linkUser:user permissions:nil block:^(BOOL succeeded, NSError *error) {
        if (succeeded) {
            NSLog(@"Woohoo, user logged in with Facebook!");
        }
    }];
}
```

Шаги, выполняемые при связывании, очень похожи на действия при входе. Разница состоит в том, что при успешном входе существующий пользователь `%{ParseUser}` обновляется сведениями из Facebook. Последующие входы через Facebook будут осуществлять вход пользователя в его существующий аккаунт.

Если необходимо отменить связь пользователя с Facebook, просто выполните следующее:

```objc
[PFFacebookUtils unlinkUserInBackground:user block:^(BOOL succeeded, NSError *error) {
    if (succeeded) {
        NSLog(@"The user is no longer associated with their Facebook account.");
    }
}];
```

### SDK Facebook и Parse

SDK Facebook iOS предоставляет ряд классов вспомогательных средств для взаимодействия с API Facebook. Как правило, класс `FBRequest` будет использоваться для взаимодействия с Facebook от имени пользователя, осуществившего вход. [Дополнительную информацию о SDK Facebook можно прочитать здесь](https://developers.facebook.com/docs/reference/ios/3.2).

Наша библиотека управляет для вас объектом `FBSession` пользователя. Можно просто вызвать метод `[PFFacebookUtils session]` для получения доступа к экземпляру сеанса, который затем передается в класс `FBRequest`.

## Пользователи Twitter

Аналогично Facebook, Parse также предоставляет простую интеграцию Twitter с вашим приложением. SDK Parse предоставляет простой способ авторизации и связи аккаунта Twitter с пользователями `%{ParseUser}`. Написав всего несколько строк кода, можно предоставить для приложения возможность входа с Twitter и сохранять данные пользователей в Parse.

### Установка

Чтобы начать использовать Twitter с Parse, необходимо выполнить следующие действия:

1.  [Установите приложение Twitter](https://dev.twitter.com/apps), если не установлено.
2.  Добавьте ключ клиента Twitter вашего приложения на странице параметров вашего приложения Parse.
3.  Когда появится запрос указать &quot;Callback URL&quot; для приложения Twitter, вставьте действующий URL-адрес. Это значение не будет использоваться приложением iOS или Android, но оно необходимо для обеспечения авторизации через Twitter.
4.  Добавьте библиотеки `Accounts.framework` и `Social.framework` в проект Xcode.
5.  Добавьте следующий код при инициализации SDK Parse, например, как при методе `application:didFinishLaunchingWithOptions:`.
```objc
    [PFTwitterUtils initializeWithConsumerKey:@"YOUR CONSUMER KEY"
                    consumerSecret:@"YOUR CONSUMER SECRET"];
```

При возникновении любых проблем, связанных с Twitter, рекомендуем просмотреть [официальную документацию Twitter](https://dev.twitter.com/docs).

Существует два основных способа использования Twitter с пользователями Parse: (1) вход при помощи Twitter и создание пользователя `%{ParseUser}`, или (2) связывание Twitter с существующим пользователем `%{ParseUser}`.

### Вход и регистрация

Класс `PFTwitterUtils` предоставляет разрешение для пользователей `%{ParseUser}` входить или регистрироваться через Twitter. Это осуществляется при помощи сообщений `logInWithBlock` или `logInWithTarget`:

```objc
[PFTwitterUtils logInWithBlock:^(PFUser *user, NSError *error) {
    if (!user) {
        NSLog(@"Uh oh. The user cancelled the Twitter login.");
        return;
    } else if (user.isNew) {
        NSLog(@"User signed up and logged in with Twitter!");
    } else {
        NSLog(@"User logged in with Twitter!");
    }
}];
```

При выполнении этого кода происходит следующее:

1.  Пользователь видит диалоговое окно входа в Twitter.
2.  Пользователь авторизируется через Twitter, приложение получает обратный вызов.
3.  Наш SDK получает данные Twitter и сохраняет их в класс `%{ParseUser}`. Если это новый пользователь на основе обработки Twitter, то создается этот пользователь.
4.  Класс `block` вызывается пользователем.

### Связывание

Если необходимо связать существующего пользователя `%{ParseUser}` с аккаунтом Twitter, это можно сделать следующим образом:

```objc
if (![PFTwitterUtils isLinkedWithUser:user]) {
    [PFTwitterUtils linkUser:user block:^(BOOL succeeded, NSError *error) {
        if ([PFTwitterUtils isLinkedWithUser:user]) {
            NSLog(@"Woohoo, user logged in with Twitter!");
        }
    }];
}
```

Шаги, выполняемые при связывании, очень похожи на действия при входе. Разница состоит в том, что при успешном входе существующий пользователь `%{ParseUser}` обновляется сведениями из Twitter. Последующие входы через Twitter будут осуществлять вход пользователя в его существующий аккаунт.

Если необходимо отменить связь пользователя с Twitter, просто выполните следующее:

```objc
[PFTwitterUtils unlinkUserInBackground:user block:^(BOOL succeeded, NSError *error) {
    if (!error && succeeded) {
        NSLog(@"The user is no longer associated with their Twitter account.");
    }
}];
```

### Вызовы API Twitter

Наш SDK обеспечивает простой способ регистрации запросов API HTTP в [Twitter REST API](https://dev.twitter.com/docs/api), когда у приложения есть связанный с Twitter пользователь `%{ParseUser}`.  Чтобы выполнить запрос через наш интерфейс API, можно использовать единичный объект `PF_Twitter`, предоставляемый методом `PFTwitterUtils`.

```objc
NSURL *verify = [NSURL URLWithString:@"https://api.twitter.com/1/account/verify_credentials.json"];
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:verify];
[[PFTwitterUtils twitter] signRequest:request];
NSURLResponse *response = nil;
NSData *data = [NSURLConnection sendSynchronousRequest:request
                                returningResponse:&response
                                error:&error];
```
