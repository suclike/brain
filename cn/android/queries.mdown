# 查询

## 基本查询

在许多情况下，`getInBackground` 不够强大，不能指定您想要检索的对象。`ParseQuery` 提供了不同的方法用于检索一系列对象而非仅仅检索单一对象。

常规模式是创建一个 `ParseQuery`，对其设置条件，然后用带 `FindCallback` 的 `findInBackground` 检索一个 `List` 的匹配 `ParseObject`。例如，若要检索 `playerName` 的得分，可以使用 `whereEqualTo` 方法限定键值。

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.whereEqualTo("playerName", "Dan Stemkoski");
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scoreList, ParseException e) {
               if (e == null) {
            Log.d("score", "Retrieved " + scoreList.size() + " scores");
        } else {
            Log.d("score", "Error: " + e.getMessage());
        }
    }
});
```

`findInBackground` 的机理类似于 `getInBackground`，因为它确保网络请求在后台线程上完成，并在主线程中运行其回调。

## 查询限制条件

有几种方法可以对 `ParseQuery` 找到的对象设置限制条件。您可以用 `whereNotEqualTo` 将具有特定键值对的对象过滤出来：

```java
query.whereNotEqualTo("playerName", "Michael Yabuti");
```

您可以给定多个限制条件，只有满足所有限制条件的对象才会出现在结果中。换句话说，这类似于 AND 类型的限制条件。

```java
query.whereNotEqualTo("playerName", "Michael Yabuti");
query.whereGreaterThan("playerAge", 18);
```

您可以使用 `setLimit` 来限制结果数量。默认结果限值为 100，但是 1 到 1000 之间的任意值都有效：

```java
query.setLimit(10); // limit to at most 10 results
```

如果您想要确切的一个结果，更加方便的方法是使用 `getFirst` 或`getFirstBackground`，而不是 `find`。

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.whereEqualTo("playerEmail", "dstemkoski@example.com");
query.getFirstInBackground(new GetCallback<ParseObject>() {
     public void done(ParseObject object, ParseException e) {
    if (object == null) {
      Log.d("score", "The getFirst request failed.");
    } else {
      Log.d("score", "Retrieved the object.");
    }
  }
});
```

您可以使用 `setSkip` 跳过前面的结果。这对分页非常有用：

```java
query.setSkip(10); // skip the first 10 results
```

对于可排序的数据，如数字和字符串，您可以控制结果返回的顺序：

```java
// Sorts the results in ascending order by the score field
query.orderByAscending("score");

// Sorts the results in descending order by the score field
query.orderByDescending("score");
```

您可以在查询中添加更多排序键，如下：

```java
// Sorts the results in ascending order by the score field if the previous sort keys are equal.
query.addAscendingOrder("score");

// Sorts the results in descending order by the score field if the previous sort keys are equal.
query.addDescendingOrder("score");
```

对于可排序的数据，你还可以在查询中使用对比：

```java
// Restricts to wins < 50
query.whereLessThan("wins", 50);

// Restricts to wins <= 50
query.whereLessThanOrEqualTo("wins", 50);

// Restricts to wins > 50
query.whereGreaterThan("wins", 50);

// Restricts to wins >= 50
query.whereGreaterThanOrEqualTo("wins", 50);
```

若您想要检索与几个不同值匹配的对象，您可以使用 `whereContainedIn`，提供一组可接受的值。这在用单一查询替代多个查询时通常比较有用。例如，如果您检索某个列表中任意玩家的得分：

```java
String[] names = {"Jonathan Walsh", "Dario Wunsch", "Shawn Simon"};
query.whereContainedIn("playerName", Arrays.asList(names));

```

若您想要检索与几个值都不匹配的对象，您可以使用 `whereKey:notContainedIn:`，提供一组可接受的值。例如，如果您想检索列表外玩家的得分：

```java
String[] names = {"Jonathan Walsh", "Dario Wunsch", "Shawn Simon"};
query.whereNotContainedIn("playerName", Arrays.asList(names));

```

若您想要检索有某一特定键集的对象，可以使用 `whereExists`。相反，若您想要检索没有某一特定键集的对象，可以使用 `whereDoesNotExist`。

```java
// Finds objects that have the score set
query.whereExists("score");

// Finds objects that don't have the score set
query.whereDoesNotExist("score");
``` 

您可以使用 `whereMatchesKeyInQuery` 方法获取符合以下要求的对象：对象中的一个键值与另一查询所得结果的对象集中的某一键值匹配。例如，如果您的一个类包含体育团队，而且您在用户类中储存了用户的家乡，那么您可以进行查询，找到家乡团队获奖的用户列表。该查询类似于：

```java
ParseQuery<ParseObject> teamQuery = ParseQuery.getQuery("Team");
teamQuery.whereGreaterThan("winPct", 0.5);
ParseQuery<ParseUser> userQuery = ParseUser.getQuery();
userQuery.whereMatchesKeyInQuery("hometown", "city", teamQuery);
userQuery.findInBackground(new FindCallback<ParseUser>() {
  void done(List<ParseUser> results, ParseException e) {
    // results has the list of users with a hometown team with a winning record
  }
});
```

相反，您可以使用 `whereDoesNotMatchKeyInQuery` 获取不符合以下要求的对象：对象中的一个键值与另一查询所得结果的对象集中的某一键值匹配。例如，要查找其家乡团队失利的用户：

```java
ParseQuery<ParseUser> losingUserQuery = ParseUser.getQuery();
losingUserQuery.whereDoesNotMatchKeyInQuery("hometown", "city", teamQuery);
losingUserQuery.findInBackground(new FindCallback<ParseUser>() {
  void done(List<ParseUser> results, ParseException e) {
    // results has the list of users with a hometown team with a losing record
  }
});
```

您可以通过用一组键值调用 `selectKeys` 来限制返回的字段。若要检索只包含 `score` 和 `playerName` 字段（以及特殊嵌入字段，如 `objectId`、`createdAt` 和 `updatedAt`）的文件：

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.selectKeys(Arrays.asList("playerName", "score"));;
List<ParseObject> results = query.find();
```

稍后，可以通过对返回的对象调用 `fetchIfNeeded` 的一个变体函数提取其余的字段：

```java
ParseObject object = results.get(0);
object.fetchIfNeededInBackground(new GetCallback<ParseObject>() {
     public void done(ParseObject object, ParseException e) {
    // all fields of the object will now be available here.
  }
});
```

## 数组值查询

如果一个键包含一个数组值，您可以搜索键的数组值包含 2 的对象，如下所示：

```java
// Find objects where the array in arrayKey contains the number 2.
query.whereEqualTo("arrayKey", 2);
```

您还可以搜索键的数组值包含值 2、3 和 4 的对象，如下所示：

```java
// Find objects where the array in arrayKey contains all of the numbers 2, 3, and 4.
ArrayList<Integer> numbers = new ArrayList<Integer>();
numbers.add(2);
numbers.add(3);
numbers.add(4);
query.whereContainsAll("arrayKey", numbers);
```

## 字符串值查询

使用 `whereStartsWith` 将结果限制为以某一特定字符串开头的字符串值。与 MySQL LIKE 运算符类似，它包含索引，所以对大型数据集很有效：

```java
// Finds barbecue sauces that start with "Big Daddy's".
ParseQuery<ParseObject> query = ParseQuery.getQuery("BarbecueSauce");
query.whereStartsWith("name", "Big Daddy's");
```

## 关系型查询

有几种方法可以用于关系型数据查询。如果您想检索有字段与某一特定 `ParseObject` 匹配的对象，可以像检索其他类型的数据一样使用 `whereEqualTo`。例如，如果每个 `Comment` 在 `post` 字段中有一个 `Post` 对象，您可以提取某一特定 `Post` 的评论：

```java
// Assume ParseObject myPost was previously created.
ParseQuery<ParseObject> query = ParseQuery.getQuery("Comment");
query.whereEqualTo("post", myPost);

query.findInBackground(new FindCallback<ParseObject>() {
  public void done(List<ParseObject> commentList, ParseException e) {
    // commentList now has the comments for myPost
  }
});
```

如果想要检索的对象中，有字段包含与其他查询匹配的 `ParseObject`，您可以使用 `whereMatchesQuery`。注意，默认限值 100 和最大限值 1000 也适用于内部查询，因此在大型数据集中进行查询时，您可能需要谨慎构建查询条件才能按需要进行查询。为了查找包含图像的帖子的评论，您可以使用如下代码：

```java
ParseQuery<ParseObject> innerQuery = ParseQuery.getQuery("Post");
innerQuery.whereExists("image");
ParseQuery<ParseObject> query = ParseQuery.getQuery("Comment");
query.whereMatchesQuery("post", innerQuery);
query.findInBackground(new FindCallback<ParseObject>() {
  public void done(List<ParseObject> commentList, ParseException e) {
    // comments now contains the comments for posts with images.
  }
});
```

如果想要检索的对象中，有字段包含与其他查询不匹配的 `ParseObject`，您可以使用 `whereDoesNotMatchQuery`。为了查找不包含图像的帖子的评论，您可以这样：

```java
ParseQuery<ParseObject> innerQuery = ParseQuery.getQuery("Post");
innerQuery.whereExists("image");
ParseQuery<ParseObject> query = ParseQuery.getQuery("Comment");
query.whereDoesNotMatchQuery("post", innerQuery);
query.findInBackground(new FindCallback<ParseObject>() {
  public void done(List<ParseObject> commentList, ParseException e) {
    // comments now contains the comments for posts without images.
  }
});
```

在一些情况下，您可能想要在一个查询中返回多种类型的相关对象。您可以用 `include` 方法达到这个目的。例如，假设您要检索最新的十条评论，并且想要同时检索这些评论的相关帖子：

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("Comment");

// Retrieve the most recent ones
query.orderByDescending("createdAt");

// Only retrieve the last ten
query.setLimit(10);

// Include the post data with each comment
query.include("post");

query.findInBackground(new FindCallback<ParseObject>() {
  public void done(List<ParseObject> commentList, ParseException e) {
    // commentList now contains the last ten comments, and the "post"
    // field has been populated. For example:
    for (ParseObject comment : commentList) {
      // This does not require a network access.
      ParseObject post = comment.getParseObject("post");
      Log.d("post", "retrieved a related post");
    }
  }
});
```

您也可以使用点标记进行多层级检索。如果您想要包含帖子的评论以及帖子的作者，您可以操作如下：

```java
query.include("post.author");
```

您可以通过多次调用 `include`，进行包含多个字段的查询。此功能也可以与 `getFirst()` 和 `getInBackground()` 等 ParseQuery 帮助工具一起使用。

## 查询本地数据存储库

如果您在调用 `Parse.enableLocalDatastore()` 之后调用 `Parse.initialize()`，从而启用了本地数据存储库，那么您还可以对设备本地存储的对象进行查询。要实现此目的，请对查询调用 `fromLocalDatastore` 方法。

```java
query.fromLocalDatastore();
query.findInBackground(new FindCallback<ParseObject>() {
  public void done(List<ParseObject> scoreList, ParseException e) {
    if (e == null) {
      // Results were successfully found from the local datastore.
    } else {
      // There was an error.
    }
  }
});
```

您可以使用与在网络上完全相同的查询从本地数据存储库进行查询。结果将包含与 pin 在设备中的查询匹配的每个对象。查询甚至将您对对象作出的、尚未保存到云的任何更改考虑在内。例如，如果您对某个对象调用 `deleteEventually`，则此类查询不会再返回该对象。

## 查询缓存

在设备上缓存查询结果通常很有帮助。这样，即使在用户设备脱机、应用刚刚启动以及等待完成网络请求时，您也可以查看数据。要达到此目的最简单的方法是使用本地数据存储库。当您 pin 对象时，可以为此 pin 添加一个标签，以便同时管理一组对象。例如，要缓存上述查询的结果，您可以调用 `pinAllInBackground` 并给它贴上标签。

```java
final String TOP_SCORES_LABEL = "topScores";

// Query for the latest objects from Parse.
query.findInBackground(new FindCallback<ParseObject>() {
  public void done(final List<ParseObject> scoreList, ParseException e) {
    if (e != null) {
      // There was an error or the network wasn't available.
      return;
    }

    // Release any objects previously pinned for this query.
    ParseObject.unpinAllInBackground(TOP_SCORES_LABEL, scoreList, new DeleteCallback() {
      public void done(ParseException e) {
        if (e != null) {
          // There was some error.
          return;
        }

        // Add the latest results for this query to the cache.
        ParseObject.pinAllInBackground(TOP_SCORES_LABEL, scoreList);
      }
    });
  }
});
```

现在，当您使用 `fromLocalDatastore` 进行任何查询时，只要这些对象仍与查询匹配，它们都会包含在结果中。

如果您不使用本地数据存储库，您也可以使用 `ParseQuery` 的每次查询缓存。默认的查询行为不使用此缓存，但您可以使用 `setCachePolicy` 来启用缓存。例如，要尝试连接网络并在网络不可用时回到缓存的数据：

```java
query.setCachePolicy(ParseQuery.CachePolicy.NETWORK_ELSE_CACHE);
query.findInBackground(new FindCallback<ParseObject>() {
  public void done(List<ParseObject> scoreList, ParseException e) {
    if (e == null) {
      // Results were successfully found, looking first on the
      // network and then on disk.
    } else {
      // The network was inaccessible and we have no cached data
      // for this query.
    }
  }
});
```

Parse 提供多种不同的缓存策略：

*   `IGNORE_CACHE` 查询不从缓存加载结果或将结果保存到缓存。默认缓存策略为 `IGNORE_CACHE`。
*   `CACHE_ONLY` 查询会忽略网络，仅从缓存加载结果。如果没有缓存的结果，则会引发 `ParseException`。
*   `NETWORK_ONLY` 查询不从缓存加载结果，但会将结果保存到缓存。
*   `CACHE_ELSE_NETWORK` 查询首先尝试从缓存加载结果，但如果加载失败则从网络加载结果。如果缓存和网络加载都不成功，则会出现 `ParseException`。
*   `NETWORK_ELSE_CACHE` 查询首先尝试从网络加载结果，但如果加载失败则从缓存加载结果。如果网络和缓存加载都不成功，则会出现 `ParseException`。
*   `CACHE_THEN_NETWORK` 查询首先从缓存加载结果，然后再从网络加载。在此情况下，实际上会调用两次 `FindCallback` － 第一次针对缓存的结果，随后针对网络结果。此缓存策略只能与 `findInBackground` 异步配合使用。

如果需要控制缓存的行为，您可以使用 ParseQuery 中提供的方法与缓存进行交互。您可以对缓存执行如下操作：

*   用以下代码查看查询是否有缓存结果：
```java
boolean isInCache = query.hasCachedResult();
```
*   用以下代码删除某个查询的任何缓存结果：
```java
query.clearCachedResult();
```
*   用以下代码删除所有查询的缓存结果：
```java
ParseQuery.clearAllCachedResults();``` 

查询缓存也可以与 `getFirst()` 和 `getInBackground()` 等 ParseQuery 帮助程序一起使用。

## 对象计数

如果您只需要计算符合查询的对象数量，不需要检索所有匹配的对象，可以使用 `count`，而不是 `find`。例如，要计算某一特定玩家玩过多少种游戏：

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.whereEqualTo("playerName", "Sean Plott");
query.countInBackground(new CountCallback() {
  public void done(int count, ParseException e) {
    if (e == null) {
      // The count request succeeded. Log the count
      Log.d("score", "Sean has played " + count + " games");
    } else {
      // The request failed
    }
  }
});

```

如果想要阻止调用线程，您可以使用同步的 `query.count()` 方法。

对于含超过 1000 个对象的类，计数操作受超时设定的限制。这种情况下，可能经常遇到超时错误，或只能返回近似正确的结果。因此，在应用程序的设计中，最好能做到避免此类计数操作。

## 混合查询

如果您想查找与几个查询中的一个查询匹配的对象，您可以使用 `ParseQuery.or` 方法来创建一个查询，该查询是多项查询的 OR 运算结果。例如，如果您想查找取得多次胜利或少数几次胜利的玩家，可以进行以下查询：

```java
ParseQuery<ParseObject> lotsOfWins = ParseQuery.getQuery("Player");
lotsOfWins.whereGreaterThan(150);

ParseQuery<ParseObject> fewWins = ParseQuery.getQuery("Player");
fewWins.whereLessThan(5);

List<ParseQuery<ParseObject>> queries = new ArrayList<ParseQuery<ParseObject>>();
queries.add(lotsOfWins);
queries.add(fewWins);

ParseQuery<ParseObject> mainQuery = ParseQuery.or(queries);
mainQuery.findInBackground(new FindCallback<ParseObject>() {
  public void done(List<ParseObject> results, ParseException e) {
    // results has the list of players that win a lot or haven't won much.
  }
});
```

您可以对新创建的 `ParseQuery` 添加额外限制条件，作为“and”运算符。

但是，请注意：在混合查询结果中查询时，我们不支持非过滤型限制条件（如 `setLimit`、`skip`、`orderBy...`、`include`）。
