# Объекты

## PFObject

Хранение данных в Parse строится вокруг объектов `%{ParseObject}`. Каждый объект `%{ParseObject}` содержит пары данных «ключ-значение», совместимых с форматом JSON. Эти данные являются бессхемными, то есть не нужно заранее указывать, какие ключи существуют для каждого из объектов `%{ParseObject}`. Вы просто настраиваете необходимые пары «ключ-значение», а наш сервер сохраняет их.

Например, вы отслеживаете рекорды игры. Один объект `%{ParseObject}` может содержать:

```js
score: 1337, playerName: "Sean Plott", cheatMode: false
```

Ключи являются буквенно-цифровыми строками. Значения могут быть строками, числами, логическими значениями и даже массивами и словарями, то есть любыми объектами, которые можно закодировать в JSON.

Каждому объекту `%{ParseObject}` присваивается название класса, которое можно использовать для разграничения разных типов данных. Например, можно назвать объект рекордов `GameScore`. Рекомендуем называть классы и ключи следующим образом &mdash; NameYourClassesLikeThis и nameYourKeysLikeThis, просто чтобы ваш код выглядел разборчиво.

## Сохранение объектов

Например, вы хотите сохранить описанный выше объект `GameScore` в Parse Cloud. Интерфейс похож на `NSMutableDictionary` и метод `saveInBackground`:

```objc
PFObject *gameScore = [PFObject objectWithClassName:@"GameScore"];
gameScore[@"score"] = @1337;
gameScore[@"playerName"] = @"Sean Plott";
gameScore[@"cheatMode"] = @NO;
[gameScore saveInBackground];
```

После выполнения этого кода вы, вероятно, захотите проверить результат. Чтобы убедиться, что данные были сохранены, откройте вкладку «Браузер данных» вашего приложения на Parse. Отобразится примерно следующее:

```js
objectId: "xWMyZ4YEGZ", score: 1337, playerName: "Sean Plott", cheatMode: false,
createdAt:"2011-06-10T18:33:42Z", updatedAt:"2011-06-10T18:33:42Z"
```

Необходимо обратить внимание на два момента. Перед запуском этого кода не нужно было настраивать новый класс под названием `GameScore`. Приложение Parse само создает этот класс при первом обнаружении.

Также есть несколько полей, не обязательных для заполнения и предоставляемых для удобства. Поле `objectId` &mdash; это уникальный идентификатор для каждого сохраненного объекта. Поля `createdAt` и `updatedAt` указывают время создания и последнего изменения каждого объекта в облаке. Каждое из этих полей автоматически заполняется Parse, поэтому они не присутствуют в объекте `%{ParseObject}` до завершения операции сохранения.

Примечание. Для обеспечения дополнительной логики, которая будет выполняться после завершения сохранения можно использовать методы `saveInBackgroundWithBlock` или `saveInBackgroundWithTarget:selector:`.

## Извлечение объектов

Сохранять данные в облаке очень удобно. Также очень удобно извлекать эти данные. Если имеется поле `objectId`, вы можете полностью извлечь объект `%{ParseObject}` при помощи запроса `PFQuery`.  Это асинхронный метод с вариациями для использования блоков или методов обратного вызова:

```objc
PFQuery *query = [PFQuery queryWithClassName:@"GameScore"];
[query getObjectInBackgroundWithId:@"xWMyZ4YEGZ" block:^(PFObject *gameScore, NSError *error) {
    // Do something with the returned PFObject in the gameScore variable.
    NSLog(@"%@", gameScore);
}];
// The InBackground methods are asynchronous, so any code after this will run
// immediately.  Any code that depends on the query result should be moved
// inside the completion block above.
```

Для получения значений объекта `%{ParseObject}` можно использовать метод `objectForKey:` или оператор индексации `[]`:

```objc
int score = [[gameScore objectForKey:@"score"] intValue];
NSString *playerName = gameScore[@"playerName"];
BOOL cheatMode = [gameScore[@"cheatMode"] boolValue];
```

Три специальных значения предоставляются как свойства:

```objc
NSString *objectId = gameScore.objectId;
NSDate *updatedAt = gameScore.updatedAt;
NSDate *createdAt = gameScore.createdAt;
```

Если необходимо обновить существующий объект последними данными из Parse Cloud, можно вызвать метод `refresh` следующим образом:

```objc
[myObject refresh];
```

## Сохранение объектов офлайн

Большинство функций сохранения выполняются немедленно и сообщают приложению о завершении сохранения. Если вам не обязательно знать, когда завершено сохранение, можно использовать метод `saveEventually`. Преимущество этой команды заключается в том, что если на данный момент у пользователя отсутствует подключение к сети, метод `saveEventually` сохранит обновление на устройстве, до тех пор, пока подключение не будет повторно установлено.  Если приложение закрывается до возобновления подключения, Parse попробует сохранить в следующий раз, когда приложение будет открыто. Все обращения к методу `saveEventually` (а также `deleteEventually`) выполняются в порядке вызова. Таким образом можно вызвать метод `saveEventually` для объекта несколько раз.

```objc
// Create the object.
PFObject *gameScore = [PFObject objectWithClassName:@"GameScore"];
gameScore[@"score"] = @1337;
gameScore[@"playerName"] = @"Sean Plott";
gameScore[@"cheatMode"] = @NO;
[gameScore saveEventually];
```

## Обновление объектов

Обновление объектов является простой операцией. Установите новые данные для объекта и вызовите один из методов сохранения. Если вы сохранили объект и имеете поле `objectId`, можно извлечь объект `%{ParseObject}` при помощи запроса `PFQuery` и обновить его данные:

```objc
PFQuery *query = [PFQuery queryWithClassName:@"GameScore"];
// Retrieve the object by id
[query getObjectInBackgroundWithId:@"xWMyZ4YEGZ" block:^(PFObject *gameScore, NSError *error) {
    // Now let's update it with some new data. In this case, only cheatMode and score
    // will get sent to the cloud. playerName hasn't changed.
    gameScore[@"cheatMode"] = @YES;
    gameScore[@"score"] = @1338;
    [gameScore saveInBackground];
}];
```

Клиент автоматически определяет, какие данные были изменены, таким образом в Parse будут отправляться только «грязные» поля. Не нужно производить сжатие данных, которые вы не собираетесь обновлять.

### Счетчики

Приведенный выше пример описывает случай общего использования. Поле &quot;score&quot; («счет») &mdash; это счетчик, который нужно постоянно обновлять последним счетом игрока. Можно использовать указанный выше метод, но он трудоемок. Метод может привести к проблемам, если несколько клиентов попробуют обновить один и тот же счетчик.

Для хранения данных типа «счетчик» Parse предоставляет методы, которые атомарно увеличивают или уменьшают любое числовое поле. Таким образом, одно и то же обновление можно переписать следующим образом:

```objc
[gameScore incrementKey:@"score"];
[gameScore saveInBackground];
```

Счетчик также можно увеличивать до любого объема методом `incrementKey:byAmount:`.

### Массивы

Для хранения массива данных существует три операц����и, которые можно использовать для внесения атомарных изменений в поле массива:

*   Методы `addObject:forKey:` и `addObjectsFromArray:forKey:` добавляют заданные объекты в конец поля массива.
*   Методы `addUniqueObject:forKey:` и `addUniqueObjectsFromArray:forKey:` добавляют только заданные объекты, которые еще не содержатся в поле массива для этого поля. Положение вставки не гарантируется.
*   Методы `removeObject:forKey:` и `removeObjectsInArray:forKey:` удаляют все экземпляры каждого заданного объекта из поля массива.

Например, можно добавить элементы к настраиваемым полям &quot;skills&quot; («навыки»):

```objc
[gameScore addUniqueObjectsFromArray:@[@"flying", @"kungfu"] forKey:@"skills"];
[gameScore saveInBackground];
```

Обратите внимание, что на данный момент невозможно атомарно добавлять или удалять элементы из массива для одного сохранения. Необходимо вызвать метод `save` между каждой новой операцией массива.

## Удаление объектов

Удаление объекта из облака:

```objc
[myObject deleteInBackground];
```

Если необходимо выполнить обратный вызов при подтверждении удаления, можно использовать методы `deleteInBackgroundWithBlock:` или `deleteInBackgroundWithTarget:selector:`. Если необходимо заблокировать вызывающий поток, можно использовать метод `delete`.

Одиночное поле можно удалить из объекта при помощи метода `removeObjectForKey`:

```objc
// After this, the playerName field will be empty
[myObject removeObjectForKey:@"playerName"];
// Saves the field deletion to the Parse Cloud
[myObject saveInBackground];
```

## Реляционные данные

Объекты могут иметь связь с другими объектами. Чтобы смоделировать это действие, любой объект `%{ParseObject}` может использоваться как значение для других объектов `%{ParseObject}`. Для поддержки целостности среда разработки Parse сохранит связанный объект в одном месте.

<div class='tip info'><div>
  Посмотрите обучающее видео [Связь «один ко многим»](/tutorials/one-to-many-relationships), из которого вы узнаете, как создать связь «один ко многим» между двумя объектами `PFObjects` в простом приложении для блогов.
</div></div>

Например, каждый объект `Comment` в приложении для блога может соответствовать одному объекту `Post`. Чтобы создать новый объект `Post` с одним объектом `Comment`, можно написать следующий код:

```objc
// Create the post
PFObject *myPost = [PFObject objectWithClassName:@"Post"];
myPost[@"title"] = @"I'm Hungry";
myPost[@"content"] = @"Where should we go for lunch?";

// Create the comment
PFObject *myComment = [PFObject objectWithClassName:@"Comment"];
myComment[@"content"] = @"Let's do Sushirrito.";

// Add a relation between the Post and Comment
myComment[@"parent"] = myPost;

// This will save both myPost and myComment
[myComment saveInBackground];
```

Объекты можно также связывать, используя их идентификаторы `objectId` следующим образом:

```objc
// Add a relation between the Post with objectId "1zEcyElZ80" and the comment
myComment[@"parent"] = [PFObject objectWithoutDataWithClassName:@"Post" objectId:@"1zEcyElZ80"];
```

По умолчанию при извлечении объекта связанные объекты `%{ParseObject}` не извлекаются.  Эти значения объектов невозможно извлечь, пока они не будут получены следующим образом:

```objc
PFObject *post = fetchedComment[@"parent"];
[post fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
    NSString *title = post[@"title"]; }];
```

Также можно смоделировать связь «многие ко многим», используя объект `PFRelation`.  Это работает подобно методу `NSArray` для `PFObjects`, только без необходимости сразу загружать все связанные объекты.  Такая процедура позволяет классу `PFRelation` определять масштаб для большего количества объектов, чем метод `NSArray` для `%{ParseObject}`.  Например, у пользователя `User` может быть много объектов `Post`, которые его интересуют.  В этом случае можно хранить набор публикаций `Post`, которые отмечены пользователем `User`, при помощи метода `relationForKey:`.  Чтобы добавить публикацию в список, код должен выглядеть приблизительно следующим образом:

```objc
PFUser *user = [PFUser currentUser];
PFRelation *relation = [user relationForKey:@"likes"];
[relation addObject:post];
[user saveInBackground];
```

Можно удалить публикацию из класса `PFRelation` при помощи следующего кода:

```objc
[relation removeObject:post];
```

По умолчанию список объектов в этой связи не загружается.  Можно получить список объектов `Post` при помощи вызова метода `findObjectsInBackgroundWithBlock:` в запросе `PFQuery`, возвращенного при помощи метода `query`.  Код будет выглядеть приблизительно так:

```objc
[[relation query] findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
    if (error) {
        // There was an error
    } else {
        // objects has all the Posts the current user liked.
    }
}];
```

Если необходим только подкласс объектов `Post`, можно добавить дополнительные параметры к запросу `PFQuery`, возвращенные при помощи метода `query`, приблизительно следующим образом:

```objc
PFQuery *query = [relation query];
// Add other query constraints.
```

Более подробную информацию о запросе `PFQuery` можно узнать в разделе о запросах данного руководства.  Класс `PFRelation` работает подобно классу `NSArray` для `%{ParseObject}`, поэтому все запросы, которые можно выполнить для массивов объектов (кроме метода `includeKey:`), можно выполнить для класса `PFRelation`.

## Типы данных

Выше использовались значения с типами `NSString`, `NSNumber` и `%{ParseObject}`. Parse также поддерживает типы `NSDate`, `NSData` и `NSNull`.

Можно вкладывать объекты `NSDictionary` и `NSArray` для хранения более структурированных данных для одного объекта `%{ParseObject}`.

Ниже несколько примеров:

```objc
NSNumber *number = @42;
NSString *string = [NSString stringWithFormat:@"the number is %@", number];
NSDate *date = [NSDate date];
NSData *data = [@"foo" dataUsingEncoding:NSUTF8StringEncoding];
NSArray *array = @[string, number];
NSDictionary *dictionary = @{@"number": number,
                             @"string": string};
NSNull *null = [NSNull null];

PFObject *bigObject = [PFObject objectWithClassName:@"BigObject"];
bigObject[@"myNumber"] = number;
bigObject[@"myString"] = string;
bigObject[@"myDate"] = date;
bigObject[@"myData"] = data;
bigObject[@"myArray"] = array;
bigObject[@"myDictionary"] = dictionary;
bigObject[@"myNull"] = null;
[bigObject saveInBackground];
```

Не рекомендуется хранить большие фрагменты бинарных данных, например изображений или документов, используя поля `NSData` для объектов `%{ParseObject}`. Размер объектов `%{ParseObject}` не должен превышать 128 килобайт. Чтобы хранить большие фрагменты, рекомендуется использовать класс `PFFile`. Для получения дополнительных сведений см. [соответствующий раздел данного руководства](#files).

Для получения дополнительных сведений по обработке данных в Parse ознакомьтесь с нашей документацией в разделе [Данные и безопасность](#data).

## Подклассы

Parse создан для того, чтобы как можно быстрее получать работающие программы. Вы можете иметь доступ ко всем данным при помощи класса `%{ParseObject}` и иметь доступ ко всем полям при помощи метода `objectForKey:` или оператора индексации `[]`. В законченных кодовых базах подклассы имеют много преимуществ, в частности, лаконичность, возможность расширения и поддержку автозавершения. Создание подклассов является необязательным, но может трансформировать такой код:

```objc
PFObject *shield = [PFObject objectWithClassName:@"Armor"];
shield[@"displayName"] = @"Wooden Shield";
shield[@"fireProof"] = @NO;
shield[@"rupees"] = @50;
```

В такой:

```objc
Armor *shield = [Armor object];
shield.displayName = @"Wooden Shield";
shield.fireProof = NO;
shield.rupees = 50;
```

### Создание подклассов для объекта PFObject

Чтобы создать подкласс для `%{ParseObject}`:

1.  Опишите подкласс, который соответствует протоколу `PFSubclassing`.
2.  Реализуйте метод класса `parseClassName`. Это строка, которая вставляется в метод `initWithClassName:`, поэтому не нужно будет ссылаться на имя класса в будущем.
3.  Импортируйте `PFObject+Subclass` в файл .m. Это реализует все методы для `PFSubclassing` в рамках `parseClassName`.
4.  Вызовите метод `[YourClass registerSubclass]` в ApplicationDelegate перед вызовом метода `setApplicationId:clientKey:` Parse.

Приведенный ниже код успешно описывает, реализует и регистрирует подкласс `Armor` объекта `%{ParseObject}`:

```objc
// Armor.h
@interface Armor : PFObject<PFSubclassing>
+ (NSString *)parseClassName;
@end

// Armor.m
// Import this header to let Armor know that PFObject privately provides most
// of the methods for PFSubclassing.
##import <Parse/PFObject+Subclass.h>

@implementation Armor
+ (void)load {
    [self registerSubclass];
}

+ (NSString *)parseClassName {
    return @"Armor";
}
@end
```

### Свойства и методы

Добавление пользовательских свойств и методов к подклассу `%{ParseObject}` помогает формировать логику класса. При помощи `PFSubclassing` можно хранить всю логику о предмете в одном месте, а не использовать отдельные классы для бизнес-логики и логики запоминания и передачи.

Объект `%{ParseObject}` поддерживает динамические суммирующие устройства, такие как `NSManagedObject`. Опишите свойство как обычно, но используйте свойство `@dynamic` вместо `@synthesize` в файле .m. Приведенный ниже пример создает свойство `displayName` в классе `Armor`:

```objc
// Armor.h
@interface Armor : PFObject<PFSubclassing>
+ (NSString *)parseClassName;
@property (retain) NSString *displayName;
@end

// Armor.m
@dynamic displayName;
```

Теперь вы можете иметь доступ к полю displayName при помощи свойства `armor.displayName` или `[armor displayName]` и делать назначения для него при помощи метода `armor.displayName = @"Wooden Shield"` или `[armor setDisplayName:@"Wooden Sword"]`. Динамические свойства позволяют Xcode выполнять автозавершение и искать опечатки.

Свойства `NSNumber` можно реализовать как объекты `NSNumber` или их элементарные копии. Рассмотрите следующий пример:

```objc
@property BOOL fireProof;
@property int rupees;
```

В этом случае запрос `game[@"fireProof"]` вернет значение `NSNumber`, доступ к которому осуществляется при помощи метода `boolValue`, а запрос `game[@"rupees"]` вернет значение `NSNumber`, доступ к которому осуществляется при помощи метода `intValue`, но свойство `fireProof` является абсолютным значением `BOOL`, а свойство `rupees` &mdash; абсолютным значением `int`. Динамический получающий метод автоматически извлекает значение `BOOL` или `int`, а динамический устанавливающий метод автоматически преобразовывает значение в `NSNumber`. Вы можете использовать любой формат. Проще использовать элементарные типы свойств, но типы свойств `NSNumber` четче поддерживают значения nil.

Если необходима более сложная логика, чем простой доступ к свойствам, можно также внести собственные методы:

```objc
@dynamic iconFile;

- (UIImageView *)iconView {
    PFImageView *view = [[PFImageView alloc] initWithImage:kPlaceholderImage];
    view.file = self.iconFile;
    [view loadInBackground];
    return [view autorelease];
}
```

### Инициализация подклассов

Можно создавать новые объекты при помощи метода класса `object`. Создается автоматически выпущенный экземпляр типа и надлежащим образом обрабатывает последующее создание подклассов. Чтобы создать ссылку на существующий объект, используйте метод `objectWithoutDataWithObjectId:`.

### Запросы

Используя метод класса `query`, можно получить запрос на объекты конкретного подкласса. Ниже представлены примеры запросов на класс брони, который доступен пользователю:

```objc
PFQuery *query = [Armor query];
[query whereKey:@"rupees" lessThanOrEqualTo:PFUser.currentUser.rupees];
[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
    if (!error) {
        Armor *firstArmor = objects[0];
        // ...
    }
}];
```
