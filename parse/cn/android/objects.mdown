# 对象

## ParseObject

Parse 上的数据储存建立在 `ParseObject` 的基础上。每个 `ParseObject` 包含 JSON 兼容数据的键值对。该数据没有计划性，即您不需要事先指定每个 `ParseObject` 上存在的键。您只需随意设置您需要的键值对，我们的后台会储存它们。

例如，假设您要跟踪游戏的高分。单个 `ParseObject` 可能包括：

```js
score: 1337, playerName: "Sean Plott", cheatMode: false
```

键值必须是字母数字字符串。键值可以是字符串、数字、布尔值或设置是数组和对象 － 只要是能用 JSON 编码的任何内容。

每个 `ParseObject` 均有可供您用以区分不同数据种类的类名。例如，您可以把高分对象称为 `GameScore`。我们建议您这样命名类名（如：NameYourClassesLikeThis）和键值（如：nameYourKeysLikeThis），让您的代码看起来整齐美观。

## 保存对象

假如您想要将上述 `GameScore` 保存到 Parse 云中。保存接口与 `Map` 类似，多了 `saveInBackground` 方法：

```java
ParseObject gameScore = new ParseObject("GameScore");
gameScore.put("score", 1337);
gameScore.put("playerName", "Sean Plott");
gameScore.put("cheatMode", false);
gameScore.saveInBackground();
```

该代码运行后，您可能不知道是否执行了相关操作。为确保数据正确保存，您可以在 Parse 上查看应用中的数据浏览器。您应该会看到类似于以下的内容：

```js
objectId: "xWMyZ4YEGZ", score: 1337, playerName: "Sean Plott", cheatMode: false,
createdAt:"2011-06-10T18:33:42Z", updatedAt:"2011-06-10T18:33:42Z"
```

这里要注意两点。在运行这个代码前，您不需要配置或设置名称为 `GameScore` 的新类别。您的 Parse 应用在第一次遇到这个类别时会为您创建该类别。

还有几个字段只是为了方便，您不需要指定内容。`objectId` 是各已存对象的唯一标识符。`createdAt` 和 `updatedAt` 分别是各个对象在云中的创建时间和最后修改时间。每个字段都由 Parse 填充，所以完成保存操作后，`ParseObject` 上才会存在这些字段。

## 对象检索

将数据保存到云中非常有趣，但是更有趣的是从云中获取这些数据。如果您有 `objectId`，您可以用 `ParseQuery` 检索整个 `ParseObject`：

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.getInBackground("xWMyZ4YEGZ", new GetCallback<ParseObject>() {
     public void done(ParseObject object, ParseException e) {
    if (e == null) {
      // object will be your game score
    } else {
      // something went wrong
    }
  }
});
```

要从 `ParseObject` 中提取值，可针对每种数据类型采用 `getX` 方法：

```java
int score = gameScore.getInt("score");
String playerName = gameScore.getString("playerName");
boolean cheatMode = gameScore.getBoolean("cheatMode");
```

如果您不知道要提取的数据属于什么类型，您可以调用 `get(key)`，但随后可能要立即丢弃它。在大多数情况下，您应该使用 `getString` 等类型化访问器。

以下三种特殊值具有其各自的访问器：

```java
String objectId = gameScore.getObjectId();
Date updatedAt = gameScore.getUpdatedAt();
Date createdAt = gameScore.getCreatedAt();
```

如果需要使用云中的最新数据刷新现有对象，您可以调用 `fetchInBackground` 方法，如下：

```java
myObject.fetchInBackground(new GetCallback<ParseObject>() {
     public void done(ParseObject object, ParseException e) {
    if (e == null) {
      // Success!
    } else {
      // Failure!
    }
  }
});
```

`GetCallback` 中的代码将在主线程上运行。

## 本地数据存储库

Parse 还允许您在 Android 设备自身的[本地数据存储库](#localdatastore)中存储对象。您可以将其用于存储不必保存到云的数据，但它尤其适用于临时存储数据，以便稍后能够进行同步。要启用数据存储库，请调用 `Application` 构造函数中的 `Parse.enableLocalDatastore()`，再调用 `Parse.initialize()`。启用本地数据存储库后，您可以通过 pin 对象来进行存储。

```java
ParseObject gameScore = new ParseObject("GameScore");
gameScore.put("score", 1337);
gameScore.put("playerName", "Sean Plott");
gameScore.put("cheatMode", false);
gameScore.pinInBackground();
```

进行保存时，这可以递归存储 `gameScore` 指向的每个对象和文件，前提是该数据是从云中提取的。每次您将更改保存到对象时，或从 Parse 提取新的更改时，数据存储库中的副本都将自动更新，因此您可以放心。

### 从本地数据存储库检索对象

存储对象仅在您可以将其提取出来时有意义。要获取特定对象的数据，您可以向平时在网络上的做法一样使用 `ParseQuery`，但必须使用 `fromLocalDatastore` 方法告诉它从哪里获取数据。

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.fromLocalDatastore();
query.getInBackground("xWMyZ4YEGZ", new GetCallback<ParseObject>() {
     public void done(ParseObject object, ParseException e) {
    if (e == null) {
      // object will be your game score
    } else {
      // something went wrong
    }
  }
});
```

如果已有此对象的实例，您也可以使用 `fetchFromLocalDatastoreInBackground` 方法。

```java
ParseObject object = ParseObject.createWithoutData("GameScore", "xWMyZ4YEGZ");
object.fetchFromLocalDatastoreInBackground(new GetCallback<ParseObject>() {
     public void done(ParseObject object, ParseException e) {
    if (e == null) {
      // object will be your game score
    } else {
      // something went wrong
    }
  }
});
```

### 取消 pin 对象

如果您已完成处理对象，不再需要将其保存在设备上，您可以使用 `unpinInBackground` 释放它。

```java
gameScore.unpinInBackground();
```

## 离线保存对象

大多数保存函数会立即执行，并在完成保存后通知您的应用。如果您不需要知道何时保存结束，您可以使用 `saveEventually` 代替。其优势在于如果用户当前没有网络连接，`saveEventually` 会将更新保存在设备上，直到重新建立网络连接。如果您的应用在连接恢复之前关闭，Parse 将在下次应用打开时重试。对 `saveEventually`（以及 `deleteEventually`）的所有调用均按调用顺序执行，因此针对一个对象调用多次 `saveEventually` 是安全的。如果您已启用本地数据存储库，那么您对其调用 `saveEventually` 的任何对象在进行保存时都会被 pin。这可让您在等待网络恢复连接时轻松检索本地更改。

```java
ParseObject gameScore = new ParseObject("GameScore");
gameScore.put("score", 1337);
gameScore.put("playerName", "Sean Plott");
gameScore.put("cheatMode", false);
gameScore.saveEventually();
```

## 对象更新

进行对象更新非常简单。只需在对象上设置一些新的数据并调用其中一种保存方法即可。假设您已保存对象并有 `objectId`，您可以使用 `ParseQuery` 检索 `ParseObject` 和更新其数据：

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");

// Retrieve the object by id
query.getInBackground("xWMyZ4YEGZ", new GetCallback<ParseObject>() {
  public void done(ParseObject gameScore, ParseException e) {
    if (e == null) {
      // Now let's update it with some new data. In this case, only cheatMode and score
      // will get sent to the Parse Cloud. playerName hasn't changed.
      gameScore.put("score", 1338);
      gameScore.put("cheatMode", true);
      gameScore.saveInBackground();
    }
  }
});
```

Parse 自动辨别哪些数据受到更改，因此保存过程中只会传送包含修改的字段。您不需要担心云中会压入您不想更新的数据。

### 计数器

上面的例子包含一种常见的使用案例。“score”（得分）字段是个计数器，需要用玩家的最新得分进行连续更新。上面的方法虽然有用，但是繁琐，如果您有多个客户端在尝试更新同一个计数器就可能会产生一些问题。

为帮助储存计数器类型的数据，Parse 提供了能够以原子能力递增（或递减）任何数字字段的方法。因此，这项更新可以重写为：

```java
gameScore.increment("score");
gameScore.saveInBackground();
```

您还可以使用 `increment(key, amount)` 实现任何数量的递增。

### 数组

为帮助存储数组数据，有三种操作可用于以原子级方式更改数组字段：

*   `add` 和 `addAll` 将给定对象附加在数组字段末端。
*   `addUnique` 和 `addAllUnique` 仅将尚未包含在数组字段中的给定对象添加至该字段。插入位置不确定。
*   `removeAll` 会从数组字段中删除给定对象的所有实例。

例如，我们可以像这样将项目添加到类似于设置的“skills”（技能）字段中：

```java
gameScore.addAllUnique("skills", Arrays.asList("flying", "kungfu"));
gameScore.saveInBackground();
```

注意：目前不能从位于同一保存位置的数组中进行原子级的项目添加和删除操作。在不同类型的数组操作之间，您必须调用 `save`。

## 删除对象

要从 Parse 云中删除对象：

```java
myObject.deleteInBackground();
```

如果想要在确认删除后执行回调，您可以将 `DeleteCallback` 添加到 `deleteInBackground` 方法。如果想要阻止调用线程，您可以使用 `delete` 方法。

您可以使用 `remove` 方法从对象中删除单一字段：

```java
// After this, the playerName field will be empty
myObject.remove("playerName");

// Saves the field deletion to the Parse Cloud
myObject.saveInBackground();
```

## 关系数据

一些对象可能与另外一些对象有一定的关系。要为此建模，可将任意 `ParseObject` 用作其他 `ParseObject` 中的值。在内部，Parse 框架只将提及的对象仅存储于一个位置，以便保持一致性。

例如，一个博客应用中的每个 `Comment` 可能对应一个 `Post`。要创建一篇带有单一 `Comment` 的新 `Post`，您可以这样写：

```java
// Create the post
ParseObject myPost = new ParseObject("Post");
myPost.put("title", "I'm Hungry");
myPost.put("content", "Where should we go for lunch?");

// Create the comment
ParseObject myComment = new ParseObject("Comment");
myComment.put("content", "Let's do Sushirrito.");

// Add a relation between the Post and Comment
myComment.put("parent", myPost);

// This will save both myPost and myComment
myComment.saveInBackground();
```

您还可以用它们的 `objectId` 将多个对象联系起来，如下所示：

```java
// Add a relation between the Post with objectId "1zEcyElZ80" and the comment
myComment.put("parent", ParseObject.createWithoutData("Post", "1zEcyElZ80"));
```

默认在提取对象时不提取相关的 `ParseObject`。这些对象的值在按如下方式提取之前无法检索：

```java
fetchedComment.getParseObject("post")
    .fetchIfNeededInBackground(new GetCallback<ParseObject>() {
           public void done(ParseObject object, ParseException e) {
          String title = post.getString("title");
        }
    });
```

您还可以使用 `ParseRelation` 对象建立多对多关系模型。其机理与 `List<ParseObject>` 类似，但您不必一次性下载关系中的所有 `ParseObject`。因此 `ParseRelation` 可以扩展到比 `List<ParseObject>` 方法多很多的对象上。例如，一个 `User` 可能有很多篇喜欢的 `Post`。这种情况下，您可以用 `getRelation` 储存 `User` 喜欢的 `Post`。要将一个帖子添加至此列表，代码如下所示：

```java
ParseUser user = ParseUser.getCurrentUser();
ParseRelation<ParseObject> relation = user.getRelation("likes");
relation.add(post);
user.saveInBackground();
```

您可以从 `ParseRelation` 删除一个帖子，代码如下：

```java
relation.remove(post);
```

默认情况下，不下载这种关系中的对象列表。您可以通过对 `getQuery` 返回的 `ParseQuery` 调用 `findInBackground` 获取 `Post` 列表。代码应如下所示：

```java
relation.getQuery().findInBackground(new FindCallback<ParseObject>() {
    void done(List<ParseObject> results, ParseException e) {
      if (e != null) {
        // There was an error
      } else {
        // results have all the Posts the current user liked.
      }
    }
});
```

若您只想要 `Post` 的一个子集，可以像这样对 `ParseQuery` 返回的 `Post` 添加额外限制条件：代码如下所示：

```java
ParseQuery<ParseObject> query = relation.getQuery();
// Add other query constraints.
```

 若要了解有关 `ParseQuery` 的更多详细信息，请查看[本指南的查询部分](#queries)。查询时，`ParseRelation` 的工作方式与 `List<ParseObject>` 类似，因此您能对对象列表进行的任何查询（不含 `include`）均可对 `ParseRelation` 执行。

## 数据类型

目前，我们所使用的数值类型有 `String`、`int`、`bool` 和 `ParseObject`。Parse 还支持 `java.util.Date`、`byte[]` 和 `JSONObject.NULL`。

您可以嵌套 `JSONObject` 和 `JSONArray` 对象，以在单一 `ParseObject` 中存储更多结构数据。

一些示例：

```java
int myNumber = 42;
String myString = "the number is " + myNumber;
Date myDate = new Date();

JSONArray myArray = new JSONArray();
myArray.put(myString);
myArray.put(myNumber);

JSONObject myObject = new JSONObject();
myObject.put("number", myNumber);
myObject.put("string", myString);

byte[] myData = { 4, 8, 16, 32 };

ParseObject bigObject = new ParseObject("BigObject");
bigObject.put("myNumber", myNumber);
bigObject.put("myString", myString);
bigObject.put("myDate", myDate);
bigObject.put("myData", myData);
bigObject.put("myArray", myArray);
bigObject.put("myObject", myObject);
bigObject.put("myNull", JSONObject.NULL);
bigObject.saveInBackground();
```

我们不建议通过在 `ParseObject` 中使用 `byte[]` 字段来存储图像或文档等大型二进制数据。`ParseObjects` 的大小不应超过 128 KB。要存储更多数据，我们建议您使用 `ParseFile`。更多详细信息请参考[指南部分](#files)。

若要了解有关 Parse 如何处理数据的更多信息，请查看[数据与安全](#data)部分的文档。

## 子类

Parse 的设计能让您尽快上手并开始使用。您可以使用 `ParseObject` 类访问所有数据，以及通过 `get()` 访问任何字段。在成熟的代码库中，子类具有许多优势，包括简洁性、可扩展性和支持自动完成。子类化纯属可选操作，但它会将以下代码：

```java
ParseObject shield = new ParseObject("Armor");
shield.put("displayName", "Wooden Shield");
shield.put("fireproof", false);
shield.put("rupees", 50);
```

转换为：

```java
Armor shield = new Armor();
shield.setDisplayName("Wooden Shield");
shield.setFireproof(false);
shield.setRupees(50);
```

### ParseObject 子类化

要创建 `ParseObject` 子类：

1.  Declare 一个扩展 `ParseObject` 的子类。
2.  添加一个 `@ParseClassName` 注释。它的值应等于您将传递至 `ParseObject` 构造函数的字符串，这样后续就不必进行类名引用。
3.  确保该子类拥有公共的默认（即无变量）构造函数。您不得修改该构造函数中的任何 `ParseObject` 字段。
4.  在 `Application` 构造函数中调用 `ParseObject.registerSubclass(YourClass.class)`，然后调用 `Parse.initialize()`。
下面的代码成功地实施和注册了 `ParseObject` 的 `Armor` 子类：

```java
// Armor.java
import com.parse.ParseObject;
import com.parse.ParseClassName;

@ParseClassName("Armor")
public class Armor extends ParseObject {
}

// App.java
import com.parse.Parse;
import android.app.Application;

public class App extends Application {
  @Override
  public void onCreate() {
    super.onCreate();

    ParseObject.registerSubclass(Armor.class);
    Parse.initialize(this, PARSE_APPLICATION_ID, PARSE_CLIENT_KEY);
  }
}
```

### 访问器、转变器和方法

向 `ParseObject` 子类添加方法有助于封装关于类的逻辑。您可以将主题的所有相关逻辑保存在一个位置，而不必分别针对事务逻辑和存储/传输逻辑使用单独的类。

您可以为 `ParseObject` 的各字段轻松添加访问器和转变器。像平时一样为字段 declare 一个 getter 和 setter，但实施时按照 `get()` 和 `put()` 进行。下面的示例在 `Armor` 类中创建了 `displayName` 字段：

```java
// Armor.java
@ParseClassName("Armor")
public class Armor extends ParseObject {
  public String getDisplayName() {
    return getString("displayName");
  }
  public void setDisplayName(String value) {
    put("displayName", value);
  }
}
```

现在，您可以使用 `armor.getDisplayName()` 访问 displayName 字段，并使用 `armor.setDisplayName("Wooden Sword")` 对其进行赋值。这使 IDE 能在您开发应用时提供自动完成功能，并在编译时发现拼写错误。

通过各种形式的 `get()` 函数（如 `getInt()`、`getParseFile()` 或 `getMap()`），可以用这种方式轻松定义各类访问器和转变器。

如果您需要比简单字段访问更加复杂的逻辑，您也可以 declare 自己的方法：

```java
public void takeDamage(int amount) {
  // Decrease the armor's durability and determine whether it has broken
  increment("durability", -amount);
  if (getDurability() < 0) {
    setBroken(true);
  }
}
```

### 初始化子类

您应该使用已定义的构造函数创建子类的新实例。子类必须定义一个不修改 `ParseObject` 各字段的公共默认构造函数，它将在整个 Parse SDK 中被用于创建子类的强类型实例。

要创建现有对象的引用，使用 `ParseObject.createWithoutData()`：

```java
Armor armorReference = ParseObject.createWithoutData(Armor.class, armor.getObjectId());
```

### 查询

您可以使用静态方法 `ParseQuery.getQuery()` 获取对特定子类对象的查询。下面的示例查询了用户可购买的装备：

```java
ParseQuery<Armor> query = ParseQuery.getQuery(Armor.class);
query.whereLessThanOrEqualTo("rupees", ParseUser.getCurrentUser().get("rupees"));
query.findInBackground(new FindCallback<Armor>() {
  @Override
  public void done(List<Armor> results, ParseException e) {
    for (Armor a : results) {
      // ...
    }
  }
});
```
