# 役割

アプリの対象範囲や利用者ベースが大きくなると、利用者にリンクしたACLが提供するアクセス方法よりも、データへのアクセスをよりおおまかに制御したいと感じることがあります。この要件に対処するために、Parseは[役割ベースのアクセス制御](http://en.wikipedia.org/wiki/Role-based_access_control)形式をサポートしています。役割を使用すると、Parseデータへの共通のアクセス権限を持つ利用者を論理的にグループ化できます。役割は、利用者とその他の役割を持つ、名前付きのオブジェクトです。役割に付与される権限はその利用者と、その役割を内包する役割の利用者に暗黙的に付与されます。

たとえば、管理されたコンテンツを持つアプリケーションには、他の利用者が作成したコンテンツを修正、削除できる「モデレータ」と呼ばれる利用者が多数存在することになります。さらに、モデレータと同じ権限を持つがアプリケーションの全般的な設定を修正できる「管理者」と呼ばれる一連の利用者も存在する場合があります。こういった役割に利用者を追加すると、各利用者のリソースごとに権限を手動で付与しなくても、新しい利用者をモデレータや管理者として作成できます。

Parseでは、これらの役割オブジェクトを表す`Parse.Role`と呼ばれる特別のクラスをクライアントコードに用意しています。`Parse.Role`は`Parse.Object`のサブクラスであり、柔軟なスキーマ、自動継続、主要な値に関するインターフェイスなど、同じ機能をすべて使用できます。`Parse.Object`に関するメソッドはすべて`Parse.Role`でも使用できます。`Parse.Role`には役割管理に固有の特別な追加事項がある点が異なります。


## プロパティ

`Parse.Role`には、`Parse.Object`にはないプロパティをいくつか設定できます。

*   name:役割の名前です。この値は必須であり、役割を作成するときに一度だけ設定できます。名前に使用できる文字は、英数字、スペース、-、_です。この名前によりobjectIdがなくても役割を識別できます。
*   users:役割に付与した権限を継承する一連の利用者への[関係](#objects-pointers)です。
*   roles:役割に付与した権限を継承する一連の利用者と役割への[関係](#objects-pointers)です。


## 役割オブジェクトのセキュリティ

`Parse.Role`はParseのその他のすべてのオブジェクトと同じセキュリティスキーマ（ACL）を使用しますが、ACLを明示的に設定する必要がある点が異なります。一般に、上位の権限を持つ利用者（マスターユーザーや管理者）が役割の作成や修正を行うため、それに応じてACLを定義する必要があります。利用者の`Parse.Role`に書き込み権限を付与する場合は、その利用者は役割に他の利用者を追加したり、役割を完全に削除できることになります。

新しい`Parse.Role`を作成するには、次のように記述します。

```js
// By specifying no write privileges for the ACL, we can ensure the role cannot be altered.
var roleACL = new Parse.ACL();
roleACL.setPublicReadAccess(true);
var role = new Parse.Role("Administrator", roleACL);
role.save();
```

`Parse.Role`の「users」と「roles」を通じて、新しい役割の権限を継承する利用者や役割を追加できます。

```js
var role = new Parse.Role(roleName, roleACL);
for (var i = 0; i < usersToAddToRole.length; i++) {
  role.getUsers().add(usersToAddToRole[i]);
}
for (var i = 0; i < rolesToAddToRole.length; i++) {
  role.getRoles().add(rolesToAddToRole[i]);
}
role.save();
```

修正権限を持つ利用者しか修正できないため、ACLを役割に割り当てる際には慎重に行ってください。


## その他のオブジェクトのセキュリティ

アプリケーションで使用する一連の役割を作成しましたので、その役割をACLとともに使用し、利用者が受け取る権限を定義できます。それぞれの`Parse.Object`では`Parse.ACL`を指定でき、オブジェクトへの読み取り/書き込み権限を付与される利用者や役割のアクセス制御リストを設定できます。

オブジェクトへの読み取り/書き込み権限は簡単に付与できます。`Parse.Role`を使用して付与することもできます。

```js
var moderators = /* Query for some Parse.Role */;
var wallPost = new Parse.Object("WallPost"); 
var postACL = new Parse.ACL();
postACL.setRoleWriteAccess(moderators, true);
wallPost.setACL(postACL);
wallPost.save();
```

ACLに名前を指定すると、役割へのクエリの実行を避けることができます。

```js
var wallPost = new Parse.Object("WallPost");
var postACL = new Parse.ACL();
postACL.setRoleWriteAccess("Moderators", true);
wallPost.setACL(postACL);
wallPost.save();
```


## ロールの階層

上述したように、役割は別の役割を内包でき、2つの役割間では親子関係が構築されます。この関係では、親の役割に権限が付与されると、その子の役割のすべてに黙示的に権限が付与されます。

通常、このようなタイプの関係は、フォーラムのように利用者が管理するコンテンツを持つアプリケーションに見られます。一部の少数の利用者からなるサブセットが「管理者」となり、アプリケーションの設定の調整、新しいフォーラムの作成、グローバルメッセージの設定など、最高レベルのアクセス権限を持ちます。別の利用者グループは「モデレータ」となり、利用者が作成したコンテンツを適切に維持する作業を担当します。管理者権限を持つ利用者には、モデレータの権限も付与する必要があります。この関係を構築するには、次に示すように、「管理者」の役割を「モデレータ」の子の役割に設定します。

```js
var administrators = /* Your "Administrators" role */;
var moderators = /* Your "Moderators" role */;
moderators.getRoles().add(administrators);
moderators.save();
```
