# GeoPoint

Parse 让您可以把真实的纬度和经度坐标与对象关联起来。在 `ParseObject` 中添加 `ParseGeoPoint`，可以实现在查询时将对象与参考点的临近性纳入考虑。这可以让您轻松某些事情，如找出距离与某个用户最近的其他用户或者距离某个用户最近的地标。

## ParseGeoPoint

要将某个地点与对象联系起来，您首先要创建一个 `ParseGeoPoint`。例如，要创建一个纬度为 40.0 度，经度为 -30.0 的点：

```java
ParseGeoPoint point = new ParseGeoPoint(40.0, -30.0);
```

然后，该点被作为常规字段储存在对象中。

```java
placeObject.put("location", point);
```

## Geo 查询

有了一些具有空间坐标的对象后，找到哪些对象距离某个点最近将会产生很好的效应。这可以通过使用 `whereNear` 对 `ParseQuery` 添加另一限制条件完成。举例而言，找出距离某个用户最近的十个地点的方法如下：

```java
ParseGeoPoint userLocation = (ParseGeoPoint) userObject.get("location");
ParseQuery<ParseObject> query = ParseQuery.getQuery("PlaceObject");
query.whereNear("location", userLocation);
query.setLimit(10);
query.findInBackground(new FindCallback<ParseObject>() { ... });
```

此时，`nearPlaces` 是按照与 `userLocation` 的距离（由近及远）排列的一组对象。注意，若应用另一个 `orderByAscending()`/`orderByDescending()` 限制条件，该限制条件将优先于距离顺序。

若要用距离来限定获得哪些结果，请使用 `whereWithinKilometers`、`whereWithinMiles` 和 `whereWithinRadians`。

您还可以查询包含在特定区域内的对象集合。若要查找位于某个矩形区域内的对象，请将 `whereWithinGeoBox` 限制条件添加至您的 `ParseQuery`。

```java
ParseGeoPoint southwestOfSF = new ParseGeoPoint(37.708813, -122.526398);
ParseGeoPoint northeastOfSF = new ParseGeoPoint(37.822802, -122.373962);
ParseQuery<ParseObject> query = ParseQuery.getQuery("PizzaPlaceObject");
query.whereWithinGeoBox("location", southwestOfSF, northeastOfSF);
query.findInBackground(new FindCallback<ParseObject>() { ... });
```

## 注意事项

目前需要注意以下几点：

1.  每个 ParseObject 类可能仅有一个带 ParseGeoPoint 对象的键。
2.  点不应等于或大于最大范围值。纬度不能为 -90.0 或 90.0。经度不能为 -180.0 或 180.0。若纬度或经度设置超出边界，会引起错误。
