# Crash Reporting

Crash Reporting allows you to find out how your app is crashing in the wild. You'll be able to see your most impactful crashes, complete with stack traces, device information, and more. To get started, head over to the [Quick Start](/apps/quickstart#analytics/crashreporting/ios/existing) to instrument your app.

## Enabling

To enable Crash Reporting, add this line to your AppDelegate before you initialize your Parse app keys:

```objc
// Enable Crash Reporting
[ParseCrashReporting enable];

// Setup Parse
[Parse setApplicationId:@"parseAppId" clientKey:@"parseClientKey"];
```
```swift
// Enable Crash Reporting
ParseCrashReporting.enable();

// Setup Parse
Parse.setApplicationId("parseAppId", clientKey: "parseClientKey")
```

Once this is enabled, all crashes from your app will be sent to Parse and will show up in the analytics dashboard.

## Symbolication

It's important to send Parse the symbol files for each build of your app. This allows Parse to properly aggregate crash incidents together and show these crashes on the dashboard with proper symbols in the stack trace.

There are two ways to upload your symbol files: automatically after each build in Xcode (view instructions in [Quick Start](/apps/quickstart#analytics/crashreporting/ios/existing)) and manually. We highly recommend doing the upload automatically so you don't have to remember every time you cut a release.

To automatically upload symbol files for your application whenever you build your app:

*   Download the latest version of [Parse CLI](/docs/ios/guide#command-line)
*   Initialize a new Parse Cloud Code directory by running the following (for example, in the same directory as your Xcode project):

```bash
parse new
```

*   Add a new **Run Script** phase to the **Build Phases** of your App's target:

```bash
export PATH=/usr/local/bin:$PATH
cd <path_to_cloudcode_folder>

parse symbols <app_name_from_cloud_code_config_globals> --path="${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}"
```

Alternatively, you can manually upload symbol files using the command line tool:

```bash
parse symbols <app_name_from_cloud_code_config_globals> --path="<dSYM/xcarchive/DWARF path>"
```

The symbol files for your apps can be found in one of these locations, depending on your deployment workflow:

*   An **xcarchive** file is what is generated when you "Archive" your application for distribution. You can locate the files via the Archives tab inside the Xcode Organizer.
*   A **dSYM** file is the symbol file bundle for your application. It is usually generated only when building your application for 'Release' or 'Archiving' and can be found next to your .app bundle inside your Xcode DerivedData folder.
*   **DWARF** - is the most low-level and most custom of packages we support and can be generated by stripping your application binary manually.

Manual uploads can be useful when you've forgotten to upload symbol files for a build that has been released. You will see a message to symbolicate the stack traces when you're viewing a crash that hasn't been symbolicated.

## Testing

Once you've enabled Crash Reporting, you'll want to test to make sure your crashes are properly being sent to Parse. First, add the following method in one of your view controllers, or the App Delegate:

```objc
- (void)crash {
    [NSException raise:NSGenericException format:@"Everything is ok. This is just a test crash."];
}
```
```swift
NSException(name: NSGenericException, reason: "Everything is ok. This is just a test crash.", userInfo: nil).raise()
```

Then, put this invocation in your main view controllers' `viewDidLoad`, or in `application:didFinishLaunchingWithOptions:` if you're using the App Delegate:

```objc
[self performSelector:@selector(crash) withObject:nil afterDelay:5.0];
```
```swift
dispatch_after(
    dispatch_time(DISPATCH_TIME_NOW, Int64(5.0 * Double(NSEC_PER_SEC))),
    dispatch_get_main_queue(),
    { () -> Void in
        self.crash()
});
```

Next, follow these steps:

1.  Build, run, and then stop the app.
2.  Run the app without the debugger, which will catch crashes and prevent them from being sent to Parse. The easiest way to do this is to directly launch the app from the home screen.
3.  Wait for the app to crash.
4.  Run the app again. The app will automatically send the crash report to Parse on startup.

At this point, go to the Crash Reporting dashboard under Analytics for your app and make sure you see the crash in the listing. It can take a few minutes for the crash to show up.

## Workflow

By using Crash Reporting, you can dramatically improve the quality of your app by reducing the number of crashes your end users experience. We recommend the following workflow to efficiently fix your crashes:

1.  _Identify crashes to fix._ The main view of the Crash Reporting dashboard shows all your crashes ordered by the number of occurrences. Typically, you'll want to start by fixing the crashes that are affecting the most users. You can click on each crash and get details such as the stack trace, OS versions, device types, and affected app versions.

2.  _Fix a crash._ Do some debugging and fix your crash in your client code.

3.  _Bump your build version (CFBundleVersion) and build a new release._

4.  _Mark the crash as resolved and release a new build to the App Store._ Once resolved, the crash will no longer show up on the crash listings page with the default filters. If the crash does occur again in a later version, it will automatically be marked as unresolved, and will show up on the listing again.

5.  Go back to step 1 and continue to improve your app!

## Troubleshooting

### Why aren't my crashes showing up on the dashboard?

Your app is probably not sending crash reports to Parse. Here are some things to check:

*   Make sure you've enabled Crash Reporting in your App Delegate before you initialize Parse.
*   If you're testing, make sure Xcode isn't catching the crash with the debugger. Build, run, stop the app, and then run it from the home screen.
*   Crashes are sent on the next run of the app. Make sure the app isn't crashing again before it has a chance to send the crash information. If you're testing, you can ensure this by adding a delay.
*   Crashes may take up to a minute to show up on the dashboard.
*   Make sure you don't have any other crash reporting solutions linked to your application, as they might interfere with each other.

### Why aren't my crashes symbolicated?

You probably have not uploaded symbol files for the build of the app associated with the crash. Here are some things to check:

*   If you set up automatic uploading, verify that the uploads have worked by looking at the logs under the Report navigator.
*   Make sure the logs are clean and there were no errors with the upload.
*   If you uploaded symbol files for a crash that was previously unsymbolicated, a new crash will show up with the symbols. The old crash won't be updated with symbols, so you can go ahead and resolve that crash.
*   If you are using custom dynamic frameworks and parts of your stack traces aren't symbolicated, make sure you uploaded symbols for all those frameworks as well as for the main application.
