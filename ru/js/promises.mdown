# Обещания

В дополнение к обратным вызовам, каждый асинхронный метод в SDK JavaScript Parse возвращает `Promise`. Благодаря обещаниям код может быть намного чище, чем вложенный код, полученный с помощью обратных вызовов.

## Метод `then`

Каждое обещание `Promise` имеет метод с названием `then`, который принимает пару обратных вызовов. Первый обратный вызов вызывается, если обещание имеет значение _resolved_, а второй &mdash; если обещание имеет значение _rejected_.

```js
obj.save().then(function(obj) {
  // the object was saved successfully.
},
function(error) {
  // the save failed.
});
```

## Построение цепочки обещаний

Обещания являются удобной функцией, поскольку позволяют построить их в цепочку без вкладывания. Если обратный вызов для обещания возвращает новое обещание, первое из них не будет решено до решения второго. Это позволяет выполнять несколько действий без необходимости в пирамидальном коде, который был бы получен в случае использования обратных вызовов.

```js
var query = new Parse.Query("Student");
query.descending("gpa");
query.find().then(function(students) {
  students[0].set("valedictorian", true);
  return students[0].save();
}).then(function(valedictorian) {
  return query.find();
}).then(function(students) {
  students[1].set("salutatorian", true);
  return students[1].save();
}).then(function(salutatorian) {
  // Everything is done!
});
```

## Обработка ошибок

При возникновении ошибки в одном из обещаний цепочки все последующие успешные обратные вызовы будут пропущены до выполнения обратного вызова ошибки. Обратный вызов ошибки может преобразовать или обработать ее путем возвращения нового обещания, которое не было отклонено. Отклоненные обещания в некотором роде можно считать выдачей исключения. Обратный вызов ошибки действует подобно блоку catch, который может обработать ошибку или повторно выдать исключение.

```js
var query = new Parse.Query("Student");
query.descending("gpa");
query.find().then(function(students) {
  students[0].set("valedictorian", true);
  // Force this callback to fail.
  return Parse.Promise.error("There was an error.");
}).then(function(valedictorian) {
  // Now this will be skipped.
  return query.find();
}).then(function(students) {
  // This will also be skipped.
  students[1].set("salutatorian", true);
  return students[1].save();
}, function(error) {
  // This error handler WILL be called. error will be "There was an error.".
  // Let's handle the error by returning a new promise.
  return Parse.Promise.as("Hello!");
}).then(function(hello) {
  // Everything is done!
}, function(error) {
  // This isn't called because the error was already handled.
});
```

Зачастую очень удобно иметь длинную цепочку успешных обратных вызовов всего с одним обработчиком ошибок на конце.

## Создание обещаний

В начале работы можно просто использовать обещания, возвращенные такими методами, как `find` или `save`. Однако для более продвинутых сценариев может возникнуть необходимость в создании собственных обещаний. После создания `Promise` понадобится вызвать `resolve` или `reject` для запуска его обратных вызовов.

```js
var successful = new Parse.Promise();
successful.resolve("The good result.");

var failed = new Parse.Promise();
failed.reject("An error message.");
```

Если вы знаете результат обещания на момент его создания, можно использовать несколько удобных методов.

```js
var successful = Parse.Promise.as("The good result.");
var failed = Parse.Promise.error("An error message.");
```

## Обещания в серии

Обещания удобны при необходимости создания серии последовательных задач, каждая из которых выполняется по завершении предыдущей. Например, предположим, что вам нужно удалить все комментарии в блоге.

```js
var query = new Parse.Query("Comments");
query.equalTo("post", 123);

query.find().then(function(results) {
  // Create a trivial resolved promise as a base case.
  var promise = Parse.Promise.as();
  _.each(results, function(result) {
    // For each item, extend the promise with a function to delete it.
    promise = promise.then(function() {
      // Return a promise that will be resolved when the delete is finished.
      return result.destroy();
    });
  });
  return promise;
}).then(function() {
  // Every comment was deleted.
});
```

## Обещания в параллели

Можно также использовать обещания для выполнения нескольких задач параллельно при помощи метода `when`. Можно запустить сразу несколько операций и использовать `Parse.Promise.when` для создания нового обещания, которое будет решено после решения всех его входных обещаний. Новое обещание будет успешно, если ни в одном из поданных обещаний не произойдет сбой; в противном случае оно не будет выполнено после обнаружения последней ошибки. Параллельное выполнение операций производится быстрее, чем последовательное, однако может потреблять больше системных ресурсов и пропускной способности.

```js
var query = new Parse.Query("Comments");
query.equalTo("post", 123);

query.find().then(function(results) {
  // Collect one promise for each delete into an array.
  var promises = [];
  _.each(results, function(result) {
    // Start this delete immediately and add its promise to the list.
    promises.push(result.destroy());
  });
  // Return a new promise that is resolved when all of the deletes are finished.
  return Parse.Promise.when(promises);
}).then(function() {
  // Every comment was deleted.
});
```

## Создание асинхронных методов

С помощью этих инструментов можно легко создавать собственные асинхронные функции, возвращающие обещания. Например, можно создать версию `setTimeout` с обещаниями.

```js
var delay = function(millis) {
  var promise = new Parse.Promise();
  setTimeout(function() {
    promise.resolve();
  }, millis);
  return promise;
};
delay(100).then(function() {
  // This ran after 100ms!
});
```
