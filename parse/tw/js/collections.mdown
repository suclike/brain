# 集合

`Parse.Collection` 是經過排序的 `Parse.Object` 集合，與 `[Backbone.Collection](http://documentcloud.github.com/backbone/#Collection)` 相容，且具有所有相同功能。您可以使用模型類別或特定的 `Parse.Query` 建立子類別。

```js
// A Collection containing all instances of TestObject.
var TestCollection = Parse.Collection.extend({
  model: TestObject
});
var collection = new TestCollection();

// A Collection of TestObjects whose temperature is "hot".
var HotCollection = Parse.Collection.extend({
  model: TestObject,
  query: (new Parse.Query(TestObject)).equalTo("temperature", "hot")
});
var collection = new HotCollection();

// The Collection of TestObjects that match a complex query.
var query = new Parse.Query(TestObject);
query.equalTo("temperature", "hot");
query.greaterThan("degreesF", 100);
var collection = query.collection();
```

## 擷取集合

若要載入集合中的所有項目，請使用 `fetch` 方法。

```js
var collection = new TestCollection();
collection.fetch({
  success: function(collection) {
    collection.each(function(object) {
      console.warn(object);
    });
  },
  error: function(collection, error) {
    // The collection could not be retrieved.
  }
});
```

## 集合排序

您可以透過設定 `comparator`，讓集合中的所有項目照順序排列。

```js
var collection = new TestCollection();
collection.comparator = function(object) {
  return object.get("temperature");
};
```

## 修改集合

集合是可變動的。您可以存取所有項目，還能新增或移除項目。

```js
var collection = new TestCollection();
collection.add([
  {"name": "Duke"},
  {"name": "Scarlett"}
]);
// Get the "Duke" Parse.Object by its sorted position.
var model = collection.at(0);
// Or you can get it by Parse objectId.
var modelAgain = collection.get(model.id);
// Remove "Duke" from the collection.
collection.remove(model);
// Completely replace all items in the collection.
collection.reset([
  {"name": "Hawk"},
  {"name": "Jane"}
]);
```

# 檢視

我們納入單純為 `Backbone.View` 副本的 `Parse.View`。請任意使用它來建構應用程式中的檢視。請參閱 [Backbone.View API](http://documentcloud.github.com/backbone/#View)，取得如何使用此類別的詳細資料。請注意，您一旦使用 `Parse.View`，就必須包含 jQuery 或 jQuery 相容 `$` 方法。

# 轉換 Backbone 應用程式

如果您已有現有的 [Backbone](http://documentcloud.github.com/backbone/) 應用程式，很容易就將它轉換以使用我們的 JavaScript SDK。轉換之後，最後您會得到一個靜態檔案集合，其中包含您的應用程式的所有功能。

<div class='tip info'><div>
請參閱[用 JavaScript 編寫待辦應用程式教學](/tutorials/todo-app-with-javascript)，在其中您將能了解如何利用 Parse 作為後端以保存使用者帳號和資料，而建立[標準的 Backbone 待辦應用程式](http://addyosmani.github.com/todomvc/)。
</div></div>

我們的 JavaScript SDK 與 Backbone 相容，也就是說我們的 `Parse.Object` 和 `Parse.Collection` 僅需微調即可替換 `Backbone.Model` 和 `Backbone.Collection`。以下是轉換應用程式的方法：

1.  [遵照安裝 SDK 和現有 JavaScript 應用程式的指示](/apps/quickstart#js/existing)。
2.  用 `Parse.Object` 取代 `Backbone.Model` 的所有執行個體。如果要這樣做，應該以將物件對應至 Parse 類別的適當 `className` 取代 `url` 和 `urlRoot`：

```js
var BackboneTodo = Backbone.Model.extend({
  urlRoot: "/todos"
});

    var ParseTodo = Parse.Object.extend({
  className: "Todo"
});
```
3.  用 `Parse.Collection` 取代 `Backbone.Collection` 的所有執行個體，並且將 `Parse.Object` 類別指定為 `model`。您也應指定 `query`，讓集合知道要如何擷取物件：

```js
var ParseTodoCollection = Parse.Collection.extend({
  model: ParseTodo
});
var todos = new ParseTodoCollection();
// Construct a query to get the current user's todo items
var query = new Parse.Query(ParseTodo);
query.equalTo("user", Parse.User.current());
todos.query = query;
todos.fetch();
```
4.  不論您在伺服器的何處建構模型，您必須建構一個 `Parse.Query` 來取得您感興趣的物件，跟我們在 `Parse.Collection` 上的 `query` 屬性所做的類似。

5.  新增或更新您的應用程式以使用[使用者驗證](/docs/tw/js_guide#users)，並將必要的 ACL 套用到物件。

大功告成。您的應用程式應該就能運作，並使用 Parse 作為後端。
