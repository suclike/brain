# 推送通知

推送通知是让用户参与您的应用程序并了解其最新动态的有效方法。您可以快速有效地到达整个用户群。本指南将帮助您了解设置流程和 Parse 发送推送通知的基本用法。

<div class='tip info'><div>
JavaScript SDK 目前不支持接收推送。它只能用于向 iOS 和 Android 应用程序发送通知。一个常见的用例就是从[ Cloud Code ](/docs/cn/cloud_code_guide)发送推送。
</div></div>

## 设置推送

使用 JavaScript SDK 发送推送通知无设置要求。若您尚未配置您的 iOS 或 Android 客户端使用推送，请使用顶部的平台切换工具查看设置说明。

## 安装

安装于注册了推送通知的设备上的每个 Parse 应用程序均有一个相关的 `Installation` 对象。该 `Installation` 对象是您储存推送通知目标定位所需的全部信息的位置。例如，在某个棒球应用中，您可以保存用户感兴趣的球队，以便发送关于球队成绩的更新信息。

注意，`Installation` 数据仅能通过客户端 SDK、数据浏览器或 REST API 修改。

该类有几个特殊字段，可以帮助您管理和定位设备。

*   **`badge`**：iOS 应用程序图标标记的当前值。在服务器上对该值的更改将用于之后根据推送通知的数量计算图标标记增量。
*   **`channels`**：设备当前订阅内容的各种传送通道。
*   **`timeZone`**：目标设备所在地的当前时区。设备每次保存 `Installation` 对象时，该值就会进行同步_（只读）_。
*   **`deviceType`**：设备类型，值为&ldquo;ios&rdquo;或&ldquo;android&rdquo;_（只读）_。
*   **`installationId`**：Parse 使用的设备唯一 Id_（只读）_。
*   **`deviceToken`**：Apple 生成的供 iOS 设备使用的令牌_（只读）_。

## 发送推送通知

通过 Parse 发送推送通知的方式有两种：[通道](#sending-channels)和[高级定位](#sending-queries)。通道提供了一种简单而且使用方便的推送通知发送模式，而高级定位提供了一种更加强大和灵活的模式。两者完全兼容，本节将对其进行详细介绍。

一般通过 Web Console、REST API 或[ Cloud Code 发送通知。由于 JavaScript SDK 是通过 Cloud Code 实现的，因此，如果您想要通过云函数发送推送，可以从这里开始。但是，如果您决定通过 Cloud Code 以外的 JavaScript SDK 或通过其他任何客户端 SDK 发送通知，则需要在 Parse 应用程序推送通知设置中设置 **Client Push Enabled**。

![](/images/docs/client_push_settings.png)

### 使用通道

开始发送通知最简单的方式就是使用通道。这种方式下可以采用&ldquo;发布者-订阅者&rdquo;模式发送推送通知。设备先订阅一个或多个通道，然后通知会发送到这些订阅者的设备上。由给定 `Installation` 订阅的通道储存在 `Installation` 对象的 `channels` 字段中。

#### 订阅通道

JavaScript SDK 目前不支持 iOS 和 Android 设备订阅推送。使用顶部的平台切换工具查看 iOS、Android 或 REST 推送指南。

### 向通道发送推送通知

使用 JavaScript SDK，可以用以下代码向&ldquo;Giants&rdquo;（巨人队）和&ldquo;Mets&rdquo;（大都会队）通道的所有订阅者发送比赛结果。这在 iOS 用户的设备上将显示为通知中心提醒，而在 Android 用户的设备上将显示为系统托盘通知。

```js
Parse.Push.send({
  channels: [ "Giants", "Mets" ],
  data: {
    alert: "The Giants won against the Mets 2-3."
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

## 使用高级定位

对于很多应用程序来说，通道非常好用，但是有时您在定位推送通知接收者时需要更精确。Parse 允许您使用[查询 API](#sending) 编写关于 `Installation` 对象任何子集的查询，然后向它们发送推送通知。

`Installation` 对象与 Parse 中储存的其他任何对象类似，因此您可以保存您想要的任何数据，甚至可以在 `Installation` 对象与其他对象之间创建关系。这样您可以将推送通知发送给您自定义并且动态变化的一部分用户群体。

### 保存安装数据

JavaScript SDK 目前不支持修改 `Installation` 对象。使用顶部的平台切换工具查看 iOS、Android 或 REST 推送指南。

#### 向查询发送推送通知

将数据储存在 `Installation` 对象中之后，您可以使用查询来定位这些设备的某个子集。`Parse.Installation` 查询的运行方式与其他任何 [Parse 查询](/docs/cn/js_guide#queries)相同。

```js
var query = new Parse.Query(Parse.Installation);
query.equalTo('injuryReports', true);

Parse.Push.send({
  where: query, // Set our Installation query
  data: {
    alert: "Willie Hayes injured by own pop fly."
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

我们甚至可以将查询与通道一同使用。若要向&ldquo;Giants&rdquo;（巨人队）通道的所有订阅者发送推送通知，但是又要过滤想接收得分更新消息的订阅者，我们可以执行以下操作：

```js
var query = new Parse.Query(Parse.Installation);
query.equalTo('channels', 'Giants'); // Set our channel
query.equalTo('scores', true);

Parse.Push.send({
  where: query,
  data: {
    alert: "Giants scored against the A's! It's now 2-2."
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

如果我们在 `Installation` 类中储存了与其他对象的关系，我们也可以在查询中使用这些关系。例如，我们可以向这样向给定位置附近的所有用户发送推送通知：

```js
// Find users near a given location
var userQuery = new Parse.Query(Parse.User);
userQuery.withinMiles("location", stadiumLocation, 1.0);

// Find devices associated with these users
var pushQuery = new Parse.Query(Parse.Installation);
pushQuery.matchesQuery('user', userQuery);
// Send push notification to query
Parse.Push.send({
  where: pushQuery,
  data: {
    alert: "Free hotdogs at the Parse concession stand!"
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

## 发送选项

推送通知不仅仅只是发送消息。在 iOS 中，推送通知还可以包括待播放的声音、待显示的图标标记数字以及您希望发送的任何自定义数据。在 Android 中，还可以在收到通知后发出一个指定的 `Intent`。若是时效性通知，还可设置通知的到期日期。

### 自定义您的通知

如果您不仅仅想要发送消息，您可以在 `data` 字典中设置其他字段。有些保留字段有特殊意义。

*   **`alert`**：通知的提醒消息。
*   **`badge`**：_（仅限 iOS ）_应用程序图标右上角显示的值。可将其设置为一个值或 `Increment`，以便将当前值加 1。
*   **`sound`**：_（仅限 iOS）_应用程序包中声音文件的名称。
*   **`content-available`**：_（仅限 iOS）_如果您在编写 [Newsstand](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html) 应用程序或是使用远程通知后台模式（[iOS7 中引入](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10)，又称&ldquo;后台推送&rdquo;）的应用程序，请将此值设置为 1，以便激活后台下载。
*   **`action`**：_（仅限 Android）_收到推送通知后应激活 `Intent`。若未指定 `title` 或 `alert` 值，则 `Intent` 将被激活，但是用户看不到任何通知。
*   **`title`**：_（仅限 Android）_ Android 系统托盘通知中显示的值。

例如，若要发送通知并使当前标记数字加 1，同时向 iOS 设备播放自定义声音，以及向 Android 用户显示特定标题，您可以进行以下操作：

```js
Parse.Push.send({
  channels: [ "Mets" ],
  data: {
    alert: "The Mets scored! The game is now tied 1-1.",
    badge: "Increment",
    sound: "cheering.caf",
    title: "Mets Score!"
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

您还可以在此字典中指定您自己的数据。iOS 和 Android&ldquo;接收通知&rdquo;部分提到，只有用户通过通知打开您的应用时 iOS 才会为您提供这些数据，Android 将在指定了数据时才会在 `Intent` 中为您提供该数据。

```js
var query = new Parse.Query(Parse.Installation);
query.equalTo('channels', 'Indians');
query.equalTo('injuryReports', true);
Parse.Push.send({
  where: query,
  data: {
    action: "com.example.UPDATE_STATUS",
    alert: "Ricky Vaughn was injured in last night's game!",
    name: "Vaughn",
    newsItem: "Man bites dog"
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

### 设置有效期

用户设备关机或未连接网络的情况下，推送通知无法送达。如果您想发送具有时效性、不适合太晚发送的通知，您可以为其设置有效期。这样可以避免向用户提醒可能不再相关的信息。

Parse 提供了两个参数帮助您为通知设置有效期。第一个参数是 `expiration_time`，该参数用 `Date` 规定 Parse 停止尝试发送通知的时间。若要将通知有效期规定为从现在开始的 1 周，您可以使用以下代码：

```js
var oneWeekAway = new Date(...);

Parse.Push.send({
  where: everyoneQuery,
  expiration_time: oneWeekAway,
  data: {
    alert: "Season tickets on sale until next week!"
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

或者，您可以使用 `expiration_interval` 参数指定通知到期前的一段持续时间。该值与[通知排程](#scheduled)使用的 `push_time` 参数有关。这意味着，安排在一天中发送、6 天后到期的通知可以在从现在开始的一周内收到。

```js
var oneDayAway = new Date(...);
var sixDaysAwayEpoch = (new Date(...)).getTime();

Parse.Push.send({
  push_time: oneDayAway,
  expiration_interval: sixDaysAwayEpoch,
  data: {
    alert: "Season tickets on sale until next week!" %>"

}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

### 通过平台定位

如果您创建了跨平台应用程序，则可能想要只定位 iOS 或 Android 设备。有两种方法可以在这些设备中定位某些设备。注意，默认定位两个平台。

下面的示例中，将向 Android 和 iOS 用户发送不同的通知。

```js
// Notification for Android users
var query = new Parse.Query(Parse.Installation);
query.equalTo('deviceType', 'android');
Parse.Push.send({
  where: query,
  data: {
    alert: "Your suitcase has been filled with tiny robots!"
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
// Notification for iOS users
var query = new Parse.Query(Parse.Installation);
query.equalTo('deviceType', 'ios');
Parse.Push.send({
  where: query,
  data: {
    alert: "Your suitcase has been filled with tiny apples!"
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

## 推送通知排程

您可以通过指定 `push_time` 来提前为推送通知排程。例如，若用户为在 UTC 时间 下周 中午的比赛预约比赛提醒，您可以通过发送以下内容来安排推送通知：

```js
var tomorrowDate = new Date(...);

var query = new Parse.Query(Parse.Installation);
query.equalTo('user_id', 'user_123');

Parse.Push.send({
  where: query,
  data: {
    alert: "You previously created a reminder for the game today" 
  },
  push_time: tomorrowDate
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

若您还指定 `expiration_interval`，它是根据安排的推送时间而不是提交推送的时间计算的。这说明，安排在一周中发送并在一天内过期的推送通知，将在请求发送后的 8 天后到期。

排程时间不能是过去时间，最长是未来两周。它可以是上面例子中有日期、时间和时区的 ISO 8601 日期，也可以是表示表示 UNIX 新纪元时间的数值，单位：秒 (UTC)。要为 UTC 时间 08/22/2015 中午排程一个提醒，您可以将 `push_time` 设置为 `2015-08-022T12:00:00.000Z` 或 `1440226800000`。

## 接收推送通知

<div class='tip info bottom'><div>
JavaScript SDK 目前不支持接收推送。若要了解关于在 iOS 和 Android 设备上接收推送通知的信息，请查看各平台专用指南。
</div></div>

