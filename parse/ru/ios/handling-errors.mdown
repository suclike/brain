# Обработка ошибок

В Parse существует несколько простых схем поиска ошибок и их обработки в коде.

Можно столкнуться с двумя типами ошибок. Первый тип включает обработку логических ошибок в использовании SDK. Этот тип ошибок приводит к вызову исключения `NSException`. Например, рассмотрим следующий код:

```objc
PFUser *user = [PFUser user];
[user signUp];
```

Этот код вызовет `NSInternalInconsistencyException`, так как метод `signUp` был вызван без предварительной настройки обязательных свойств (`username` и `password`).

Второй тип ошибок включает ошибки, которые происходят при взаимодействии с Parse Cloud через сеть. Эти ошибки связаны с проблемами подключения к облаку или с проблемами выполнения запрошенной операции. Рассмотрим другой пример:

```objc
- (void)getMyNote {
    PFQuery *query = [PFQuery queryWithClassName:@"Note"];
    [query getObjectInBackgroundWithId:@"thisObjectIdDoesntExist"
           target:self 
           selector:@selector(callbackForGet:error:)];
}
```

В представленном выше коде мы попытались получить объект с несуществующим полем `objectId`. Parse Cloud вернет ошибку с кодом ошибки, указанным в поле `code`, и сообщением в поле `userInfo` ошибки. Ниже представлена правильная обработка этой ошибки в обратном вызове:

```objc
- (void)callbackForGet:(PFObject *)result error:(NSError *)error {
    if (result) {
        NSLog(@"Everything went fine!");
    } else {
        if ([error code] == kPFErrorObjectNotFound) {
            NSLog(@"Uh oh, we couldn't find the object!");
        } else if (error) {
            NSLog(@"Error: %@", [error userInfo][@"error"]);
        }
    }
}
```

Запрос также мог завершиться ошибкой, так как устройство не смогло подключиться к Parse Cloud. Ниже представлен тот же обратный вызов, но добавлен код для четкой обработки этого сценария:

```objc
- (void)callbackForGet:(PFObject *)result error:(NSError *)error {
    if (result) {
        NSLog(@"Everything went fine!");
    } else {
        if ([error code] == kPFErrorObjectNotFound) {
            NSLog(@"Uh oh, we couldn't find the object!");
            // Now also check for connection errors:
        } else if ([error code] == kPFErrorConnectionFailed) {
            NSLog(@"Uh oh, we couldn't even connect to the Parse Cloud!");
        } else if (error) {
            NSLog(@"Error: %@", [error userInfo][@"error"]);
        }
    }
}
```

Когда обратный вызов ожидает `NSNumber`, его поле `boolValue` сообщает, завершилась ли успешно операция или нет. Например, обратный вызов метода `saveInBackgroundWithTarget:selector:` для объекта `%{ParseObject}` можно реализовать следующим образом:

```objc
- (void)callbackForSave:(NSNumber *)result error:(NSError *)error {
    if ([result boolValue]) {
        NSLog(@"Everything went fine!");
    } else {
        if ([error code] == kPFErrorConnectionFailed) {
            NSLog(@"Uh oh, we couldn't even connect to the Parse Cloud!");
        } else if (error) {
            NSLog(@"Error: %@", [error userInfo][@"error"]);
        }
    }
}
```

Для синхронных (нефоновых) методов обработка ошибок в основном выполняется таким же образом, но вместо поля `NSNumber`, которое указывает на успешное завершение или сбой операции, будет получено непосредственно значение `BOOL`.

По умолчанию все подключения имеют тайм-аут в 10 секунд, поэтому синхронные методы не будут висеть бесконечно.

Список всех возможных типов ошибок `NSError` см. в разделе «Коды ошибок» в [API](/docs/ios).
