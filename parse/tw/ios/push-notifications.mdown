## 推播通知

推播通知是讓使用者對應用程式保持互動和接收通知的好方法。您可以快速且有效地接觸整個使用者群。本指南將協助您了解 Parse 的設定程序和一般用途，以發送推播通知。

## 設定推播

如果您想開始使用推播功能，請先詳閱 [iOS 推播教學](/tutorials/ios-push-notifications)，以了解如何設定您的應用程式。請於閱讀後回到本指南，了解更多有關 Parse 提供的推播功能。

## 安裝

在已登錄推播通知的裝置上所安裝的每個 Parse 應用程式，都有相關聯的 `Installation` 物件。`Installation` 物件是儲存推播通知目標設定所需全部資料的地方。例如，您可以在棒球應用程式中將某使用者感興趣的球隊儲存起來，以便傳送關於球隊表現的更新資訊。

在 iOS 中，`Installation` 物件可透過 `%{ParseInstallation}` 類別使用（`%{ParseObject}` 的子類別）。此物件會使用[相同的 API](#objects) 儲存和擷取資料。若要從 iOS 應用程式存取目前的 `Installation` 物件，請使用 `[PFInstallation currentInstallation]` 方法。初次儲存 `%{ParseInstallation}` 時，Parse 會把它加入 `Installation` 類別，而且只要設定其 `deviceToken` 欄位，即可用於推播通知目標設定。

```objc
- (void)application:(UIApplication *)application
        didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    // Store the deviceToken in the current Installation and save it to Parse.
    PFInstallation *currentInstallation = [PFInstallation currentInstallation];
    [currentInstallation setDeviceTokenFromData:deviceToken];
    [currentInstallation saveInBackground];
}
```

雖然可以像 `%{ParseObject}` 一樣修改 `%{ParseInstallation}`，不過有幾個特殊欄位有助於管理和鎖定裝置。

*   **`badge`**：iOS 應用程式目前的圖示徽章值。在 `%{ParseInstallation}` 上更改此值，會更新應用程式圖示的徽章值。您所做的更改可儲存至伺服器，以便用於將來的徽章遞增推播通知。
*   **`channels`**：裝置目前訂閱的頻道陣列。
*   **`timeZone`**：目標裝置所在地點的目前時區。每當從裝置中儲存 `Installation` 物件時，此值就會同步_（唯讀）_。
*   **`deviceType`**：裝置類型，「iOS」、「Android」、「Winrt」、「Winphone」或「Dotnet」_（唯讀）_。
*   **`installationId`**：Parse 所用裝置的唯一 ID_（唯讀）_。
*   **`deviceToken`**：Apple 所產生用於 iOS 裝置的權仗_（唯讀）_。
*   **`channelUris`**：Microsoft 所產生供 Windows 裝置使用的推播 URI_（唯讀）_。
*   **`appName`**：此安裝所屬用戶端應用程式的顯示名稱_（唯讀）_。
*   **`appVersion`**：此安裝所屬用戶端應用程式的版本字串_（唯讀）_。
*   **`parseVersion`**：此安裝所使用的 Parse SDK 版本_（唯讀）_。
*   **`appIdentifier`**：此安裝的用戶端應用程式之唯一識別碼。在 iOS 中，這是程式套件識別碼_（唯讀）_。

## 傳送推播

有兩種方法可以使用 Parse 傳送推播通知：[頻道](#sending-channels)和[進階目標設定](#sending-queries)。頻道提供易於使用的傳送推播模型，而進階目標設定則提供功能更強大且更具彈性的模型。兩者之間完全相容，我們將在本節中解說。

傳送通知通常是從 Web 主控台、REST API 或 Cloud Code 進行。然而，推播通知也可由現有的用戶端 SDK 觸發。如果您決定從用戶端 SDK 傳送通知，則您必須在 Parse 應用程式的「推播通知」設定中設定**Client Push Enabled**。

![](/images/docs/client_push_settings.png)

### 使用頻道

開始傳送推播最簡單的方法就是使用頻道。這樣能讓您使用發佈者-訂閱者模式來傳送推播。裝置先開始訂閱一或多個頻道，之後通知就可以傳送給這些訂閱者。特定 `Installation` 所訂閱的頻道，會儲存在 `Installation` 物件的 `channels` 欄位。

#### 訂閱頻道

頻道是用由字母開頭且以英數字元、底線、破折號組成的字串來識別。可以使用之前不必明確地建立頻道，而每個 `Installation` 可同時訂閱任何數目的頻道。

可以利用 `%{ParseObject}` 中的 `addUniqueObject:` 方法訂閱頻道。例如，在棒球比分應用程式中，我們可以：

```objc
// When users indicate they are Giants fans, we subscribe them to that channel.
PFInstallation *currentInstallation = [PFInstallation currentInstallation];
[currentInstallation addUniqueObject:@"Giants" forKey:@"channels"];
[currentInstallation saveInBackground];
```

訂閱「Giants」頻道後，您的 `Installation` 物件應該會有更新的 `channels` 欄位。

![](/images/docs/installation_channel.png)


取消訂閱頻道也一樣簡單：

```objc
// When users indicate they are no longer Giants fans, we unsubscribe them.
PFInstallation *currentInstallation = [PFInstallation currentInstallation];
[currentInstallation removeObject:@"Giants" forKey:@"channels"];
[currentInstallation saveInBackground];
```

已訂閱頻道的集合會快取於 `currentInstallation` 物件中：

```objc
NSArray *subscribedChannels = [PFInstallation currentInstallation].channels;
```

如果您計劃要從 Cloud Code 或資料瀏覽器變更頻道，請注意您必須在此行程式碼之前呼叫某種形式的 `fetch`，才能取得最新的頻道。

#### 將推播傳送至頻道

在 iOS SDK 中，下列程式碼可用來警示所有「Giants」頻道的訂閱者他們喜愛的球隊剛剛得分了。這會向 iOS 使用者顯示通知中心警示，以及向 Android 使用者顯示系統匣通知。

```objc
// Send a notification to all devices subscribed to the "Giants" channel.
PFPush *push = [[PFPush alloc] init];
[push setChannel:@"Giants"];
[push setMessage:@"The Giants just scored!"];
[push sendPushInBackground];
```

如果您想用單一推播通知鎖定多個頻道，可以使用頻道的 `NSArray`。

```objc
NSArray *channels = [NSArray arrayWithObjects:@"Giants", @"Mets", nil];
PFPush *push = [[PFPush alloc] init];
// Be sure to use the plural 'setChannels'.
[push setChannels:channels];
[push setMessage:@"The Giants won against the Mets 2-3."];
[push sendPushInBackground];
```

### 使用進階目標設定

雖然對許多應用程式來說頻道很好用，不過有時您在設定推播的目標接收者時需要更高的準確度。Parse 能讓您利用[查詢 API](#queries)，對 `Installation` 物件的任何子集編寫查詢，再傳送推播給它們。

由於 `%{ParseInstallation}` 是 `%{ParseObject}` 的子類別，因此您可以儲存想儲存的任何資料，甚至能在 `Installation` 物件和其他物件之間建立關聯。這讓您能將推播傳送給自訂程度很高又不斷變化的使用者群。

#### 儲存安裝資料

將資料儲存在 `Installation` 物件上就跟將[任何其他資料](#objects)儲存在 Parse 上一樣簡單。在我們的棒球應用程式中，可以讓使用者得到關於比賽結果、比分和受傷報告的推播。

```objc
// Store app language and version
PFInstallation *installation = [PFInstallation currentInstallation];
[installation setObject:YES forKey:@"scores"];
[installation setObject:YES forKey:@"gameResults"];
[installation setObject:YES forKey:@"injuryReports"];
[installation saveInBackground];
```

您甚至可以在 `Installation` 物件和儲存於 Parse 的其他類別之間建立關聯性。例如，若您要在 PFInstallation 與特定使用者建立關聯，只需將目前使用者儲存於 `%{ParseInstallation}` 即可。

```objc
// Associate the device with a user
PFInstallation *installation = [PFInstallation currentInstallation];
installation[@"user"] = [PFUser currentUser];
[installation saveInBackground];
```

#### 將推播傳送至查詢

一旦您將資料儲存於 `Installation` 物件，就可以使用 `PFQuery` 鎖定這些裝置的子集。`Installation` 查詢跟任何其他 [Parse 查詢](#queries)的運作方式一樣，但我們使用特殊的靜態方法 `[PFInstallation query]` 來建立查詢。在傳送通知之前，我們在 `PFPush` 物件上設定此查詢。

```objc
// Create our Installation query
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"injuryReports" equalTo:YES];
// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
// Set our Installation query
[push setMessage:@"Willie Hayes injured by own pop fly."];
[push sendPushInBackground];
```

我們甚至可以在查詢中使用頻道。若要傳送推播給所有「Giants」頻道的訂閱者，但要篩選誰想更新比分，我們可以執行下列動作：

```objc
// Create our Installation query
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"channels" equalTo:@"Giants"];
// Set channel
[pushQuery whereKey:@"scores" equalTo:YES];
// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
[push setMessage:@"Giants scored against the A's! It's now 2-2."];
[push sendPushInBackground];
```

如果我們在 `Installation` 類別中儲存與其他物件的關聯性，我們也可以在查詢中使用那些物件。例如，我們可以傳送推播通知給特定地點附近的所有使用者。

```objc
// Find users near a given location
PFQuery *userQuery = [PFUser query];
[userQuery whereKey:@"location"
           nearGeoPoint:stadiumLocation
           withinMiles:[NSNumber numberWithInt:1]]
// Find devices associated with these users
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"user" matchesQuery:userQuery];

// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
// Set our Installation query
[push setMessage:@"Free hotdogs at the Parse concession stand!"];
[push sendPushInBackground];
```

## 傳送選項

推播通知不只能傳送訊息而己。在 iOS 中，推播也能納入要播放的聲音、要顯示的徽章號碼以及任何您想傳送的自訂資料。如果通知具有時效性，也可以在通知中設定到期日。

### 自訂通知

如果您不���想傳送訊息而己，就必須使用 `NSDictionary` 封裝所有資料。部分保留欄位具有特殊意義。

*   **`alert`**：通知的訊息。
*   **`badge`**：_（僅限 iOS）_顯示在應用程式圖示右上角的值。可以設為某個值；也可以設為 `Increment`，使目前值以 1 為遞增單位。
*   **`sound`**：_（僅限 iOS）_應用程式套件中的聲音檔名稱。
*   **`content-available`**：_（僅限 iOS）_如果您正在編寫 [Newsstand](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html) 應用程式或使用 [iOS7 新推出](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10)的「遠端通知背景模式」（亦稱為「背景推播」），請將此值設定為 1 以觸發背景下載。
*   **`action`**：_（僅限 Android）_`Intent` 在接收推播時應該要引發。若指定了不是 `title` 或 `alert` 的值，`Intent` 會被引發，但不會傳送通知給使用者。
*   **`title`**：_（僅限 Android、Windows 8 和 Windows Phone 8）_在 Android 系統匣或 Windosw 快顯通知顯示的值。

例如，若要傳送通知，將目前徽章號碼增加 1 且播放自訂聲音，您可以按照下列步驟進行：

```objc
NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:
                       @"The Mets scored! The game is now tied 1-1!", @"alert",
                       @"Increment", @"badge",
                       @"cheering.caf", @"sound",
                       nil];
PFPush *push = [[PFPush alloc] init];
[push setChannels:[NSArray arrayWithObjects:@"Mets", nil]];
[push setData:data];
[push sendPushInBackground];
```

也可在此字典中指定您自己的資料。我們將在[接收通知](#receiving)章節中讀到，只有使用者透過通知開啟您的應用程式時，您才能取得此資料的存取權限。有使用者開啟特定通知時，這種作法對顯示不同的檢視控制器很有用。

```objc
NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:
                        @"Ricky Vaughn was injured in last night's game!", @"alert",
                        @"Vaughn", @"name",
                        @"Man bites dog", @"newsItem",
                        nil];
PFPush *push = [[PFPush alloc] init];
[push setQuery:injuryReportsQuery];
[push setChannel:@"Indians"];
[push setData:data];
[push sendPushInBackground];
```

不論您的推播通知遞增應用程式的徽章或將其設定為特定值，您的應用程式最終仍須清除其徽章。我們會在[清除徽章](#receiving)中解說。

### 設定到期日

使用者的裝置關閉或未連線至網際網路時，就無法傳送推播通知。如果您的通知具有時效性，太晚就不值得傳送的話，您可以設定到期日。這樣做可避免以不再相關的資訊警示使用者。

`PFPush` 類別提供兩種設定通知到期日的方法。第一種是 `expireAtDate:`，這種方法會用 `NSDate` 指定 Parse 應於何時停止嘗試傳送通知。

```objc
// Create date object for tomorrow
NSDateComponents *comps = [[NSDateComponents alloc] init];
[comps setYear:2015];
[comps setMonth:8];
[comps setDay:14];
NSCalendar *gregorian =
  [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
NSDate *date = [gregorian dateFromComponents:comps];

// Send push notification with expiration date
PFPush *push = [[PFPush alloc] init];
[push expireAtDate:date];
[push setQuery:everyoneQuery];
[push setMessage:@"Season tickets on sale until August 8th!"];
[push sendPushInBackground];
```

不過這種方法有一點值得注意。由於裝置上的時鐘並不一定準確，所以可能結果也不準確。因此，`PFPush` 類別也提供 `expireAfterTimeInterval:` 方法。此方法接受 `NSTimeInterval` 物件。指定的時間間隔結束之後，通知就會到期。

```objc
// Create time interval
NSTimeInterval interval = 60*60*24*7; // 1 week

// Send push notification with expiration interval
PFPush *push = [[PFPush alloc] init];
[push expireAfterTimeInterval:interval];
[push setQuery:everyoneQuery];
[push setMessage:@"Season tickets on sale until next week!"];
[push sendPushInBackground];
```

### 按照平台進行目標設定

如果您建立跨平台的應用程式，有可能只想將目標設定為特定作業系統的裝置。進階目標設定能讓您篩選要將目標設定為哪些裝置。

下列範例將傳送不同通知給 Android、iOS 和 Windows 8 使用者。

```objc
PFQuery *query = [PFInstallation query];
[query whereKey:@"channels" equalTo:@"suitcaseOwners"];

// Notification for Android users
[query whereKey:@"deviceType" equalTo:@"android"];
PFPush *androidPush = [[PFPush alloc] init];
[androidPush setMessage:@"Your suitcase has been filled with tiny robots!"];
[androidPush setQuery:query];
[androidPush sendPushInBackground];

// Notification for iOS users
[query whereKey:@"deviceType" equalTo:@"ios"];
PFPush *iOSPush = [[PFPush alloc] init];
[iOSPush setMessage:@"Your suitcase has been filled with tiny apples!"];
[iOSPush setChannel:@"suitcaseOwners"];
[iOSPush setQuery:query];
[iOSPush sendPushInBackground];

// Notification for Windows 8 users
[query whereKey:@"deviceType" equalTo:@"winrt"];
PFPush *winPush = [[PFPush alloc] init];
[winPush setMessage:@"Your suitcase has been filled with tiny glass!"];
[winPush setQuery:query];
[winPush sendPushInBackground];

// Notification for Windows 8 users
[query whereKey:@"deviceType" equalTo:@"winphone"];
PFPush *winPush = [[PFPush alloc] init];
[wpPush setMessage:@"Your suitcase is very hip; very metro."];
[wpPush setQuery:query];
[wpPush sendPushInBackground];
```

## 推播排程

iOS SDK 目前並不支援傳送已排程的推播通知。請參閱 REST API、JavaScript SDK 或 Web 主控台。

## 接收推播

如我們在[自訂通知](#options-data)章節中所見，任意資料可跟通知訊息一起傳送。我們可用此資料修改應用程式在有使用者開啟通知時的行為。例如，開啟通知時看到有朋友在使用者的圖片留言，若能顯示此圖片再好不過。

由於 Apple 所設的封裝大小限制，您必須審慎管理傳送的額外資料量，因為它會降低訊息的最大容量。因此，建議您盡可能保持額外索引鍵和值愈小愈好。

```objc
NSDictionary *data = @{
    @"alert": @"James commented on your photo!",
    @"p": @"vmRZXZ1Dvo" // Photo's object id
};
PFPush *push = [[PFPush alloc] init];
[push setQuery:photoOwnerQuery];
[push setData:data];
[push sendPushInBackground];
```

### 回應承載

應用程式由通知開啟時，即可透過 `launchOptions` 字典在 `application:didFinishLaunchingWithOptions:` 方法中使用這些資料。

```objc
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    . . .
    // Extract the notification data
    NSDictionary *notificationPayload = launchOptions[UIApplicationLaunchOptionsRemoteNotificationKey];
    // Create a pointer to the Photo object
    NSString *photoId = [notificationPayload objectForKey:@"p"];
    PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@"Photo"
                                      objectId:photoId];
    // Fetch photo object
    [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
        // Show photo view controller
        if (!error && [PFUser currentUser]) {
            PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];
            [self.navController pushViewController:viewController animated:YES];
        }
    }];
}
```

接收到通知時如果應用程式已在執行中，則可透過 `userInfo` 字典，在 `application:didReceiveRemoteNotification:fetchCompletionHandler:` 方法中使用這些資料。

```objc
- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))handler {
    // Create empty photo object
    NSString *photoId = [userInfo objectForKey:@"p"];
    PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@"Photo"
                                      objectId:photoId];
    // Fetch photo object
    [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
        // Show photo view controller
        if (error) {
            handler(UIBackgroundFetchResultFailed);
        } else if ([PFUser currentUser]) {
            PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];
            [self.navController pushViewController:viewController animated:YES];
            handler(UIBackgroundFetchResultNewData);
        } else {
            handler(UIBackgroundModeNoData);
        }
    }];
}
```

您可以在 Apple 的[本機和推播通知程式設計指南](http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/IPhoneOSClientImp/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW1)中閱讀處理推播通知的更多資料。

### 追蹤推播和應用程式開啟次數

為了追蹤使用者隨時間經過的參與互動以及追蹤推播通知的效果，我們在 `PFAnalytics` 類別中提供一些監控程式 (Hook)。應用程式開啟次數和推播相關的開啟率可在應用程式的主控板中取得。

首先，將下列程式碼加入 `application:didFinishLaunchingWithOptions:` 方法，以收集關於應用程式啟動時間和觸發原因的相關資訊。即便是使用更先進的 iOS 7 背景推播功能，額外檢查可確保單一邏輯應用程式開啟或推播開啟事件能被計算到。

```objc
if (application.applicationState != UIApplicationStateBackground) {
    // Track an app open here if we launch with a push, unless
    // "content_available" was used to trigger a background push (introduced
    // in iOS 7). In that case, we skip tracking here to avoid double
    // counting the app-open.
    BOOL preBackgroundPush = ![application respondsToSelector:@selector(backgroundRefreshStatus)];
    BOOL oldPushHandlerOnly = ![self respondsToSelector:@selector(application:didReceiveRemoteNotification:fetchCompletionHandler:)];
    BOOL noPushPayload = ![launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];
    if (preBackgroundPush || oldPushHandlerOnly || noPushPayload) {
        [PFAnalytics trackAppOpenedWithLaunchOptions:launchOptions];
    }
}
```

再者，如果您的應用程式正在執行或在背景中執行，則會改由 `application:didReceiveRemoteNotification:` 方法處理推播承載。如果應用程式於背景中執行時，使用者在推播通知上執行動作，應用程式就會被帶到前景。當正在「從推播通知開啟」應用程式時，若要追蹤此轉換，請在呼叫任何追蹤程式碼之前，再一次執行檢查：

```objc
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
    if (application.applicationState == UIApplicationStateInactive) { 
        // The application was just brought from the background to the foreground, 
        // so we consider the app as having been "opened by a push notification." 
        [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];
    }
}
```

最後，如果使用 iOS 7 的任何新推播功能（包括新的「可用內容」推播功能），也請記得要實作 iOS 7 專用的處理常式：

```objc
- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
            if (application.applicationState == UIApplicationStateInactive) {
                [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];
            }
}
```

#### 在 OS X 上追蹤

如果您的 OS X 應用程式支援接收推播通知，而您想追蹤跟推播相關的應用程式開啟次數，請將監控程式加入 `application:didReceiveRemoteNotification:` 方法中（如同在 iOS 中），並將下列程式碼加入 `applicationDidFinishLaunching:`

```objc
- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {
    // ... other Parse setup logic here
    [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:[aNotification userInfo]];
}
```

#### 追蹤本機通知（僅限 iOS）

若要追蹤有關本機通知的分析，請注意若有實作，_除了_ `application:didFinishLaunchingWithOptions:` 之外，還會呼叫 `application:didReceiveLocalNotification:`。請格外小心以免追蹤重複事件。

#### 清除徽章

應用程式開啟時通常是清除徽章的最佳時機。在目前安裝上設定徽章屬性將更新應用程式的圖示徽章數目，並確保最新的徽章值在下次儲存時會保留在伺服器中。您只需要：

```objc
- (void)applicationDidBecomeActive:(UIApplication *)application {
    PFInstallation *currentInstallation = [PFInstallation currentInstallation];
    if (currentInstallation.badge != 0) {
        currentInstallation.badge = 0;
        [currentInstallation saveEventually];
    }
    // ... 
}
```

[UIApplicationDelegate 文件](http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIApplicationDelegate_Protocol/Reference/Reference.html)包含應用程式生命周期的監控程式詳細資訊；跟重設徽章計數最相關的為 `applicationDidBecomeActive:`、`application:didFinishLaunchingWithOptions:` 和 `application:didReceiveRemoteNotification:`。

## 疑難排解

設定推播通知對開發人員來說通常充滿挫折。過程很複雜且會不斷發生問題。如果您遇到問題，請嘗試這些疑難排解提示。 

*   請確定您在 `Info.plist` 檔案中使用正確的程式套件識別碼（如 [iOS 推播通知教學](/tutorials/ios-push-notifications)步驟 4.1 的「設定支援推播功能的 iOS 應用程式」標題所述）。
*   請確認您在「專案」&gt;「建立設定」中設定了正確的佈建設定檔（如 iOS 推播通知教學的步驟 4.3 所述）。
*   清除您的專案，然後重新啟動 Xcode。
*   藉由瀏覽至[憑證、識別碼與設定檔](https://developer.apple.com/account/overview.action)、變更佈建設定檔上的應用程式 ID 設定，然後再改回設定，嘗試重新產生佈建設定檔。您必須依教學的步驟 2（建立佈建設定檔）所述重新安裝設定檔，再依步驟 4（設定支援推播功能的 iOS 應用程式）所述將其設定於專案建立設定中。
*   開啟 Xcode Organizer，然後從電腦和 iOS 裝置中刪除所有到期和未使用的佈建設定檔。
*   如果所有程式碼編譯和執行並未出現錯誤，但您仍未收到推播，請確定有授權給應用程式以接收通知。您可以在 iOS 裝置的 `Settings > Notification >        YourAppName` 進行確認。*   如果已授權應用程式接收推播通知，請確認您是以正確的佈建設定檔對應用程式進行程式碼簽署。如果您已將開發推播通知憑證上傳至 Parse，則只有使用開發佈建設定檔建立應用程式時，才會接收到推播通知。如果您已上傳生產推播通知憑證，應該要使用發佈佈建設定檔來對應用程式進行簽署。當應用程式以生產推播通知憑證進行設定時，臨機操作 (Ad Hoc) 和 App Store 發佈佈建設定檔應該會同時生效。
*   在 Apple iOS 佈建入口網站啟用現有應用程式 ID 的推播通知時，務必重新產生佈建設定檔，再將更新過的設定檔新增至 Xcode Organizer。
*   將應用程式提交至 App Store 之前，應先啟用發佈推播通知。請確定在提交應用程式之前，有按照第 7 節「App Store 準備工作」指示進行。如果您略過其中任何步驟，可能需要向 App Store 提交新的二進位檔案。
*   請仔細檢查您的應用程式在以臨機操作設定檔簽署時，能接收發佈推播通知。這是您能得到最接近 App Store 已提供的應用程式的設定。
*   在您的 Parse Push Console 中檢查接收者的數目。是否符合預期的接收者數目？您的推播目標設定可能不正確。

