# 用户

许多应用的核心理念是，用户帐户保护应能让用户安全访问他们的信息。我们提供一个类名为 `%{ParseUser}` 的专门用户类，可自动处理用户帐户管理需要的很多功能。

您可以使用这个用户类在您的应用程序中添加用户帐户功能。

`%{ParseUser}` 是 `%{ParseObject}` 的一个子类，拥有完全相同的特性，如灵活架构、自动留存和键值接口。`%{ParseObject}` 上的所有方法也存在于 `%{ParseUser}` 中。所不同的是 PFUser 具有针对用户帐户的一些特殊的附加功能。

## 属性

`%{ParseUser}` 有几种可以将其与 `%{ParseObject}` 区分开的属性：

*   用户名：用户的用户名（必填）。
*   密码：用户的密码（注册时必填）。
*   电子邮箱：用户的电子邮箱地址（选填）。

我们在浏览用户的各种用例时，会逐条仔细查看这些信息。请切记，如果您通过这些属性设置 `username` 和 `email`，则无需使用 `setObject:forKey:` 方法进行设置 － 这是自动设置的。

## 注册

您的应用程序要做的第一件事就是让用户注册。以下代码阐释了典型注册：

```objc
 - (void)myMethod {
    PFUser *user = [PFUser user];
    user.username = @"my name";
    user.password = @"my pass";
    user.email = @"email@example.com";

    // other fields can be set just like with PFObject
    user[@"phone"] = @"415-392-0202";

    [user signUpInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {
        if (!error) {
            // Hooray! Let them use the app now.
        } else {
            NSString *errorString = [error userInfo][@"error"];
            // Show the errorString somewhere and let the user try again.
        }
    }];
}
```

这个调用将在您的 Parse 应用中异步创建一个新的用户。创建前，它还会检查确保用户名和邮箱唯一。此外，它还将密码安全散列在云中。我们从来不以纯文本格式储存密码，也不会以纯文本格式将密码传输回客户端。

注意，我们使用的是 `signUp` 方法，而不是 `save` 方法。应始终使用 `signUp` 方法创建新的 `%{ParseUser}`。调用 `save` 可以完成用户的后续更新。

`signUp` 方法具有带回传错误功能的各种版本和同步版本。同样，我们强烈建议在可能的情况下使用异步版本，从而防止屏蔽您应用程序中的 UI。要想了解关于这些具体方法的更多信息，请参见我们的 [API 文档](/docs/ios/)。

若未成功注册，您应该查看返回的错误对象。最可能的情况就是该用户名或邮箱已被其他用户使用。你应该将这种情况清楚地告诉用户，并要求他们尝试不同的用户名。

您可以使用电子邮箱地址作为用户名。只需让您的用户输入他们的电子邮箱，但是需要将它填写在用户名属性中 － `%{ParseUser}` 将可以正常运作。我们将在重置密码部分说明是如何处理这种情况的。

## 登录

当然，您让用户注册后，需要让他们以后登录到他们的帐户。要如此，您可以使用类方法 `logInWithUsernameInBackground:password:`。

```objc
[PFUser logInWithUsernameInBackground:@"myname" password:@"mypass"
    block:^(PFUser *user, NSError *error) {
        if (user) {
            // Do stuff after successful login.
        } else {
            // The login failed. Check error to see why.
        }
}];
```

## 验证电子邮箱

在应用程序的设置中启用电子邮箱验证，可以让应用程序将某些使用体验提供给验证过电子邮箱地址的用户。电子邮箱验证会将 `emailVerified` 键添加到 `%{ParseUser}` 目标中。设置或修改 `%{ParseUser}` 的 `email` 后，`emailVerified` 被设置为 `false`。随后，Parse 会向用户发送一个邮件，其中包含一个链接，可将 `emailVerified` 设置为 `true`。

有三种 `emailVerified` 状态需要考虑：

1.  `true` － 用户通过点击 Parse 发送给他们的链接确认电子邮箱地址。最初创建用户帐户时，`PFUsers` 没有 `true` 值。
2.  `false` － `%{ParseUser}` 对象最后一次刷新时，用户未确认其电子邮箱地址。若 `emailVerified` 为 `false`，可以考虑调用 `%{ParseUser}` 中的 `refresh:`。
3.  _缺失_ － 电子邮箱验证关闭或 `%{ParseUser}` 没有 `email` 时创建了 `%{ParseUser}`。

## 当前用户

若用户每次打开您的应用时都要登录，会很麻烦。您可以用缓存的 `currentUser` 对象来避免这一繁琐操作。

每次您使用任何注册或登录方法时，用户都被缓存到磁盘中。您可以把这个缓存作为一个对话，并自动假设用户已登录：

```objc
PFUser *currentUser = [PFUser currentUser];
if (currentUser) {
    // do stuff with the user
} else {
    // show the signup or login screen
}
```

您可以通过注销用户来清除他们的当前登录状态：

```objc
[PFUser logOut];
PFUser *currentUser = [PFUser currentUser]; // this will now be nil
```

## 匿名用户

能够将数据和对象与具体用户关联非常有价值，但是有时您想在不强迫用户输入用户名和密码的情况下也能达到这种效果。

匿名用户是指能在无用户名和密码的情况下创建的但仍与任何其他 `%{ParseUser}` 具有相同功能的用户。登出后，匿名用户将被抛弃，其数据也不能再访问。

您可以使用 `PFAnonymousUtils` 创建匿名用户：

```objc
[PFAnonymousUtils logInWithBlock:^(PFUser *user, NSError *error) {
    if (error) {
        NSLog(@"Anonymous login failed.");
    } else {
        NSLog(@"Anonymous user logged in.");
    }
}];
```

您可以通过设置用户名和密码，然后调用 `signUp` 的方式，或者通过登录或关联 [Facebook](#fbusers) 或 [Twitter](#twitterusers) 等服务的方式，将匿名用户转换为常规用户。转换的用户将保留其所有数据。想要确定当前用户是否为匿名用户，可以试试 `PFAnonymousUtils isLinkedWithUser`：

```objc
if ([PFAnonymousUtils isLinkedWithUser:[PFUser currentUser]]) {
    [self enableSignUpButton];
} else {
    [self enableLogOutButton];
}
```

在无网络请求的情况下，也可以自动为您创建匿名用户，以便您能在应用程序开启之后立即与您的用户互动。如果您启用在应用程序开启时自动创建匿名用户的功能，则 `[PFUser currentUser]` 将不会为 `nil`。首次保存用户或与该用户相关的任何对象时，将在云中自动创建用户。截止此时，该用户的对象 ID 将为 `nil`。启用自动创建用户功能将使得把数据与您的用户关联变得简单。例如，在您的 `application:didFinishLaunchingWithOptions:` 函数中，您可以写入：

```objc
[PFUser enableAutomaticUser];
[[PFUser currentUser] incrementKey:@"RunCount"];
[[PFUser currentUser] saveInBackground];
```

## 设置当前用户

如果您已经创建了自己的身份验证例程，或以其他方式使用户在服务器端登录，您现在可以将会话令牌传递到客户端并使用 `become` 方法。这种方法将确保会话令牌在设置当前用户之前有效。

```objc
[PFUser becomeInBackground:@"session-token-here" block:^(PFUser *user, NSError *error) {
    if (error) {
        // The token could not be validated.
    } else {
        // The current user is now set to user.
    }
}];
```

## 用户对象的安全性

`%{ParseUser}` 类默认是受保护的。储存在 `%{ParseUser}` 中的数据只能由用户修改。默认情况下，数据仍然可以被任何客户端读取。因此，一些 `%{ParseUser}` 对象通过身份验证后可以修改，但是还有一些是只读形式。

特别地，您不能调用任何 `save` 或 `delete` 方法，除非使用已验证的方法获取了 `%{ParseUser}`，如 `logIn` 或 `signUp`。这确保只有用户可以修改他们自己的数据。

以下阐释了这一安全策略：

```objc
PFUser *user = [PFUser logInWithUsername:@"my_username" password:@"my_password"];
user.username = "my_new_username"; // attempt to change username
[user save]; // This succeeds, since the user was authenticated on the device

// Get the user from a non-authenticated method
PFQuery *query = [PFUser query];
PFUser *userAgain = (PFUser *)[query getObjectWithId:user.objectId];

userAgain.username = "another_username";

// This will throw an exception, since the PFUser is not authenticated
[userAgain save];
```

从 `currentUser` 获得的 `%{ParseUser}` 始终需要验证。

若您要检查 `%{ParseUser}` 是否已验证，可以调用 `isAuthenticated` 方法。您不需要检查通过已验证方法获取的 `%{ParseUser}` 对象的 `isAuthenticated`。

## 其他对象的安全性

适用于 `%{ParseUser}` 的安全模型同样适用于其他对象。对于任何对象，您都可以指定哪些用户可以查看该对象，哪些用户可以修改该对象。为支持这类安全性，每个对象都有一个[访问控制列表](http://en.wikipedia.org/wiki/Access_control_list)，由 `PFACL` 类实施。

使用 `PFACL` 的最简单的方法就是规定某个对象只能由某一用户只读或只写。要创建这样一个对象，首先必须有一个已登录的 `%{ParseUser}`。然后，`ACLWithUser` 方法生成一个限制用户访问权限的 `PFACL`。像其他属性一样，保存对象时，对象的 ACL 会更新。因此，就会创建一个只能由当前用户访问的专用注释。

```objc
PFObject *privateNote = [PFObject objectWithClassName:@"Note"];
privateNote[@"content"] = @"This note is private!";
privateNote.ACL = [PFACL ACLWithUser:[PFUser currentUser]];
[privateNote saveInBackground];
```

随后，该注释仅供当前用户访问，不过用户可以从其注册的所有设备进行访问。对于您希望对用户数据（如个人待办事项列表）启用多设备访问权限的应用程序，这项功能非常有用。

还可以按每个用户进行授权。您可以用 `setReadAccess:forUser:` 和 `setWriteAccess:forUser:` 单独向 `PFACL` 添加权限。例如，假设您要向一组用户发送消息，每个用户都有权限阅读和删除消息：

```objc
PFObject *groupMessage = [PFObject objectWithClassName:@"Message"];
PFACL *groupACL = [PFACL ACL];
// userList is an NSArray with the users we are sending this message to.
for (PFUser *user in userList) {
    [groupACL setReadAccess:YES forUser:user];
    [groupACL setWriteAccess:YES forUser:user];
}
groupMessage.ACL = groupACL;
[groupMessage saveInBackground];
```

您还可以用 `setPublicReadAccess:` 和 `setPublicWriteAccess:` 一次性向所有用户授权。该操作可实现让众多用户在消息公告板上发表评论的模式。例如，要创建仅作者可以编辑所有人可以阅读的帖子：

```objc
PFObject *publicPost = [PFObject objectWithClassName:@"Post"];
PFACL *postACL = [PFACL ACLWithUser:[PFUser currentUser]];
[postACL setPublicReadAccess:YES];
publicPost.ACL = postACL;
[publicPost saveInBackground];
```

为了有助于确保默认情况下用户数据是受保护的，可以设置一个默认的 ACL 用于所有新建的 `PFObjects`：

```objc
[PFACL setDefaultACL:defaultACL withAccessForCurrentUser:YES];
```

在上述代码中，setDefaultACL 的第二个参数告诉 Parse 须确保创建对象时分配的默认 ACL 允许当时的用户进行读取和写入。无此设置时，每次用户登录或退出时，您都需要重置 defaultACL，以便当前用户被适当赋予访问权限。有此设置时，您在无需明确授予不同权限的情况下，可以忽略对当前用户的更改。

默认的 ACL 让您能轻松创建遵循通用访问模式的应用程序。例如，像 Twitter 这样的应用程序，通常其用户内容是向全世界公开的，因此可能要像下面一样设置默认的 ACL：

```objc
PFACL *defaultACL = [PFACL ACL];
[defaultACL setPublicReadAccess:YES];
[PFACL setDefaultACL:defaultACL withAccessForCurrentUser:YES];
```

而像 Dropbox 这样的应用程序，除非明确授权，否则只有用户本人才能查看自己数据，所以您需要提供一种默认 ACL，使得只有当前用户才能获得授权：

```objc
[PFACL setDefaultACL:[PFACL ACL] withAccessForCurrentUser:YES];
```

对于将数据载入 Parse 但是并未向任何用户授权访问这些数据的应用程序而言，在提供限制性 ACL 的情况下，会拒绝访问当前用户：

```objc
[PFACL setDefaultACL:[PFACL ACL] withAccessForCurrentUser:NO];
```

进行禁止操作，如删除您没有写权限的对象，会导致 `kPFErrorObjectNotFound` 错误代码。处于安全考虑，这样能阻止客户端区分存在但是受保护的对象 id 和完全不存在的对象 id。

## 重置密码

您刚刚将密码录入系统时就忘记密码的情况是存在的。这种情况下，我们的库提供一种方法让用户安全地重置密码。

若要开始密码重置流程，让用户填写电子邮箱地址，并调用：

```objc
[PFUser requestPasswordResetForEmailInBackground:@"email@example.com"];
```

该操作将尝试将给定的电子邮箱与用户电子邮箱或用户名字段进行匹配，并向用户发送密码重置邮件。这样，您可以选择让用户使用其电子邮箱作为用户名，或者您可以单独收集它并把它储存在电子邮箱字段。

密码重置流程如下：

1.  用户输入电子邮箱地址，请求重置密码。
2.  Parse 向其电子邮箱发送一封包含专用密码重置链接的邮件。
3.  用户点击重置链接，进入专用 Parse 页面，用户在该页面输入新密码。
4.  用户输入新密码。现在，用户的密码已经被重置为他们指定的值。

注意，该流程中的消息传送操作将根据您在 Parse 上创建该应用时指定的名称引用您的应用程序。

## 查询

若要查询用户，您需要使用特殊的用户查询：

```objc
PFQuery *query = [PFUser query];
[query whereKey:@"gender" equalTo:@"female"]; // find all the women
NSArray *girls = [query findObjects];
```

此外，您可以使用 `getUserObjectWithId:objectId` 通过 id 找到 `%{ParseUser}`。

## 关联

关联是让 `%{ParseUser}` 立即可用。例如，假设您正在创建一款博客应用程序。若要为用户保存新的帖子并检索其所有帖子：

```objc
PFUser *user = [PFUser currentUser];
// Make a new post
PFObject *post = [PFObject objectWithClassName:@"Post"];
post[@"title"] = @"My New Post";
post[@"body"] = @"This is some great content.";
post[@"user"] = user;
[post save];

// Find all posts by the current user
PFQuery *query = [PFQuery queryWithClassName:@"Post"];
[query whereKey:@"user" equalTo:user];
NSArray *usersPosts = [query findObjects];
```

## Facebook 用户

Parse 提供了一种简单的方法，用于将 Facebook 与您的应用程序整合起来。Facebook SDK 可以与我们的 SDK 一起使用，并且与 `%{ParseUser}` 类整合，从而使您能轻松将用户与他们的 Facebook 身份关联。

<div class='tip info'><div>
了解如何通过 Facebook API 使用 Parse 来创建查看个人主页的应用程序。[将 Facebook 整合入 iOS 教程](/tutorials/integrating-facebook-in-ios)将教您如何通过 Facebook 创建和登录 `PFUsers` 以及向 Facebook 图表 API 发出查询请求。
</div></div>

利用我们的 Facebook 整合功能，您可以将通过验证的 Facebook 用户与 `%{ParseUser}` 相关联。只需几行代码，您就可以在应用程序中提供&ldquo;log in with Facebook&rdquo;（使用 Facebook 登录）选项，并能够将用户数据保存在 Parse 中。

### 设置

若要开始通过 Parse 使用 Facebook，您需要：

1.  [设置 Facebook 应用程序](https://developers.facebook.com/apps)（若您尚未设置）。
2.  在您的 Parse 应用程序设置页面添加应用程序的 Facebook 应用程序 ID。
3.  按照 Facebook 的 [Facebook SDK 入门](https://developers.facebook.com/docs/getting-started/facebook-sdk-for-ios/)提供的说明，创建与 Facebook SDK 关联的应用程序。仔细检查并确认您已添加 Facebook 应用程序 ID 和地址方案值至您应用程序的 .plist 文件。

例如，初始化 Parse SDK 时，在 `application:didFinishLaunchingWithOptions:` 中添加以下内容
```objc 
[PFFacebookUtils initializeFacebook];
```

在您的应用程序委托中添加以下处理代码：
```objc
- (BOOL)application:(UIApplication *)application     openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication  annotation:(id)annotation {
     return [FBAppCall handleOpenURL:url   sourceApplication:sourceApplication withSession:[PFFacebookUtils session]];
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    [FBAppCall handleDidBecomeActiveWithSession:[PFFacebookUtils session]];
}
```

Parse 用户可通过以下两种主要方法使用 Facebook：(1) 以 Facebook 用户身份登录（注册），并创建 `%{ParseUser}`，或者 (2) 将 Facebook 与已有的 `%{ParseUser}` 关联。

### 登录与注册

`%{ParseUser}` 提供一种方法让您的用户可以通过 Facebook 登录或注册。这可以通过采用 `logInWithPermissions` 方法来完成，例如：

```objc
[PFFacebookUtils logInWithPermissions:permissions block:^(PFUser *user, NSError *error) {
    if (!user) {
        NSLog(@"Uh oh. The user cancelled the Facebook login.");
    } else if (user.isNew) {
        NSLog(@"User signed up and logged in through Facebook!");
    } else {
        NSLog(@"User logged in through Facebook!");
    }
}];
```

Parse 与 Facebook iOS SDK 3.2 版兼容。

该代码运行时，会出现以下情况：

1.  用户会看到 Facebook 登录对话框。
2.  用户通过 Facebook 验证，您的应用程序会使用 `handleOpenURL` 收到回调。
3.  我们的 SDK 会收到 Facebook 数据并将其保存在 `%{ParseUser}` 中。如果是基于 Facebook ID 的新用户，那么该用户随后会被创建。
4.  您的代码块被用户调用。

权限参数是指定您的应用程序向 Facebook 用户要求什么读取权限的一系列字符串。这些权限必须只能包括读取权限。`%{ParseUser}` 整合不要求权限即时可用。[在 Facebook 开发人员指南上阅读关于权限的更多信息。](https://developers.facebook.com/docs/reference/api/permissions/)

要想获得用户发布权限，以便您的应用程序能执行类似代表用户发布状态更新帖的操作，您必须调用 `[PFFacebookUtils reauthorizeUser:withPublishPermissions:audience:block]`：

```objc
[PFFacebookUtils reauthorizeUser:[PFUser currentUser]
                 withPublishPermissions:@["publish_actions"]
                 audience:FBSessionDefaultAudienceFriends
                 block:^(BOOL succeeded, NSError *error) {
                    if (succeeded) {
                        // Your app now has publishing permissions for the user
                    }
                 }];
```

<div class='tip info'><div>
您可以自行决定在用户验证后记录从 Facebook 用户处获取的所需的任何数据。要完成这一操作，您需要[通过 Facebook SDK 进行一项图表查询](https://parse.com/questions/how-can-i-find-parse-users-that-are-facebook-friends-with-the-current-user)。
</div></div>

### 关联

若您想要将已有的 `%{ParseUser}` 与 Facebook 帐户关联起来，您可以按以下方式进行关联：

```objc
if (![PFFacebookUtils isLinkedWithUser:user]) {
    [PFFacebookUtils linkUser:user permissions:nil block:^(BOOL succeeded, NSError *error) {
        if (succeeded) {
            NSLog(@"Woohoo, user logged in with Facebook!");
        }
    }];
}
```

关联时发生的步骤与登录非常类似。区别是在成功登录中，将会使用来自 Facebook 的信息更新当前的 `%{ParseUser}` 用户信息。今后通过 Facebook 进行的登录会将用户登录到其已有的帐户中。

若您想要取消用户与 Facebook 的关联，操作如下：

```objc
[PFFacebookUtils unlinkUserInBackground:user block:^(BOOL succeeded, NSError *error) {
    if (succeeded) {
        NSLog(@"The user is no longer associated with their Facebook account.");
    }
}];
```

### Facebook SDK 与 Parse

Facebook iOS SDK 提供了很多帮助工具类，用于与 Facebook API 互动。通常，您会使用 `FBRequest` 类代表您的登录用户与 Facebook 互动。[若要了解有关 Facebook SDK 的更多内容，请点击这里](https://developers.facebook.com/docs/reference/ios/3.2)。

我们的库为您管理 `FBSession` 对象。您只需调用 `[PFFacebookUtils session]` 来访问会话实例，其随后能传送至 `FBRequest`。

## Twitter 用户

与 Facebook 一样，Parse 也提供了一种将 Twitter 身份验证与您的应用程序整合起来的简单方法。Parse SDK 提供了一种验证 Twitter 帐户并将之与您的 `%{ParseUser}` 关联的简单方法。只需几行代码，您就可以在您的应用程序中提供&ldquo;log in with Twitter&rdquo;（使用 Twitter 登录）选项，并能够将其数据保存在 Parse 中。

### 设置

若要开始通过 Parse 使用 Twitter，您需要：

1.  [设置 Twitter 应用程序](https://dev.twitter.com/apps)（若您尚未设置）。
2.  在您的 Parse 应用程序设置页面添加您应用程序的 Twitter 用户密钥。
3.  当要求您为 Twitter 应用程序指定&ldquo;Callback URL&rdquo;（回调地址），请插入有效地址。此值不会被您的 iOS 或 Android 应用程序使用，但是在通过 Twitter 启用身份验证时非常必要。
4.  将 `Accounts.framework` 和 `Social.framework` 库添加至您的 Xcode 项目。
5.  例如，初始化 Parse SDK 时，在 `application:didFinishLaunchingWithOptions:` 中添加以下内容。
```objc
    [PFTwitterUtils initializeWithConsumerKey:@"YOUR CONSUMER KEY"
                    consumerSecret:@"YOUR CONSUMER SECRET"];
```

若您遇到与 Twitter 相关的任何问题，请参阅[ Twitter 官方文档](https://dev.twitter.com/docs)。

Parse 用户可通过以下两种主要方法使用 Twitter：(1) 以 Twitter 用户身份登录，并创建 `%{ParseUser}`，或者 (2) 将 Twitter 与已有的 `%{ParseUser}` 连接。

### 登录与注册

`PFTwitterUtils` 提供一种方法让您的 `%{ParseUser}` 可以通过 Twitter 登录或注册。这可以使用 `logInWithBlock` 或 `logInWithTarget` 方法实现：

```objc
[PFTwitterUtils logInWithBlock:^(PFUser *user, NSError *error) {
    if (!user) {
        NSLog(@"Uh oh. The user cancelled the Twitter login.");
        return;
    } else if (user.isNew) {
        NSLog(@"User signed up and logged in with Twitter!");
    } else {
        NSLog(@"User logged in with Twitter!");
    }
}];
```

该代码运行时，会出现以下情况：

1.  用户会看到 Twitter 登录对话框。
2.  用户通过 Twitter 验证，您的应用程序会收到回调。
3.  我们的 SDK 会收到 Twitter 数据并将其保存在 `%{ParseUser}` 中。如果是基于 Twitter 句柄的新用户，那么该用户随后会被创建。
4.  您的 `block` 被该用户调用。

### 关联

若您想要将已有的 `%{ParseUser}` 与 Twitter 帐户关联起来，您可以按以下方式进行关联：

```objc
if (![PFTwitterUtils isLinkedWithUser:user]) {
    [PFTwitterUtils linkUser:user block:^(BOOL succeeded, NSError *error) {
        if ([PFTwitterUtils isLinkedWithUser:user]) {
            NSLog(@"Woohoo, user logged in with Twitter!");
        }
    }];
}
```

关联时发生的步骤与登录非常类似。区别是在成功登录中，将会使用来自 Twitter 的信息更新当前的 `%{ParseUser}` 用户信息。今后通过 Twitter 进行的登录会将用户登录到其已有的帐户中。

若您想要取消用户与 Twitter 的关联，操作如下：

```objc
[PFTwitterUtils unlinkUserInBackground:user block:^(BOOL succeeded, NSError *error) {
    if (!error && succeeded) {
        NSLog(@"The user is no longer associated with their Twitter account.");
    }
}];
```

### Twitter API 调用

在您的应用程序有与 Twitter 关联的 `%{ParseUser}` 的情况下，我们的 SDK 提供一种将您的 API HTTP 请求注册到 [Twitter REST API](https://dev.twitter.com/docs/api) 的简单方法。若想通过我们的 API 发出请求，您可以使用 `PFTwitterUtils` 提供的 `PF_Twitter` 单元集：

```objc
NSURL *verify = [NSURL URLWithString:@"https://api.twitter.com/1/account/verify_credentials.json"];
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:verify];
[[PFTwitterUtils twitter] signRequest:request];
NSURLResponse *response = nil;
NSData *data = [NSURLConnection sendSynchronousRequest:request
                                returningResponse:&response
                                error:&error];
```
