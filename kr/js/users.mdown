# 사용자

많은 앱의 핵심에는 사용자가 안전하게 정보에 액세스할 있도록 하는 사용자 계정의 개념이 있습니다. Parse에서는 사용자 계정 관리에 필요한 많은 기능을 자동으로 처리하는 `Parse.User`라는 전문화된 사용자 클래스를 제공합니다.

이 클래스로 앱에 사용자 계정 기능을 추가할 수 있습니다.

`Parse.User`는 `Parse.Object`의 하위 클래스로서, 유연한 스키마, 자동 지속 및 키 값 인터페이스 등의 동일한 기능이 모두 포함되어 있습니다. 또한 `Parse.Object`에 있는 모든 메서드가 `Parse.User`에도 있습니다. Parse.User에는 사용자 계정과 관련된 몇 가지 특별한 추가 기능이 있다는 점만 다릅니다.

## 속성

`Parse.User`에는 다음과 같이 `Parse.Object`와 구분되는 몇 가지 값이 있습니다.

*   username: 사용자의 사용자 이름입니다(필수).
*   password: 사용자의 비밀번호입니다(가입 시 필수).
*   email: 사용자의 이메일 주소입니다(선택 사항).

사용자의 다양한 사용 사례를 설명할 때 각 값에 대해 자세히 안내하도록 하겠습니다.

## 가입

앱에서 가장 먼저 하는 일은 사용자에게 가입을 요청하는 것입니다. 다음 코드는 일반적인 가입을 보여줍니다.

```js
var user = new Parse.User();
user.set("username", "my name");
user.set("password", "my pass");
user.set("email", "email@example.com");

// other fields can be set just like with Parse.Object
user.set("phone", "415-392-0202");
user.signUp(null, {
  success: function(user) {
    // Hooray! Let them use the app now.
  },
  error: function(user, error) {
    // Show the error message somewhere and let the user try again.
    alert("Error: " + error.code + " " + error.message);
  }
});
```

이 호출은 Parse 앱에서 비동기식으로 새 사용자를 만듭니다. 사용자를 만들기 전에 사용자 이름과 이메일이 고유한지도 확인합니다. 또한 비밀번호를 클라우드에 안전하게 암호화하여 저장(hash)합니다. 비밀번호는 일반 텍스트로 저장되지 않으며 일반 텍스트로 클라이언트에게 다시 전송되지도 않습니다.

`save` 메서드가 아니라 `signUp` 메서드를 사용합니다. 새로운 `Parse.User`는 항상 `signUp` 메서드를 사용하여 생성되어야 합니다. 사용자에 대한 이후 업데이트는 `save`를 호출하여 수행할 수 있습니다.

가입을 완료하지 못한 경우 반환된 오류 개체를 읽어야 합니다. 대개의 경우 이미 다른 사용자가 사용자 이름이나 이메일을 사용하기 때문일 가능성이 높습니다. 이에 대해 사용자에게 명확하게 설명하고 다른 사용자 이름을 사용하도록 요청해야 합니다.

이메일 주소를 사용자 이름으로 사용해도 됩니다. 사용자에게 이메일을 입력하도록 요청하되 username 속성에 작성하도록 요청하세요. 그러면 `Parse.User`가 정상적으로 작동합니다. 비밀번호 재설정 섹션에서 이를 처리하는 방법에 대해 검토하겠습니다.

## 로그인

물론 사용자에게 가입을 허용한 후에는 계정에 로그인할 수 있도록 해야 합니다. 이렇게 하려면 `logIn` 클래스 메서드를 사용할 수 있습니다.

```js
Parse.User.logIn("myname", "mypass", {
  success: function(user) {
    // Do stuff after successful login.
  },
  error: function(user, error) {
    // The login failed. Check error to see why.
  }
});
```

## 이메일 인증

앱의 설정에서 이메일 인증을 활성화하면 앱에서 이메일 주소가 확인된 사용자에 대해 앱 환경 중 일부를 예약할 수 있습니다. 이메일 인증에서는 `Parse.User` 개체에 `emailVerified` 키를 추가합니다. `Parse.User`의 `email`을 설정하거나 수정하면 `emailVerified`가 `false`로 설정됩니다. 그러면 Parse에서는 `emailVerified`를 `true`로 설정하는 링크를 사용자에게 이메일로 보냅니다.

고려할 `emailVerified` 상태는 세 가지입니다.

1.  `true` - 사용자가 Parse에서 이메일로 받은 링크를 클릭하여 이메일 주소를 확인했습니다. 사용자 계정을 처음 만들 때 `Parse.Users`는 값이 `true`일 수 없습니다.
2.  `false` - `Parse.User` 개체를 마지막으로 새로고침할 때 사용자가 자신의 이메일 주소를 확인하지 않았습니다. `emailVerified`가 `false`인 경우 `Parse.User`에 대해 `fetch`를 호출해보세요.
3.  _missing_ - 이메일 인증이 꺼져 있을 때 `Parse.User`를 만들었거나 `Parse.User`에게 `email`이 없습니다.

## 현재 사용자

사용자가 앱을 열 때마다 로그인해야 한다면 귀찮을 겁니다. 캐시된 현재 `Parse.User` 개체를 사용하면 이 불편함을 없앨 수 있습니다.

가입 또는 로그인 메서드를 사용할 때마다 사용자가 localStorage에 캐시됩니다. 이 캐시를 세션으로 처리할 수 있으며, 사용자가 로그인한 것으로 자동으로 간주됩니다.

```js
var currentUser = Parse.User.current();
if (currentUser) {
  // do stuff with the user
} else {
  // show the signup or login page
}
```

현재 사용자를 로그아웃하여 지울 수 있습니다.

```js
Parse.User.logOut();
var currentUser = Parse.User.current(); // this will now be null
```

## 현재 사용자 설정

인증 경로를 자체적으로 만들었거나 서버 측에서 사용자를 로그인시킨 경우 이제 클라이언트에 세션 토큰을 전달하고 `become` 메서드를 사용할 수 있습니다. 이 메서드는 현재 사용자를 설정하기 전에 세션 토큰이 유효한지 확인합니다.

```js
Parse.User.become("session-token-here").then(function (user) 
  // The current user is now set to user.
}, function (error) {
  // The token could not be validated.
});
```

## 사용자 개체에 대한 보안

`Parse.User` 클래스는 기본적으로 보호됩니다. `Parse.User`에 저장된 데이터는 해당 사용자만 수정할 수 있습니다. 기본적으로 모든 클라이언트가 데이터를 읽을 수는 있습니다. 따라서 일부 `Parse.User` 개체는 인증되고 수정할 수 있지만, 다른 개체는 읽기 전용입니다.

특히, `logIn` 또는 `signUp`과 같은 인증된 메서드를 사용하여 `Parse.User`를 가져오지 않는 경우 `save` 또는 `delete` 메서드를 호출할 수 없습니다. 따라서 사용자는 자신의 데이터만 수정할 수 있습니다.

다음 코드는 이러한 보안 정책을 보여줍니다.

```js
var user = Parse.User.logIn("my_username", "my_password", {
  success: function(user) {
    user.set("username", "my_new_username");  // attempt to change username
    user.save(null, {
      success: function(user) {
        // This succeeds, since the user was authenticated on the device
        // Get the user from a non-authenticated method
        var query = new Parse.Query(Parse.User);
        query.get(user.objectId, {
          success: function(userAgain) {
            userAgain.set("username", "another_username");
            userAgain.save(null, {
              error: function(userAgain, error) {
                // This will error, since the Parse.User is not authenticated
              }
            });
          }
        });
      }
    });
  }
});
```

`Parse.User.current()`에서 가져온 `Parse.User`는 항상 인증됩니다.

`Parse.User`가 인증되었는지 확인해야 하는 경우 `authenticated` 메서드를 호출할 수 있습니다. 인증된 메서드를 통해 가져온 `Parse.User` 개체에서는 `authenticated`를 확인할 필요가 없습니다.

## 다른 개체에 대한 보안

`Parse.User`에 적용되는 보안 모델을 다른 개체에도 동일하게 적용할 수 있습니다. 어느 개체든 개체를 읽을 수 있는 사용자와 개체를 수정할 수 있는 사용자를 지정할 수 있습니다. 이러한 유형의 보안을 지원하기 위해 각 개체에는 `Parse.ACL` 클래스로 구현되는 [액세스 제어 목록](http://en.wikipedia.org/wiki/Access_control_list)이 있습니다.

`Parse.ACL`을 가장 간단히 사용하는 방법은 싱글 사용자만 개체를 읽거나 쓸 수 있도록 지정합니다. 이러한 개체를 만들려면 로그인한 `Parse.User`가 있어야 합니다. 그러면 `new Parse.ACL(user)`에서 해당 사용자에 대한 액세스를 제한하는 `Parse.ACL`을 생성합니다. 개체의 ACL은 다른 속성처럼 개체를 저장할 때 업데이트됩니다. 따라서 현재 사용자만 액세스할 수 있는 비공개 노트를 만들려면 다음과 같이 하세요.

```js
var Note = Parse.Object.extend("Note");
var privateNote = new Note();
privateNote.set("content", "This note is private!");
privateNote.setACL(new Parse.ACL(Parse.User.current()));
privateNote.save();
```

그러면 이 노트는 현재 사용자만 자신이 로그인한 모든 기기에서 액세스할 수 있습니다. 이 기능은 개인 todo 목록과 같이 여러 기기의 사용자 데이터에 대한 액세스를 활성화하려는 앱에 유용합니다.

권한을 사용자 단위로 부여할 수도 있습니다. `setReadAccess` 및 `setWriteAccess`를 사용하여 `Parse.ACL`에 권한을 개별적으로 추가할 수 있습니다. 예를 들어 그룹의 몇몇 사용자에게 보낼 메시지가 있고, 각 사용자는 해당 메시지를 읽고 삭제할 권한이 있다고 가정해 보겠습니다.

```js
var Message = Parse.Object.extend("Message");
var groupMessage = new Message();
var groupACL = new Parse.ACL();

// userList is an array with the users we are sending this message to.
for (var i = 0; i < userList.length; i++) {
  groupACL.setReadAccess(userList[i], true);
  groupACL.setWriteAccess(userList[i], true);
}

groupMessage.setACL(groupACL);
groupMessage.save();
```

또한 `setPublicReadAccess` 및 `setPublicWriteAccess`를 사용하여 모든 사용자에게 권한을 한 번에 부여할 수도 있습니다. 이 경우 메시지 게시판에 댓글 게시와 같은 패턴이 허용됩니다. 예를 들어 수정은 작성자만 할 수 있지만 누구나 읽을 수 있는 게시물을 만들려면 다음과 같이 하세요.

```js
var publicPost = new Post();
var postACL = new Parse.ACL(Parse.User.current());
postACL.setPublicReadAccess(true);
publicPost.setACL(postACL);
publicPost.save();
```

쓰기 권한이 없는 개체를 삭제하는 등과 같이 금지된 작업을 수행하면 `Parse.Error.OBJECT_NOT_FOUND` 오류 코드가 발생합니다. 보안을 위해 이 기능은 클라이언트에서 어떤 개체 ID는 있지만 보호되어 있고 어떤 개체 ID는 전혀 없는지를 구분하지 못하게 합니다.

## 비밀번호 재설정

실제로 시스템에 비밀번호를 도입하자마자 사용자가 비밀번호를 잊어버리기도 합니다. 이런 경우 라이브러리에서는 사용자가 비밀번호를 안전하게 재설정할 수 있는 방법을 제공합니다.

비밀번호 재설정 절차를 시작하려면 사용자에게 이메일 주소를 묻고 다음을 호출하세요.

```js
Parse.User.requestPasswordReset("email@example.com", {
  success: function() {
    // Password reset request was sent successfully
  },
  error: function(error) {
    // Show the error message somewhere
    alert("Error: " + error.code + " " + error.message);
  }
});
```

그러면 지정된 이메일을 사용자의 이메일 또는 username 필드와 일치시키려고 하고 사용자에게 비밀번호 재설정 이메일을 보냅니다. 이렇게 하면 사용자로 하여금 이메일을 사용자 이름으로 사용하도록 하거나 이메일을 별도로 수집하여 email 필드에 저장할 수 있습니다.

비밀번호 재설정 절차는 다음과 같습니다.

1.  사용자가 이메일을 입력하여 비밀번호를 재설정하도록 요청합니다.
2.  Parse에서 특별 비밀번호 재설정 링크가 포함된 이메일을 사용자 주소로 보냅니다.
3.  사용자가 재설정 링크를 클릭하면 새 비밀번호를 입력할 수 있는 특별한 Parse 페이지로 연결됩니다.
4.  사용자가 새 비밀번호를 입력합니다. 이제 사용자 비밀번호가 지정한 값으로 재설정되었습니다.

이 절차의 메시지에서는 이 앱을 Parse에서 만들 때 지정한 이름으로 앱을 참조합니다.

## 쿼리

사용자를 쿼리하려면 간단하게 `Parse.User`에 대해 새 `Parse.Query`를 만듭니다.

```js
var query = new Parse.Query(Parse.User);
query.equalTo(gender, "female");
// find all the women
query.find({
  success: function(women) {
    // Do stuff
  }
});
```

## 연결

`Parse.User`와 관련된 연결은 즉시 작동합니다. 예를 들어 블로깅 앱을 만든다고 가정해 보겠습니다. 사용자의 새 게시물을 저장하고 이 사용자의 게시물을 모두 검색하려면 다음과 같이 하세요.

```js
var user = Parse.User.current();
// Make a new post
var Post = Parse.Object.extend("Post");
var post = new Post();
post.set("title", "My New Post");
post.set("body", "This is some great content.");
post.set("user", user);
post.save(null, {
  success: function(post) {
    // Find all posts by the current user
    var query = new Parse.Query(Post);
    query.equalTo("user", user);
    query.find({
      success: function(usersPosts) {
        // userPosts contains all of the posts by the current user.
      }
    });
  }
});
```

## Facebook 사용자

Parse에서는 Facebook을 앱과 통합하는 간단한 방법을 제공합니다. `Parse.FacebookUtils` 클래스는 `Parse.User`와 Facebook Javascript SDK를 통합하여 사용자를 Facebook ID에 쉽게 연결할 수 있게 만듭니다.

Parse의 Facebook 통합 기능을 사용하면 인증된 Facebook 사용자를 `Parse.User`와 연결할 수 있습니다. 코드 몇 줄만 사용하여 앱에 &quot;Facebook으로 로그인&quot; 옵션을 제공할 수 있고 사용자 데이터를 Parse에 저장할 수 있습니다.

### 설정

Facebook을 Parse와 함께 사용하려면 다음을 수행해야 합니다.

1.  아직 설치하지 않은 경우 [Facebook 앱을 설치](https://developers.facebook.com/apps) 합니다.  'Select how your app integrates with Facebook' 아래에서 'Website with Facebook Login'을 선택하고 사이트의 URL을 입력합니다.
2.  Parse 앱 설정 페이지에서 앱의 Facebook 앱 ID를 추가합니다.
3.  [이 지침](https://developers.facebook.com/docs/reference/javascript/)에 따라 Facebook Javascript SDK를 앱에 로드합니다.
4.  `FB.init()`에 대한 호출을 `Parse.FacebookUtils.init()`에 대한 호출로 바꿉니다.  예를 들어 Facebook SDK를 비동기적으로 로드한 경우 `fbAsyncInit` 함수는 다음과 같습니다.
```js
window.fbAsyncInit = function() {
  Parse.FacebookUtils.init({
   appId: 'YOUR_APP_ID', // Facebook App ID
   channelUrl: '//WWW.YOUR_DOMAIN.COM/channel.html', // Channel File
   status: true, // check login status
   cookie: true, // enable cookies to allow Parse to access the session
   xfbml: true  // parse  });
  // Additional initialization code here
};
```

Facebook과 관련된 문제가 발생하는 경우 [공식 Facebook 시작하기 가이드](https://developers.facebook.com/docs/reference/javascript/)를 참조하면 유용합니다.

Parse 사용자에서 Facebook을 사용하는 방법은 기본적으로 (1) Facebook 사용자로 로그인하고 `Parse.User` 만들기 또는 (2) Facebook을 기존 `Parse.User`에 연결하는 두 가지입니다.

### 로그인 및 가입

`Parse.FacebookUtils`에서는 `Parse.User`가 Facebook을 통해 로그인 또는 가입할 수 있는 방법을 제공합니다. 이렇게 하려면 `logIn()` 메서드를 사용합니다.

```js
Parse.FacebookUtils.logIn(null, {
  success: function(user) {
    if (!user.existed()) {
      alert("User signed up and logged in through Facebook!");
    } else {
      alert("User logged in through Facebook!");
    }
  },
  error: function(user, error) {
    alert("User cancelled the Facebook login or did not fully authorize.");
  }
});
```

이 코드를 실행하면 다음이 수행됩니다.

1.  사용자에게 Facebook 로그인 대화 상자가 표시됩니다.
2.  사용자가 Facebook을 통해 인증하고 앱이 콜백을 받습니다.
3.  Parse SDK가 Facebook 데이터를 받고 `Parse.User`에 저장합니다. Facebook ID를 기반으로 하는 새 사용자인 경우 해당 사용자가 만들어집니다.
4.  `success` 콜백이 해당 사용자에서 호출됩니다.

쉼표로 구분된 문자열을 입력하여 앱을 사용하기 위해 Facebook 사용자에게 요구할 [권한](https://developers.facebook.com/docs/authentication/permissions/)을 지정할 수도 있습니다.  예:

```js
Parse.FacebookUtils.logIn("user_likes,email", {
  success: function(user) {
    // Handle successful login
  },
  error: function(user, error) {
    // Handle errors and cancellation
  }
});
```

`Parse.User` 통합은 권한 없이도 바로 작동합니다(즉, `null` 또는 권한을 지정하지 않는 것도 완전히 허용됨). [권한에 대한 자세한 내용은 Facebook의 개발자 가이드를 참조하세요.](https://developers.facebook.com/docs/reference/api/permissions/)

<div class='tip info'><div>
  Facebook 사용자가 인증된 후 필요한 사용자의 데이터를 기록하는 일은 앱 개발자의 몫입니다. 이를 위해서는 [Facebook SDK를 통해 그래프 쿼리를 수행](https://parse.com/questions/how-can-i-find-parse-users-that-are-facebook-friends-with-the-current-user)해야 합니다.
</div></div>

### 연결

기존 `Parse.User`를 Facebook 계정에 연결하려면 다음과 같이 연결할 수 있습니다.

```js
if (!Parse.FacebookUtils.isLinked(user)) {
  Parse.FacebookUtils.link(user, null, {
    success: function(user) {
      alert("Woohoo, user logged in with Facebook!");
    },
    error: function(user, error) {
      alert("User cancelled the Facebook login or did not fully authorize.");
    }
  });
}
```

연결할 때 수행되는 단계는 로그인과 매우 유사합니다. 로그인되면 기존 `Pars.eUser`가 Facebook 정보로 업데이트되는 점만 다릅니다. 나중에 Facebook을 통해 로그인하면 사용자가 자신의 기존 계정으로 로그인됩니다.

Facebook과 사용자의 연결을 취소하려면 다음과 같이 하면 됩니다.

```js
Parse.FacebookUtils.unlink(user, {
  success: function(user) {
    alert("The user is no longer associated with their Facebook account.");
  }
});
```

### Facebook SDK와 Parse

Facebook Javascript SDK는 Facebook API와의 많은 상호 작용을 시작하는 출발점이 되는 주요 `FB` 개체를 제공합니다. [SDK에 대한 자세한 내용은 여기를 참조하세요](https://developers.facebook.com/docs/reference/javascript/).

Parse SDK를 사용하여 Facebook에 로그인하려면 Facebook SDK가 이미 로드된 상태에서 `Parse.FacebookUtils.init()`을 호출해야 합니다.

라이브러리에서는 사용자의 `FB` 개체를 관리합니다. `FB` singleton이 기본적으로 현재 사용자와 동기화되므로 호출하는 모든 메서드는 현재 `Parse.User`와 연결된 Facebook 사용자에게 적용됩니다. `Parse.User` 및 `FB` 개체의 동기화가 어긋날 수 있으므로 `FB.login()` 또는 `FB.logOut()`을 명시적으로 호출하는 것은 좋지 않습니다.
