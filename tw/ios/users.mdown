# 使用者

許多應用程式有個核心觀念，就是使用者帳號要讓使用者以安全的方式存取資訊。我們提供稱為 `%{ParseUser}` 的特殊使用者類別，此類別將自動處理管理使用者帳號所需的大部分功能。

您可以透過此類別在應用程式中加入使用者帳號功能。

`%{ParseUser}` 為 `%{ParseObject}` 的子類別，並且具有所有相同功能，比如具彈性的結構描述、自動保留和索引鍵值介面。`%{ParseObject}` 的所有方法也存在於 `%{ParseUser}`。不同之處在於 PFUser 有一些專用於使用者帳號的特殊附加功能。

## 屬性

`%{ParseUser}` 有一些屬性與 `%{ParseObject}` 有所區別：

*   使用者名稱：使用者的名稱（必要）。
*   密碼：使用者的密碼（註冊時需要）。
*   電子郵件：使用者的電子郵件地址（選擇性）。

我們在之後探討使用者的各種不同使用情況時，將詳細討論上述各項。請注意，如果您透過這些屬性設定 `username` 和 `email`，就不必用 `setObject:forKey:` 方法再做設定，系統會自動替您設定。

## 註冊

您的應用程式做的第一件事可能是要求使用者註冊。下列程式碼將示範典型的註冊：

```objc
 - (void)myMethod {
    PFUser *user = [PFUser user];
    user.username = @"my name";
    user.password = @"my pass";
    user.email = @"email@example.com";

    // other fields can be set just like with PFObject
    user[@"phone"] = @"415-392-0202";

    [user signUpInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {
        if (!error) {
            // Hooray! Let them use the app now.
        } else {
            NSString *errorString = [error userInfo][@"error"];
            // Show the errorString somewhere and let the user try again.
        }
    }];
}
```

此次呼叫將以非同步方式在您的 Parse 應用程式中建立新使用者。在進行此操作之前，會先查看以確定使用者名稱和電子郵件是唯一的。為求安全還會在雲端將密碼雜湊處理。我們絕不會以純文字格式儲存密碼，也不會以純文字格式將密碼傳回用戶端。

請注意我們用的是 `signUp` 方法，而不是 `save` 方法。新的 `%{ParseUser}` 應該都要使用 `signUp` 方法建立。使用者的後續更新均可透過呼叫 `save` 完成。

`signUp` 方法有幾種不同用法，能傳回錯誤也有同步版本。我們通常極力建議盡可能使用非同步版本，以免擋到應用程式中的使用者介面。您可以在 [API 文件](/docs/ios/)中參閱有關這些特定方法的更多詳細資料。

如果註冊不成功，您應該要讀取傳回的錯誤物件。最可能發生的情況是，使用者名稱或電子郵件已有其他使用者採用。您應該要清楚地向使用者溝通此情況，並要求他們嘗試不同的使用者名稱。

您可隨意將電子郵件地址當成使用者名稱使用。只需要求使用者輸入電子郵件，但要將電子郵件填在使用者名稱屬性中；`%{ParseUser}` 將如平常一樣運作。我們將在「重設密碼」章節中討論上述情況是如何處理的。

## 登入

讓使用者註冊之後，當然必須讓他們日後能登入帳號。若要這樣做，您可以使用類別方法 `logInWithUsernameInBackground:password:`。

```objc
[PFUser logInWithUsernameInBackground:@"myname" password:@"mypass"
    block:^(PFUser *user, NSError *error) {
        if (user) {
            // Do stuff after successful login.
        } else {
            // The login failed. Check error to see why.
        }
}];
```

## 驗證電子郵件

在應用程式的設定中啟用電子郵件驗證，能讓應用程式將部分體驗保留給電子郵件地址經過確認的使用者。電子郵件驗證會將 `emailVerified` 索引鍵加入 `%{ParseUser}` 物件。`%{ParseUser}` 的 `email` 被設定或修改時，就會將 `emailVerified` 設定成 `false`。然後 Parse 會以電子郵件將一個連結寄給使用者，此連結會將 `emailVerified` 設定為 `true`。

有三種 `emailVerified` 狀態需要考慮：

1.  `true` - 使用者透過點擊 Parse 寄來的連結，確認他／她的電子郵件地址。最初建立使用者帳號時，`PFUsers` 不會包含 `true` 值。
2.  `false` - `%{ParseUser}` 物件最後一次重新整理時，使用者並未確認他／她的電子郵件地址。如果 `emailVerified` 為 `false`，請考慮呼叫 `%{ParseUser}` 上的 `refresh:`。
3.  _遺失_ - `%{ParseUser}` 建立時未進行電子郵件驗證或 `%{ParseUser}` 沒有 `email`。

## 目前使用者

如果使用者每次開啟應用程式時都要登入，會很麻煩。您可使用已快取的 `currentUser` 物件，避免這樣的情況。

無論何時只要您使用任何註冊或登入方法，使用者都會被快取到磁碟。您可將此快取視為工作階段，並自動假設使用者已經登入：

```objc
PFUser *currentUser = [PFUser currentUser];
if (currentUser) {
    // do stuff with the user
} else {
    // show the signup or login screen
}
```

您可藉由登出使用者清除目前的使用者：

```objc
[PFUser logOut];
PFUser *currentUser = [PFUser currentUser]; // this will now be nil
```

## 匿名使用者

能將資料和物件與個別使用者建立關聯具有高度價值，但有時您會想在不強制使用者指定使用者名稱和密碼的情況下，做到這一點。

匿名使用者是無需使用者名稱和密碼即可建立的使用者，但仍具有與任何其他 `%{ParseUser}` 一樣的所有相同功能。登出後，匿名使用者就會被棄用，其資料再也無法存取。

您可以用 `PFAnonymousUtils` 建立匿名使用者：

```objc
[PFAnonymousUtils logInWithBlock:^(PFUser *user, NSError *error) {
    if (error) {
        NSLog(@"Anonymous login failed.");
    } else {
        NSLog(@"Anonymous user logged in.");
    }
}];
```

您可以將匿名使用者轉換成一般使用者，方法為先設定使用者名稱和密碼，再呼叫 `signUp`；或是使用 [Facebook](#fbusers) 或 [Twitter](#twitterusers) 等服務登入或建立連結。經轉換的使用者將保留所有資料。若要判斷目前使用者是否為匿名使用者，您可以檢查 `PFAnonymousUtils isLinkedWithUser`：

```objc
if ([PFAnonymousUtils isLinkedWithUser:[PFUser currentUser]]) {
    [self enableSignUpButton];
} else {
    [self enableLogOutButton];
}
```

不需網路要求也能自動建立匿名使用者，以便應用程式一啟動您就能開始處理使用者。當您啟用「應用程式啟動時自動建立匿名使用者」時，`[PFUser currentUser]` 絕不會是 `nil`。第一次儲存使用者或與使用者有關聯的物件時，會在雲端自動建立使用者。在此之前，使用者的物件 ID 會是 `nil`。啟用自動建立使用者功能，可無痛建立資料與使用者的關聯。例如，在 `application:didFinishLaunchingWithOptions:` 函數中，您可以編寫：

```objc
[PFUser enableAutomaticUser];
[[PFUser currentUser] incrementKey:@"RunCount"];
[[PFUser currentUser] saveInBackground];
```

## 設定目前使用者

如果您已建立自己的驗證常式，或已經在伺服器端登入使用者，現在您就可以將工作階段權仗傳至用戶端，並使用 `become` 方法。此方法在設定目前使用者之前，將確保工作階段權杖有效。

```objc
[PFUser becomeInBackground:@"session-token-here" block:^(PFUser *user, NSError *error) {
    if (error) {
        // The token could not be validated.
    } else {
        // The current user is now set to user.
    }
}];
```

## 使用者物件的安全性

依照預設，`%{ParseUser}` 是受保護的類別。儲存在 `%{ParseUser}` 中的資料只能由該使用者進行修改。依照預設，任何用戶端仍能讀取這些資料。因此，部分 `%{ParseUser}` 物件已經過驗證且能加以修改，而其他物件則為唯讀。

具體而言，除非 `%{ParseUser}` 是透過已驗證的方法取得（如 `logIn` 或 `signUp`），否則您不能叫用任何 `save` 或 `delete` 方法。這樣做能確保只有使用者能更改自己擁有的資料。

以下將示範此安全性原則：

```objc
PFUser *user = [PFUser logInWithUsername:@"my_username" password:@"my_password"];
user.username = "my_new_username"; // attempt to change username
[user save]; // This succeeds, since the user was authenticated on the device

// Get the user from a non-authenticated method
PFQuery *query = [PFUser query];
PFUser *userAgain = (PFUser *)[query getObjectWithId:user.objectId];

userAgain.username = "another_username";

// This will throw an exception, since the PFUser is not authenticated
[userAgain save];
```

從 `currentUser` 取得的 `%{ParseUser}` 永遠會進行驗證。

如果有必要檢查 `%{ParseUser}` 是否已經過驗證，您可以叫用 `isAuthenticated` 方法。透過已驗證方法取得的 `%{ParseUser}` 物件，您不必檢查 `isAuthenticated`。

## 其他物件的安全性

套用至 `%{ParseUser}` 的相同安全性模型，也能套用至其他物件。就任何物件而言，您可以指定哪個使用者能讀取物件，以及哪個使用者可以修改物件。為了支援此類型的安全性，每個物件都有由 `PFACL` 類別實作的[存取控制清單](http://en.wikipedia.org/wiki/Access_control_list)。

使用 `PFACL` 最簡單的方法，是指定物件只能由單一使用者讀取或寫入。若要建立這樣的物件，必須先有已登入的 `%{ParseUser}`。接著，`ACLWithUser` 方法會產生限制該使用者存取權限的 `PFACL`。儲存物件時，物件的 ACL （Access Control List，存取控制清單）跟其他屬性一樣會更新。因此，若要建立只能由目前使用者存取的私人記事：

```objc
PFObject *privateNote = [PFObject objectWithClassName:@"Note"];
privateNote[@"content"] = @"This note is private!";
privateNote.ACL = [PFACL ACLWithUser:[PFUser currentUser]];
[privateNote saveInBackground];
```

此記事只能由目前使用者存取，然而該名使用者登入的任何裝置都能存取。如果您想讓應用程式跨多個裝置存取使用者資料，比如個人待辦事項清單，這項功能會很有用。

您也可依個別使用者授與權限。您可以使用 `setReadAccess:forUser:` 和 `setWriteAccess:forUser:` 個別將權限新增至 `PFACL`。例如，假設您有一則訊息要傳送給含有多名使用者的群組，而他們之中每個人都有權限可以閱讀和刪除此訊息：

```objc
PFObject *groupMessage = [PFObject objectWithClassName:@"Message"];
PFACL *groupACL = [PFACL ACL];
// userList is an NSArray with the users we are sending this message to.
for (PFUser *user in userList) {
    [groupACL setReadAccess:YES forUser:user];
    [groupACL setWriteAccess:YES forUser:user];
}
groupMessage.ACL = groupACL;
[groupMessage saveInBackground];
```

您也可以使用 `setPublicReadAccess:` 和 `setPublicWriteAccess:`，同時授與權限給所有使用者。此操作允許像在留言版發佈留言的使用模式。例如，建立只能由其作者編輯但所有人都能閱讀的貼文：

```objc
PFObject *publicPost = [PFObject objectWithClassName:@"Post"];
PFACL *postACL = [PFACL ACLWithUser:[PFUser currentUser]];
[postACL setPublicReadAccess:YES];
publicPost.ACL = postACL;
[publicPost saveInBackground];
```

為協助確保您的使用者資料預設為受保護，您可以將預設 ACL 設定為套用到所有新建立的 `PFObjects`：

```objc
[PFACL setDefaultACL:defaultACL withAccessForCurrentUser:YES];
```

在上述程式碼中，setDefaultACL 的第二個參數會告知 Parse 確認於建立物件時所指派的預設 ACL，允許目前使用者在當時取得讀取和寫入的存取權限。若無此設定，每次只要有使用者登入或登出，您就得重新設定 defaultACL，目前使用者才能適當地得到存取權限。有此設定，您就可以忽略目前使用者的改變，直到您明確需要授與不同存取權限為止。

有了預設 ACL，要建立遵守一般存取模式的應用程式會變得更容易。舉例來說，像 Twitter 這樣的應用程式，使用者內容一般為對外公開，就有可能像這樣設定預設 ACL：

```objc
PFACL *defaultACL = [PFACL ACL];
[defaultACL setPublicReadAccess:YES];
[PFACL setDefaultACL:defaultACL withAccessForCurrentUser:YES];
```

至於像 Dropbox 這樣的應用程式，除非明確授予權限，否則使用者資料只能由使用者本身存取。您想提供的預設 ACL 就只會將存取權限授予目前使用者：

```objc
[PFACL setDefaultACL:[PFACL ACL] withAccessForCurrentUser:YES];
```

而如果應用程式將資料記錄到 Parse，但並未提供該筆資料的任何使用者存取權限，您可以拒絕目前使用者存取，但提供限制性的 ACL：

```objc
[PFACL setDefaultACL:[PFACL ACL] withAccessForCurrentUser:NO];
```

被禁止的操作，比如刪除您沒有寫入存取權限的物件，會導致 `kPFErrorObjectNotFound` 錯誤代碼。基於安全性目的，這樣做能避免用戶端辨別出哪個物件 ID 存在但受保護，而哪個物件 ID 根本不存在。

## 重設密碼

事實上只要您將密碼導入系統中，使用者就會開始忘記密碼。在這種情況下，我們的程式庫提供能讓他們安全地重設密碼的方法。

若要開始密碼重設流程，請向使用者要求電子郵件，然後呼叫：

```objc
[PFUser requestPasswordResetForEmailInBackground:@"email@example.com"];
```

系統會嘗試就指定的電子郵件跟使用者電子郵件或使用者名稱欄位進行比對，然後將重設密碼電子郵件傳送給使用者。透過這種作法，您可以選擇讓使用者把電子郵件當使用者名稱用，或是另外收集電子郵件，再將其儲存在電子郵件欄位。

重設密碼流程如下：

1.  使用者透過輸入自己的電子郵件，要求重新設定密碼。
2.  Parse 將附有密碼重設專用連結的電子郵件，傳送到使用者的電子郵件地址。
3.  使用者點擊重設連結，然後被導向至可輸入新密碼的 Parse 頁面。
4.  使用者輸入新密碼。此時密碼重設為他們所指定的值。

請注意，本流程中出現的訊息會根據您在 Parse 建立此應用程式時所指定的名稱，以參照您的應用程式。

## 查詢

若要查詢使用者，您必須使用特殊的使用者查詢：

```objc
PFQuery *query = [PFUser query];
[query whereKey:@"gender" equalTo:@"female"]; // find all the women
NSArray *girls = [query findObjects];
```

此外，您可以使用 `getUserObjectWithId:objectId`，按照 ID 取得 `%{ParseUser}`。

## 關聯

涉及 `%{ParseUser}` 的關聯能立即使用。例如，假設您正在建立部落格應用程式。若要儲存使用者的新貼文並擷取他們的所有貼文：

```objc
PFUser *user = [PFUser currentUser];
// Make a new post
PFObject *post = [PFObject objectWithClassName:@"Post"];
post[@"title"] = @"My New Post";
post[@"body"] = @"This is some great content.";
post[@"user"] = user;
[post save];

// Find all posts by the current user
PFQuery *query = [PFQuery queryWithClassName:@"Post"];
[query whereKey:@"user" equalTo:user];
NSArray *usersPosts = [query findObjects];
```
## Facebook 使用者

Parse 提供將 Facebook 與您的應用程式整合的簡單方法。Facebook SDK 能搭配我們的 SDK 使用，並與 `%{ParseUser}` 類別整合，讓您可以輕鬆地將使用者連結至他們的 Facebook 身分。

<div class='tip info'><div>
深入了解如何搭配使用 Parse 和 Facebook API 建立設定檔檢視器應用程式。[在 iOS 中整合 Facebook 教學](/tutorials/integrating-facebook-in-ios)將教導您如何透過 Facebook 建立和登入 `PFUsers` 以及查詢 Facebook Graph API。
</div></div>

藉由使用我們的 Facebook 整合功能，您可以將已驗證的 Facebook 使用者與 `%{ParseUser}` 建立關聯。只要幾行程式碼，您就能在應用程式中提供「使用 Facebook 登入」選項，而且還能將使用者的資料儲存至 Parse。

### 設定

若要開始透過 Parse 使用 Facebook，您必須：

1.  [設定 Facebook 應用程式](https://developers.facebook.com/apps)（如果您尚未設定）。
2.  將應用程式的 Facebook 應用程式 ID 加入 Parse 應用程式的設定頁面。
3.  遵照 Facebook 的 [Facebook SDK 新手指南](https://developers.facebook.com/docs/getting-started/facebook-sdk-for-ios/)指示，建立連結至 Facebook SDK 的應用程式。反覆檢查確定您已將 FacebookAppID 和網址配置值加入應用程式的 .plist 檔案。

在您初始化 Parse SDK 的位置加入下列程式碼，例如加入 `application:didFinishLaunchingWithOptions:` 中

```objc
[PFFacebookUtils initializeFacebook];
```

在應用程式的委派中，加入下列處理常式：

```objc
- (BOOL)application:(UIApplication *)application     openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication  annotation:(id)annotation {
     return [FBAppCall handleOpenURL:url   sourceApplication:sourceApplication withSession:[PFFacebookUtils session]];
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    [FBAppCall handleDidBecomeActiveWithSession:[PFFacebookUtils session]];
}
```

透過 Parse 使用者使用 Facebook 有兩種主要的方式：(1) 使用 Facebook 用戶身分登入（或註冊）並建立一個 `%{ParseUser}`，或是 (2) 將 Facebook 連結至現有的 `%{ParseUser}`。

### 登入與註冊

`%{ParseUser}` 提供讓使用者透過 Facebook 登入或註冊的方式。這是利用 `logInWithPermissions` 方法完成的，例如：

```objc
[PFFacebookUtils logInWithPermissions:permissions block:^(PFUser *user, NSError *error) {
    if (!user) {
        NSLog(@"Uh oh. The user cancelled the Facebook login.");
    } else if (user.isNew) {
        NSLog(@"User signed up and logged in through Facebook!");
    } else {
        NSLog(@"User logged in through Facebook!");
    }
}];
```

Parse 與 Facebook iOS SDK 3.2 版相容。

執行這段程式碼時，會發生以下情況：

1.  會向使用者顯示 Facebok 登入對話方塊。
2.  使用者透過 Facebook 通過驗證，而您的應用程式則使用 `handleOpenURL` 收到回呼。
3.  我們的 SDK 會收到 Facebook 的資料，並將其儲存於 `%{ParseUser}`。如果是基於 Facebook ID 的新使用者，就會建立該使用者。
4.  您的程式碼區塊會與該使用者一起呼叫。

權限引數是字串陣列，用來指定您的應用程式必須自 Facebook 使用者取得哪些權限。這些權限必須只包括讀取權限。`%{ParseUser}` 整合不需任何權限即可立即使用。[請參閱 Facebook 開發人員指南，取得更多關於權限的資料](https://developers.facebook.com/docs/reference/api/permissions/)。

例如，若要取得使用者的發佈權限，好讓您的應用程式能代替使用者發佈近況更新，您必須呼叫 `[PFFacebookUtils reauthorizeUser:withPublishPermissions:audience:block]`：

```objc
[PFFacebookUtils reauthorizeUser:[PFUser currentUser]
                 withPublishPermissions:@["publish_actions"]
                 audience:FBSessionDefaultAudienceFriends
                 block:^(BOOL succeeded, NSError *error) {
                    if (succeeded) {
                        // Your app now has publishing permissions for the user
                    }
                 }];
```

<div class='tip info'><div>
經過驗證之後，是否要記錄任何需從 Facebook 使用者取得的資料，由您決定。若要完成此操作，您必須[透過 Facebook SDK 執行圖表查詢](https://parse.com/questions/how-can-i-find-parse-users-that-are-facebook-friends-with-the-current-user)
</div></div>

### 連結

如果您想將現有的 `%{ParseUser}` 關聯至 Facebook 帳號，可以像這樣加以連結：

```objc
if (![PFFacebookUtils isLinkedWithUser:user]) {
    [PFFacebookUtils linkUser:user permissions:nil block:^(BOOL succeeded, NSError *error) {
        if (succeeded) {
            NSLog(@"Woohoo, user logged in with Facebook!");
        }
    }];
}
```

進行連結時的步驟跟登入很相似。不同之處在於成功登入時，會在現有的 `%{ParseUser}` 更新 Facebook 資訊。之後透過 Facebook 的登入，會將使用者登入至他們現有的帳號。

如果您想從某個使用者上取消連結 Facebook，只需這樣做：

```objc
[PFFacebookUtils unlinkUserInBackground:user block:^(BOOL succeeded, NSError *error) {
    if (succeeded) {
        NSLog(@"The user is no longer associated with their Facebook account.");
    }
}];
```

### Facebook SDK 與 Parse

Facebook iOS SDK 提供一些用來跟 Facebook API 互動的協助程式類別。一般來說，您會使用 `FBRequest` 類別代替已登入的使用者來與 Facebook 互動。[您可以在這裡讀到關於 Facebook SDK 的更多資訊](https://developers.facebook.com/docs/reference/ios/3.2)。

我們的程式庫會替您管理使用者的 `FBSession`。您只需呼叫 `[PFFacebookUtils session]` 來存取工作階段執行個體，接著就能將其傳送至 `FBRequest`。

## Twitter 使用者

和 Facebook 一樣，Parse 也提供將 Twitter 驗證整合至應用程式的簡單方法。Parse SDK 提供直接的方式來授權並將 Twitter 帳號連結至 `%{ParseUser}`。只要幾行程式碼，您就能在應用程式中提供「使用 Twitter 登入」的選項，而且能將他們的資料儲存至 Parse。

### 設定

若要開始透過 Parse 使用 Twitter，您必須：

1.  [設定 Twitter 應用程式](https://dev.twitter.com/apps)（如果您尚未設定）。
2.  將應用程式的 Twitter Consumer Key 加入 Parse 應用程式的設定頁面。
3.  系統要求您指定 Twitter 應用程式的「回呼網址」時，請輸入有效網址。iOS 或 Android 應用程式不會使用此值，但在啟用 Twitter 驗證時需要用到。
4.  將 `Accounts.framework` 和 `Social.framework` 程式庫加入 Xcode 專案。
5.  在您初始化 Parse SDK 的位置加入下列程式碼，比如加入 `application:didFinishLaunchingWithOptions:` 中。
```objc
    [PFTwitterUtils initializeWithConsumerKey:@"YOUR CONSUMER KEY"
                    consumerSecret:@"YOUR CONSUMER SECRET"];
```

如果您遇到任何 Twitter 相關問題，[官方 Twitter 文件](https://dev.twitter.com/docs)是很好的參考資源。

透過 Parse 使用者使用 Twitter 有兩個主要的方式：(1) 以 Twitter 使用者身分登入並建立 `%{ParseUser}`，或 (2) 將 Twitter 連結至現有的 `%{ParseUser}`。

### 登入與註冊

`PFTwitterUtils` 提供讓 `%{ParseUser}` 透過 Twitter 登入或註冊的方式。此方式利用 `logInWithBlock` 或 `logInWithTarget` 訊息來完成：

```objc
[PFTwitterUtils logInWithBlock:^(PFUser *user, NSError *error) {
    if (!user) {
        NSLog(@"Uh oh. The user cancelled the Twitter login.");
        return;
    } else if (user.isNew) {
        NSLog(@"User signed up and logged in with Twitter!");
    } else {
        NSLog(@"User logged in with Twitter!");
    }
}];
```

執行這段程式碼時，會發生以下情況：

1.  會向使用者顯示 Twitter 登入對話方塊。
2.  使用者透過 Twitter 通過驗證，而您的應用程式則會收到回呼。
3.  我們的 SDK 會收到 Twitter 的資料，並將其儲存於 `%{ParseUser}`。如果是基於 Twitter 控制代碼的新使用者，就會建立該使用者。
4.  您的 `block` 會與該使用者一起呼叫。

### 連結

如果您想將現有 `%{ParseUser}` 連結至 Twitter 帳號，可以像這樣加以連結：

```objc
if (![PFTwitterUtils isLinkedWithUser:user]) {
    [PFTwitterUtils linkUser:user block:^(BOOL succeeded, NSError *error) {
        if ([PFTwitterUtils isLinkedWithUser:user]) {
            NSLog(@"Woohoo, user logged in with Twitter!");
        }
    }];
}
```

進行連結時的步驟跟登入很相似。不同之處在於成功登入時，會在現有的 `%{ParseUser}` 更新 Twitter 資訊。之後透過 Twitter 的登入，會將使用者登入至他們現有的帳號。

如果您想從某個使用者上取消連結 Twitter，只需這樣做：

```objc
[PFTwitterUtils unlinkUserInBackground:user block:^(BOOL succeeded, NSError *error) {
    if (!error && succeeded) {
        NSLog(@"The user is no longer associated with their Twitter account.");
    }
}];
```

### Twitter API 呼叫

應用程式擁有連結 Twitter 的 `%{ParseUser}` 時，我們的 SDK 會提供將 API HTTP 要求簽署至 [Twitter REST API](https://dev.twitter.com/docs/api) 的直接方法。若要透過 API 提出要求，您可以使用由 `PFTwitterUtils` 提供的 `PF_Twitter` 單例：

```objc
NSURL *verify = [NSURL URLWithString:@"https://api.twitter.com/1/account/verify_credentials.json"];
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:verify];
[[PFTwitterUtils twitter] signRequest:request];
NSURLResponse *response = nil;
NSData *data = [NSURLConnection sendSynchronousRequest:request
                                returningResponse:&response
                                error:&error];
```
