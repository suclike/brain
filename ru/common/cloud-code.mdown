# Что такое Cloud Code?

Parse задуман так, чтобы разработчики могли создавать любые приложения для мобильных устройств, не обращаясь к серверам. Для сложных приложений иногда требуется логика, которая не работает на мобильном устройстве. С Cloud Code это возможно.

Cloud Code прост в использовании, так как построен на том же пакете JavaScript SDK, что и тысячи других приложений. Разница лишь в том, что этот код работает в Parse Cloud, а не на мобильном устройстве. При обновлении Cloud Code сразу же можно применять ко всем мобильным средам. Не нужно ждать выпуска новой версии приложения. С помощью Cloud Code можно менять поведение приложения в процессе работы и быстрее добавлять новые функции.

Даже если вы только начинаете заниматься разработкой мобильных решений, мы надеемся, что Cloud Code будет понятен и прост в использовании.


## Начало работы

На компьютере, с помощью которого осуществляется разработка, необходимо будет установить инструмент Parse, запускаемый из командной строки. С его помощью вы сможете управлять своим кодом в Parse Cloud.


### Установка или обновление инструмента (Mac/Linux)

Чтобы получить инструмент Parse в среде Mac OS и Linux/Unix, выполните команду:

```bash
curl -s https://www.parse.com/downloads/cloud_code/installer.sh | sudo /bin/bash
```

Инструмент под названием &quot;parse&quot; будет установлен в папку `/usr/local/bin/parse`. В папке отсутствуют другие остаточные файлы, поэтому, чтобы деинсталировать инструмент, просто удалите файл. Если инструмент уже установлен, то вместо инсталляции выполняется обновление.

### Установка инструмента (Windows)

Инструмент Parse с запуском из командной строки для Windows можно найти [здесь](/downloads/windows/console/parse.zip). После загрузки и распаковки zip-файла дважды нажмите файл ParseConsole.exe, чтобы запустить сеанс PowerShell с поддержкой Parse. После первого запуска ParseConsole можно также начать сеанс PowerShell путём нажатия комбинации клавиш &quot;Win + R&quot; и ввода &quot;parse&quot; в открывшемся стандартном диалоговом окне «Выполнить». 


### Установка Cloud Code

На следующем этапе будет создан каталог для хранения кода, который будет работать в облаке. Для этого надо выполнить команду `parse new`, после чего вам потребуется выбрать приложение, для которого создается Cloud Code:

```bash
$ parse new MyCloudCode
Email: ninja@gmail.com
Password:
1:MyApp
Select an App: 1
$ cd MyCloudCode
```

Войдите в аккаунт Parse с помощью адреса электронной почты и пароля. Если вы зарегистрировались через OAuth и никогда не использовали пароль &mdash; теперь вам потребуется изменить настройки аккаунта, чтобы его установить. В существующем каталоге будет создан новый под названием `MyCloudCode`. Автоматически будут созданы несколько файлов:

```bash
-config/
  global.json
-cloud/
  main.js
-public/
  index.html
```

Каталог `config` содержит файл конфигурации JSON, с которым обычно ничего не нужно делать, в каталоге `cloud` находится Cloud Code, а каталог `public` хранит все статические материалы, которые нужно размещать в Parse. В каталоге `cloud` вы, как правило, будете просто редактировать файл `main.js`, в котором хранятся все функции Cloud Code. Теперь просто проверьте, были ли созданы файлы. Если вы используете систему контроля исходных кодов, то с ее помощью можно проверить все эти файлы.


### Простая функция

Давайте вспомним старую схему запуска простейшей функции в облаке. Код `cloud/main.js` представляет собой функцию, которая просто возвращает строку:

```js
Parse.Cloud.define("hello", function(request, response) {
  response.success("Hello world!");
});
```

Чтобы развернуть код с вашего компьютера в Parse Cloud, выполните команду:

```bash
$ parse deploy
```

Чтобы запустить эту функцию, после развертывания выполните команду:

```common-java
ParseCloud.callFunctionInBackground("hello", new HashMap<String, Object>(), new FunctionCallback<String>() {
  void done(String result, ParseException e) {
    if (e == null) {
      // result is "Hello world!"
    }
  }
});
```
```common-objc
[PFCloud callFunctionInBackground:@"hello"
                   withParameters:@{}
                            block:^(NSString *result, NSError *error) {
   if (!error) {
     // result is @"Hello world!"
   }
}];
```
```common-swift
// no swift example
```
```common-php
// no php example
```
```common-csharp
var result = await ParseCloud.CallFunctionAsync<IDictionary<string, object>>("hello", new Dictionary<string, object>());
// result is "Hello world!"
```
```common-js
Parse.Cloud.run('hello', {}, {
  success: function(result) {
    // result is 'Hello world!'
  },
  error: function(error) {
  }
});
```

Вам придет следующий ответ:

```json
{ "result": "Hello world!" }
```

Поздравляем! Вы успешно развернули и запустили Cloud Code.

Теперь можно поэкспериментировать с циклом развертывания. Попробуйте изменить `"Hello world!"` на другую строку, затем разверните и запустите функцию еще раз, чтобы получить другой результат. В Cloud Code можно использовать весь пакет JavaScript SDK, поэтому у вас много возможностей. Ниже мы разберем некоторые примеры более подробно.


## Cloud Functions 

Давайте посмотрим на более сложный пример использования Cloud Code. Одно из преимуществ облачных вычислений &mdash; вам не придется отправлять на устройство огромный список объектов, если нужно получить только небольшое количество информации. Предположим, вы пишете приложение, с помощью которого пользователи могут оценивать фильмы. Отдельный объект `Review` может выглядеть так:

```json
{ 
  "movie": "The Matrix",
  "stars": 5,
  "comment": "Too bad they never made any sequels."
}
```

Если вам нужно узнать среднюю оценку фильма «Матрица», можно запросить все оценки и вывести средний балл на устройстве. Однако, чтобы узнать всего лишь одну цифру, требуется высокая пропускная способность. Благодаря Cloud Code, можно просто отправить название фильма и получить в ответ среднюю оценку.

Cloud functions принимают словарь параметров JSON на объекте `request`, который можно использовать для отправки названия фильма. Весь Parse JavaScript SDK находится в среде облака, поэтому его можно использовать для запросов по объектам `Review`. В совокупности код для реализации запроса `averageStars` выглядит следующим образом:

```js
Parse.Cloud.define("averageStars", function(request, response) 
  var query = new Parse.Query("Review");
  query.equalTo("movie", request.params.movie);
  query.find({
    success: function(results) {
      var sum = 0;
      for (var i = 0; i < results.length; ++i) {
        sum += results[i].get("stars");
      }
      response.success(sum / results.length);
    },
    error: function() {
      response.error("movie lookup failed");
    }
  });
});
```

Использование `averageStars` и `hello` отличается только тем, что необходимо предоставить параметр, доступный в `request.params.movie` при вызове Cloud function.  Далее дана дополнительная информация о том, как можно вызвать Cloud function. 

### Вызов Cloud Function

Cloud function можно вызвать с любого клиентского SDK, а также через REST API (используйте раскрывающееся меню в примере ниже для переключения SDK). Например, для вызова Cloud function под названием `averageStars` с параметром `movie`:

```common-java
HashMap<String, Object> params = new HashMap<String, Object>();
params.put("movie", "The Matrix");
ParseCloud.callFunctionInBackground("averageStars", params, new FunctionCallback<Float>() {
   void done(Float ratings, ParseException e) {
       if (e == null) {
          // ratings is 4.5
       }
   }
});
```
```common-objc
[PFCloud callFunctionInBackground:@"averageStars"
                   withParameters:@{@"movie": @"The Matrix"}
                            block:^(NSNumber *ratings, NSError *error) {
  if (!error) {
     // ratings is 4.5
  }
}];
```
```common-swift
// no swift example
```
```common-php
// no php example
```
```common-csharp
IDictionary<string, object> params = new Dictionary<string, object>
{
    { "movie", "The Matrix" }
};
var result = await ParseCloud.CallFunctionAsync<IDictionary<string, object>>("averageStars", params);
```
```common-js
Parse.Cloud.run('averageStars', { movie: 'The Matrix' }, {
  success: function(ratings) {
    // ratings should be 4.5
  },
  error: function(error) {
  }
});
```

Обычно в функции облака передаются два аргумента:

1.  `request` &mdash; объект запроса содержит информацию о запросе. Установлены следующие поля:
  1.  `params` &mdash; объект параметров, отправленный функции клиентом.
  2.  `user` &mdash; `Parse.User`, который делает запрос.  Этот параметр не будет установлен, если пользователь не выполнил вход в систему.

Если функция выполнена успешно, то ответ в клиенте выглядит следующим образом:

```json
{ "result": 4.8 }
```

Если произошла ошибка, то ответ в клиенте выглядит следующим образом:

```json
{ 
  "code": 141,
  "error": "movie lookup failed"
}
```

### Выполнение кода перед сохранением

Еще одна причина для запуска кода в облаке &mdash; обеспечение определенного формата данных. Например, у вас есть приложение для Android и iOS, и нужно проверить данные для каждой системы. Вместо того чтобы писать отдельный код для каждой клиентской среды, можно выполнить только одну операцию с помощью Cloud Code.

Рассмотрим пример оценки фильма. Оцениваемому объекту обычно можно дать только от 1 до 5 баллов. Нельзя дать -6 баллов или 1337. Если нужно отклонить оценки, выходящие за пределы ограничений, &ndash; можно это сделать при помощи метода `beforeSave`:

```js
Parse.Cloud.beforeSave("Review", function(request, response) {
  if (request.object.get("stars") < 1) {
    response.error("you cannot give less than one star");
  } else if (request.object.get("stars") > 5) {
    response.error("you cannot give more than five stars");
  } else {
    response.success();
  }
});
```

При вызове `response.error` объект `Review` не будет сохранен, а клиент получит ошибку. При вызове `response.success` объект будет сохранен соответствующим образом. Код должен инициировать один из этих двух обратных вызовов.

Полезная подсказка: даже если выпущено много версий мобильного приложения, на них всех распространяется одна и та же версия Cloud Code. Таким образом, при запуске приложения, которое неправильно проверяет достоверность входных данных, эту проблему все еще можно решить, добавив проверку с помощью `beforeSave`.

Если нужно использовать `beforeSave` для определенного класса в Parse JavaScript SDK (например, [Parse.User](/docs/js/api/symbols/Parse.User.html)), не следует передавать строку для первого аргумента. Вместо этого нужно передать сам класс:

```js
Parse.Cloud.beforeSave(Parse.User, function(request, response) {
  if (!request.object.get("email")) {
    response.error("email is required for signup");
  } else {
    response.success();
  }
});
```


### Изменение объектов перед сохранением

В некоторых случаях не следует исключать неверные данные. Их нужно лишь немного подкорректировать перед сохранением. С этим случаем также может справиться `beforeSave`. Необходимо просто вызвать `response.success` на измененном объекте.

В примере с оценкой фильма, возможно, потребуется сократить длину комментариев. Отдельный длинный комментарий может быть неудобным для отображения. С помощью `beforeSave` можно сократить поле `comment` до 140 символов:

```js
Parse.Cloud.beforeSave("Review", function(request, response) {
  var comment = request.object.get("comment");
  if (comment.length > 140) {
    // Truncate and add a ...
    request.object.set("comment", comment.substring(0, 137) + "...");
  }
  response.success();
});
```


### Выполнение действий после сохранения

В ряде случаев некоторые действия, например, отправление, можно выполнить после сохранения объекта. Для этого надо зарегистрировать обработчик с помощью метода `afterSave`. Предположим, вам нужно отслеживать количество комментариев к записи в блоге. В этом случае запишите функцию следующим образом:

```js
Parse.Cloud.afterSave("Comment", function(request) {
  query = new Parse.Query("Post");
  query.get(request.object.get("post").id, {
    success: function(post) {
      post.increment("comments");
      post.save();
    },
    error: function(error) {
      console.error("Got an error " + error.code + " : " + error.message);
    }
  });
});
```

Клиент получит утвердительный ответ на запрос сохранения после завершения срока действия обработчика, независимо от того, как он будет завершен. Например, клиент получит утвердительный ответ, даже если обработчик завершит работу нештатно.  Любые ошибки, которые произошли во время работы обработчика, можно найти в журнале Cloud Code.

Если нужно использовать `afterSave` для определенного класса в Parse JavaScript SDK (например, [Parse.User](/docs/js/api/symbols/Parse.User.html)), не следует передавать строку для первого аргумента. Вместо этого нужно передать сам класс.


### Выполнение кода перед удалением объекта

Перед удалением объекта можно выполнить настраиваемый Cloud Code. Вы можете сделать это с помощью метода `beforeDelete`. Например, этот метод можно использовать для выполнения политики ограниченной возможности удаления, сложность которой нельзя выразить через списки [ACL](/docs/js/api/symbols/Parse.ACL.html). Предположим, у вас есть приложение фотоальбома, где несколько фотографий связаны с каждым альбомом и нужно, чтобы пользователь не мог удалить альбом, если в нем есть фото. Для этого можно записать функцию следующим образом:

```js
Parse.Cloud.beforeDelete("Album", function(request, response) {
  query = new Parse.Query("Photo");
  query.equalTo("album", request.object.id);
  query.count({
    success: function(count) {
      if (count > 0) {
        response.error("Can't delete album if it still has photos.");
      } else {
        response.success();
      }
    },
    error: function(error) {
      response.error("Error " + error.code + " : " + error.message + " when getting photo count.");
    }
  });
});
```

При вызове `response.error` объект `Album` не будет удален, а клиент получит сообщение об ошибке. При вызове `response.success` объект будет удален соответствующим образом. Код должен инициировать один из этих двух обратных вызовов.

Если нужно использовать `beforeDelete` для определенного класса в Parse JavaScript SDK (например, [Parse.User](/docs/js/api/symbols/Parse.User.html)), не следует передавать строку для первого аргумента. Вместо этого нужно передать сам класс.


### Выполнение действий после удаления

В некоторых случаях после удаления объекта можно выполнить определенные действия, например, отправку. Для этого надо зарегистрировать обработчик с помощью метода `afterDelete`. Предположим, после удаления записи в блоге нужно также удалить все связанные с ней комментарии. Для этого можно записать функцию следующим образом:

```js
Parse.Cloud.afterDelete("Post", function(request) {
  query = new Parse.Query("Comment");
  query.equalTo("post", request.object.id);
  query.find({
    success: function(comments) {
      Parse.Object.destroyAll(comments, {
        success: function() {},
        error: function(error) {
          console.error("Error deleting related comments " + error.code + ": " + error.message);
        }
      });
    },
    error: function(error) {
      console.error("Error finding related comments " + error.code + ": " + error.message);
    }
  });
});
```

Обработчик `afterDelete` может получить доступ к объекту, который был удален, через `request.object`. Этот объект извлекается полностью, но его нельзя извлечь повторно или сохранить.

Клиент получит утвердительный ответ на запрос удаления после завершения срока действия обработчика, независимо от того, как он будет завершен. Например, клиент получит утвердительный ответ, даже если обработчик завершит работу нештатно.  Любые ошибки, которые произошли во время работы обработчика, можно найти в журнале Cloud Code.

Если нужно использовать `afterDelete` для определенного класса в Parse JavaScript SDK (например, [Parse.User](/docs/js/api/symbols/Parse.User.html)), не следует передавать строку для первого аргумента. Вместо этого нужно передать сам класс.


### Ограничения ресурсов

#### Время ожидания

Cloud functions принудительно закрываются через 15 секунд. Функции `beforeSave`, `afterSave`, `beforeDelete` и `afterDelete` принудительно закрываются через 3 секунды после начала выполнения. Если вызвать Cloud function или функцию `beforeSave`/`afterSave`/`beforeDelete`/`afterDelete` с другого вызова Cloud Code, ее время будет ограничено периодом, оставшимся у вызывающей функции. Например, если функция `beforeSave` запускается cloud function через 13 секунд с начала выполнения, у функции `beforeSave` на выполнение останется только 2 секунды, а не 3, как обычно. Если для выполнения операций в Cloud Code требуется дополнительное время, воспользуйтесь [фоновыми заданиями](#jobs).

#### Сетевые запросы

Если есть сетевые запросы, не завершенные после `success`, или вызова `error`, то они будут отменены. Обычно следует дождаться завершения всех сетевых запросов перед вызовом `success`. Для функций `afterSave` и `afterDelete`, которые не вызывают `success`/`error`, Cloud Code будет дожидаться завершения всех сетевых запросов.


## Фоновые задания

Parse позволяет настроить задания, которые выполняются в фоновом режиме. Этот режим используется для длительных заданий, таких как интеграция с внешними сайтами, где время отклика может быть медленным, или отправка пакетных уведомлений. Если у вас часто истекает время ожидания при выполнении Cloud functions, рекомендуется работа в режиме фонового задания.

Существует несколько ограничений, о которых нужно помнить при использовании фоновых заданий:

*   Задания останавливаются через 15 минут с начала выполнения.
*   В приложениях одно задание может параллельно выполняться для 20 запросов в секунду с учетом лимита запросов.
*   Задания, которые инициируются после достижения максимального ограничения одновременного выполнения, останавливаются немедленно.


### Запись фонового задания

Запись фонового задания похожа на запись Cloud function.  Предположим, вам нужно выполнить миграцию пользователя после добавления поля `plan` к объекту `Parse.User`. Код будет выглядеть приблизительно следующим образом:

```js
Parse.Cloud.job("userMigration", function(request, status) 
  // Set up to modify user data
  Parse.Cloud.useMasterKey();
  var counter = 0;
  // Query for all users
  var query = new Parse.Query(Parse.User);
  query.each(function(user) {
    // Update to plan value passed in
    user.set("plan", request.params.plan);
    if (counter % 100 === 0) {
      // Set the  job's progress status
      status.message(counter + " users processed.");
    }
    counter += 1;
    return user.save();
  }).then(function() {
    // Set the job's success status
    status.success("Migration completed successfully.");
  }, function(error) {
    // Set the job's error status
    status.error("Uh oh, something went wrong.");
  });
});
```

Как и в других Cloud Functions, нужно обрабатывать условия утвердительного ответа и ошибки. В случае с фоновыми заданиями после завершения функции для этого следует вызвать либо `status.success()`, либо `status.error()`. Затем статус выполнения задания изменится​ на «Завершено». Если ни один из методов не будет вызван, срок выполнения задания истечет через 15 минут. При желании во время выполнения задания можно вызвать `status.message()`, чтобы создать сообщение о ходе выполнения. В случае вызова `status.message()` после `status.success()` сообщение о ходе выполнения будет пропущено.

После развертывания кода можно протестировать задание, выполнив следующую команду с помощью главного ключа:

```bash
curl -X POST \
  -H "X-Parse-Application-Id: $PARSE_APPLICATION_ID" \
  -H "X-Parse-Master-Key: $PARSE_MASTER_KEY" \
  -H "Content-Type: application/json" \
  -d '{"plan":"paid"}' \
  https://api.parse.com/1/jobs/userMigration
```

### Настройка расписания

После развертывания код фонового задания можно запланировать на панели во вкладке Cloud Code. В области запланированных заданий перечислены все текущие задания, кроме того, здесь можно запланировать новое задание. Чтобы добавить задание в расписание, выберите текущее развернутое задание, затем дайте описание, все необходимые параметры, время начала и периодичность. Запланированное задание можно выполнить по требованию, нажав кнопку «Выполнить». Кроме того, задание можно удалить из расписания. В области состояния заданий приведены результаты выполнения заданий. Здесь можно увидеть время начала задания,​ последнее сообщение о его состоянии и узнать, было ли оно завершено.


## Пользовательские веб-перехватчики

Пользовательские веб-перехватчики, получающие данные в гибких форматах, можно создать в Cloud Code с помощью программы [Express](http://expressjs.com/).  Эта функция поможет вам при написании веб-перехватчика, который вызывается другой веб-службой.  Используйте этот способ вместо [Cloud Functions](#functions), если нужно получить данные в формате, отличном от JSON, или если веб-служба, вызывающая конечную точку, не поддерживает отправку заголовков Parse REST API.  Поскольку ваш логический компонент будет и дальше работать в Cloud Code, при написании пользовательского веб-перехватчика у вас будет полный доступ к Parse JavaScript SDK.

В пользовательском веб-перехватчике можно получить непосредственный доступ к заголовкам и тексту запросов. Данные можно получить в формате JSON, с кодировкой формы или в виде необработанных байтов, которые можно анализировать с помощью любого средства синтаксического анализа.  Свой веб-перехватчик можно защитить с помощью обычной проверки подлинности HTTP.  Ниже приведен пример веб-перехватчика, который сохраняет сообщения в Parse Cloud.

```js
var express = require('express');
var app = express();

// Global app configuration section
app.use(express.bodyParser());
// Populate req.body
app.post('/notify_message',
  express.basicAuth('YOUR_USERNAME', 'YOUR_PASSWORD'),
  function(req, res) {
    // Use Parse JavaScript SDK to create a new message and save it.
    var Message = Parse.Object.extend("Message");
    var message = new Message();
    message.save({ text: req.body.text }).then(function(message) {
      res.send('Success');
    }, function(error) {
      res.status(500);
      res.send('Error');
    });
  });
app.listen();
```

Приведенный выше код использует ПО промежуточного уровня `express.bodyParser` для чтения текста запроса и заполнения `req.body.text`.  Обратите внимание, что мы не включали `app.use(express.basicAuth(â€¦))` в раздел глобальной конфигурации приложения, потому что обычная проверка подлинности HTTP нужна только для этой конечной точки, а не для всех конечных точек глобально.  Таким образом, в этом приложении у нас могут быть другие, общедоступные конечные точки.

Для проверки пользовательской конечной точки можно выполнить следующую команду, чтобы отправить запрос, содержащий текст с кодировкой формы.

```bash
$ curl -X POST \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d 'text=hi' http://YOUR_USERNAME:YOUR_PASSWORD@example.parseapp.com
```

Если нужно получить доступ к необработанным байтам текста запроса, в коде следует использовать ПО промежуточного уровня `parseExpressRawBody`, а не `express.bodyParser`. Кроме того, можно включить оба компонента промежуточного ПО, если одни обработчики запросов требуют JSON или кодировку формы www, а другие &mdash; байты текста запроса.

```js
var express = require('express');
var parseExpressRawBody = require('parse-express-raw-body');
var app = express();

// Global app configuration section
app.use(express.bodyParser());
app.use(parseExpressRawBody());

app.post('/receive_raw_data',
  express.basicAuth('YOUR_USERNAME', 'YOUR_PASSWORD'),
  function(req, res) {
    // If you send this endpoint JSON or www-form-encoded data, then
    // express.bodyParser will fill req.body with the corresponding data.
    // Otherwise, parseExpressRawBody will fill req.body with a Buffer
    // object containing the request body.  You can also convert this
    // Buffer to a string using req.body.toString().
  });
app.listen();
```


## Разработка и производство

Приложение для разработки можно использовать для проверки нового кода, а приложение для производства &mdash; для запуска приложения, распространяемого для пользователей.


### Добавление нового приложения в проект

Вам потребуется связать несколько приложений с вашим проектом. Команда `parse new` свяжет первое приложение с проектом.  Ниже показано, как с помощью команды `parse add [alias]` с проектом можно связать дополнительные приложения:

```bash
$ parse add production
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounterProd
2:PiecesOfEightCounterDev
Select an App: 1
```

Приведенный выше пример связывает приложение `PiecesOfEightCounterProd` с вашим проектом в Cloud Code.  Кроме того, создается псевдоним для нового приложения `production`, который предоставляет краткий путь для ссылки на приложение.


### Разработка Cloud Code

При разработке нового кода можно использовать команду `develop`, чтобы инструмент с запуском из командной строки Parse постоянно проверял наличие обновлений для вашего проекта и загружал изменения в Cloud Code.   Команда выглядит следующим образом: 

```bash
$ parse develop development
E2013-03-19:20:17:01.423Z] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
New release is named v58 I2013-03-19T20:17:10.343Z]
Deployed v58 with triggers:
  GameScore:
    before_save
```

Обратите внимание, что для команды `develop` вам нужно четко указать приложение, которое вы собираетесь изменить.  Таким образом, вы предотвратите случайное исполнение команды `develop` в вашем приложении для производства, что может привести к развертыванию в нем непроверенного кода.  Инструмент с запуском из командной строки будет загружать изменения кода и отображать новые сообщения журнала, пока вы не нажмете комбинацию клавиш Ctrl + C.


### Развертывание кода в производственной среде

После завершения тестирования и обновления код можно развернуть в производственной среде. Для этого выполните в приложении для производства команду `deploy` следующим образом:

```bash
$ parse deploy production
New release is named v2
```


## Ведение журнала из Cloud Code

Если вы хотите записать сообщение в файлы журнала, которые отображает `parse log`, можно использовать команды `console.log` `console.error` или `console.warn`. Как `console.error`, так и `console.warn` выполнит запись в журнал ошибок.

```js
Parse.Cloud.define("Logger", function(request, response) {
  console.log(request.params);
  response.success();
});
```

Функции облака могут записать до 100 сообщений на запрос.


## Сеть

Cloud Code позволяет отправлять HTTP-запросы на любой HTTP-сервер с помощью `Parse.Cloud.httpRequest`.  Эта функция принимает объект параметров для настройки вызова.  Одновременно можно сделать только 2 запроса `httpRequest`, а все остальные запросы будут поставлены в очередь.

Простой запрос GET будет выглядеть следующим образом:

```js
Parse.Cloud.httpRequest({
  url: 'http://www.parse.com/',
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

Для положительного кода состояния HTTP будет вызван `success`, в противном случае будет вызван `error`.


### Параметры запросов

Чтобы указать параметры запроса для добавления в конце URL-адреса, установите `params` для объекта параметров.  Также можно передать объект JSON пар «ключ-значение»:

```js
Parse.Cloud.httpRequest({
  url: 'http://www.google.com/search',
  params: {
    q : 'Sean Plott'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

или как необработанную строку `String`:

```js
Parse.Cloud.httpRequest({
  url: 'http://www.google.com/search',
  params: 'q=Sean Plott',
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```


### Установка заголовков

Можно отправить заголовки HTTP, установив объектам параметров атрибут `header`.  Допустим, нужно установить тип контента запроса; для этого можно выполнить следующее:

```js
Parse.Cloud.httpRequest({
  url: 'http://www.example.com/',
  headers: {
    'Content-Type': 'application/json;charset=utf-8'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```


### Отправка запроса POST

Можно отправить запрос POST, установив для объекта параметров атрибут `method`.  Текст запроса POST можно установить с помощью `body`.  Приведем простой пример:

```js
Parse.Cloud.httpRequest({
  method: 'POST',
  url: 'http://www.example.com/create_post',
  body: {
    title: 'Vote for Pedro',
    body: 'If you vote for Pedro, your wildest dreams will come true'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

На `http://www.example.com/create_post` будет отправлена публикация с текстом, который представляет собой атрибут `body` с кодировкой формы URL-адреса.  Если нужен текст с кодировкой JSON, можно выполнить следующее:

```js
Parse.Cloud.httpRequest({
  method: 'POST',
  url: 'http://www.example.com/create_post',
  headers: {
    'Content-Type': 'application/json;charset=utf-8'
  },
  body: {
    title: 'Vote for Pedro',
    body: 'If you vote for Pedro, your wildest dreams will come true'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

Чтобы убедиться в правильности кодировки текста запроса HTTP, всегда включайте набор символов в заголовке типа контента.


### Объект ответа

Объект ответа, переданный в `success` и `error`, будет содержать:

1.  `status` &mdash; состояние ответа HTTP.
     <li>`headers` &mdash; заголовки ответа.
2.  `text` &mdash; необработанный текст ответа.
3.  `data` &mdash; проанализированный ответ, если Cloud Code умеет анализировать тип отправленного контента.


## Модули

Cloud Code поддерживает разбивку кода JavaScript на модули.  Чтобы избежать нежелательных побочных эффектов от загрузки, модули Cloud Code работают по аналогии с модулями CommonJS. Одновременно с модулем загружается файл JavaScript, выполняется источник и возвращается глобальный объект `exports`.  Например, если `cloud/name.js` имеет следующий источник:

```js
var coolNames = ['Ralph', 'Skippy', 'Chip', 'Ned', 'Scooter'];
exports.isACoolName = function(name) {
  return coolNames.indexOf(name) !== -1;
}
```

 и `cloud/main.js` содержит:

```js
var name = require('cloud/name.js');
name.isACoolName('Fred');
// returns false
name.isACoolName('Skippy');
// returns true;
name.coolNames;
// undefined.
```

 `name` содержит функцию `isACoolName`.  Путь, который использует `require`, относится к корневому каталогу проекта Parse.  Можно загрузить только модули в каталоге `cloud/`.

### Cloud Modules

Cloud Modules являются самым простым способом интегрировать приложение Parse с услугами и библиотеками сторонних поставщиков. Они работают так же, как модули JavaScript, но при этом каждый может получить готовые модули. Для получения дополнительной информации см. [руководство по Cloud Module](/docs/cloud_modules_guide).


## Инструмент с запуском из командной строки

Мы уже видели, как с помощью инструмента Parse с запуском из командной строки можно развернуть новый код в облаке. В нем также содержатся другие полезные функции. Инструкции по установке см. в разделе [Установка инструмента](#started-installing).


### Введение

Тот же самый код можно развернуть в нескольких различных приложениях, за счет чего у вас будут отдельные приложения для «разработки» и «производства». Таким образом, вы можете проверять код на приложении для разработки, прежде чем запускать его в производство.

С помощью команды `new` первым необходимо добавить приложение, используемое по умолчанию во всех операциях с командной строкой. Все команды, за исключением `new`, принимают дополнительное приложение, для которого будет выполнена эта команда.


### Развертывание

Чтобы развернуть новую версию, выполните команду `parse deploy` из командной строки:

```bash
$ parse deploy
New release is named v1
```

Таким образом, новый код (в `cloud/main.js`) будет принудительно передан в Parse Cloud и развернут для целевого объекта по умолчанию &mdash; первого добавленного приложения или приложения, установленного с помощью команды `parse default`. Чтобы выполнить развертывание в другом целевом объекте, добавьте его как аргумент `deploy` следующим образом:

```bash
$ parse deploy "My Other App"
New release is named v2
```

Можно добавить примечания к версии при развертывании с помощью параметра `-d` или `--description=`.

При внедрении `parse deploy` в других сценариях (например, в среде автоматического тестирования/развертывания) можно рассчитывать, что код выхода из инструмента Parse с запуском из командной строки укажет, успешно ли выполнена команда.  В случае успешного развертывания код выхода будет равен 0, а в случае ошибки развертывания &mdash; другому значению.


### Разработка Cloud Code

Кроме того, с помощью команды `develop` инструмент Parse с запуском из командной строки можно запустить в режиме разработки.  Тогда инструмент будет отслеживать любые обновления в исходном каталоге и развертывать их в Parse, а также обеспечивать обновление журналов в режиме реального времени.

```bash
$ parse develop development
E2013-03-19:20:17:01.423Z] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
New release is named v58 I2013-03-19T20:17:10.343Z]
Deployed v58 with triggers:
  GameScore:
    before_save
```

В отличие от других команд, для `develop` нужно указать приложение Parse, в которое необходимо внедрить обновления.  Таким образом, вы предотвратите случайное исполнение команды develop в рабочем приложении, что может привести к развертыванию в нем непроверенного кода.


### Добавление нового целевого объекта

Чтобы добавить новое приложение parse в качестве целевого объекта, выполните команду `add`. Для этого вам нужно будет ввести электронный адрес и пароль для Parse.com, после чего вы сможете выбрать приложение из списка:

```bash
$ parse add
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounter
2:BootyDivider
Select an App: 1
```

Команда `add` принимает опциональный аргумент &mdash; псевдоним, который нужно присвоить приложению. Его можно использовать вместо названия приложения.

Как правило, все данные конфигурации сохраняются в `global.json`. Однако у вас может быть приложение, используемое для разработки, доступ к которому ограничен для остальной части вашей команды. Чтобы добавить эту конфигурацию, можно использовать значок `--local` вместо отдельного файла `local.json`. Таким образом, в системе управления версиями можно проверять `global.json`, сохраняя `local.json` только на своем компьютере.


### Установка приложения по умолчанию

Команды `parse deploy`, `parse log`, `parse rollback` и `parse releases` используют для исполнения приложение, заданное по умолчанию. Изменить выбранное приложение можно с помощью команды `parse default`. 

```bash
$ parse default MyApp
Default app set to MyApp.
$ parse default
Current default app is MyApp
```


### Откат изменений 

С помощью команды `parse rollback` можно откатить сделанные изменения, восстановив предыдущую версию кода.  Как и в случае с командой `parse deploy`, можно указать опциональный целевой аргумент.

```bash
$ parse rollback
Rolled back to v1
```

После этого выполняется откат к предыдущей версии кода. Также с помощью параметра `-r` или `--release=` можно указать имя версии, к которой нужно вернуться.


### Чтение журналов

Каждая операция развертывания, возврата или активации Cloud Code регистрируется в журнале. Записи журнала можно извлечь с помощью команды `parse log`. Существует два вида журналов:

*   `INFO` &mdash; содержит все данные.
*   `ERROR` &mdash; содержит только ошибки.

Команда журнала принимает опциональный целевой объект, а также два параметра:

*   `-n` &mdash; количество строк журнала, которые нужно отобразить (по умолчанию: 10)
*   `--level/-l` &mdash; уровень журнала, который нужно использовать (по умолчанию: INFO)
*   `-f` &mdash; эмулирует окончание -f

```bash
$ parse log -n 1
I2012-07-10:13:37:00] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
```


### Листинг версий 

С помощью команды `releases` можно перечислить известный набор версий в Parse Cloud. Parse отслеживает только последние 10 версий. 


### Установка версии SDK

По умолчанию для Cloud Code в этом каталоге используется самая свежая версия Parse JavaScript SDK на момент, когда для этого каталога была выполнена команда `new`. Чтобы изменить версию, используйте команду `parse jssdk`. Все доступные версии Parse JavaScript SDK можно увидеть с помощью команды `parse jssdk -a`. Проверить используемую версию Parse JavaScript SDK можно также с помощью команды `parse jssdk`.

```bash
$ parse jssdk
Current JavaScript SDK version is 1.2.13
$ parse jssdk -a
  1.2.18
  1.2.17
  1.2.16
  1.2.15
  1.2.14
* 1.2.13
  1.2.12
  1.2.11
$ parse jssdk 1.2.18
Current JavaScript SDK version is 1.2.18
$ parse jssdk -a
* 1.2.18
  1.2.17
  1.2.16
  1.2.15
  1.2.14
  1.2.13
  1.2.12
  1.2.11
```

### Обновление инструмента с запуском из командной строки 


Инструмент с запуском из командной строки можно обновить с помощью команды `parse update`, которая автоматически обновит инструмент Parse до последней версии.

```bash
$ parse update
Fetching latest version ...
######################################################################## 100%
Installing ...
```
