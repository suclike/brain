# エラー処理

大部分のParse JavaScript関数は、Backboneの「options」オブジェクトのような、コールバックを伴うオブジェクトを使用して成功または失敗を報告します。主に`success`と`error`の2つのコールバックが使用されます。`success`は、エラーなしに操作が完了した場合に呼び出されます。一般にこのパラメータは、`save`や`get`の場合は`Parse.Object`になり、`find`の場合は`Parse.Object`の配列になります。

Parseクラウドとネットワークを介してやり取りをしている際に何らかのエラーが発生すると、`error`が呼び出されます。これらのエラーはクラウドへの接続の問題に関連するエラーか、リクエストした操作の実行の問題に関連するエラーのいずれかになります。別の例を見てみましょう。下のコードでは、存在しない`objectId`を持つオブジェクトを取得しようとしています。Parseクラウドから返されるエラーを次のようにコールバックで適切に処理します。

```js
var query = new Parse.Query(Note);
query.get("aBcDeFgH", {
  success: function(results) {
    // This function will *not* be called.
    alert("Everything went fine!");
  },
  error: function(model, error) {
    // This will be called.
    // error is an instance of Parse.Error with details about the error.
    if (error.code === Parse.Error.OBJECT_NOT_FOUND) {
      alert("Uh oh, we couldn't find the object!");
    }
  }
});
```

また、端末がParseクラウドに接続できないため、クエリも失敗します。コールバックは同じですが、このシナリオを処理する簡単な追加コードが付与されています。

```js
var query = new Parse.Query(Note);
query.get("thisObjectIdDoesntExist", {
  success: function(results) {
    // This function will *not* be called.
    alert("Everything went fine!");
  },
  error: function(model, error) {
    // This will be called.
    // error is an instance of Parse.Error with details about the error.
    if (error.code === Parse.Error.OBJECT_NOT_FOUND) {
      alert("Uh oh, we couldn't find the object!");
    } else if (error.code === Parse.Error.CONNECTION_FAILED) {
      alert("Uh oh, we couldn't even connect to the Parse Cloud!");
    }
  }
});
```

特定の`Parse.Object`に影響を与える`save`や`signUp`などのメソッドの場合、エラー関数の最初の引数はオブジェクトそのものとなり、2番目の引数は`Parse.Error`オブジェクトとなります。これはBackboneタイプのフレームワークとの互換性を持たせるための措置です。返される可能性のあるすべての`Parse.Error`コードのリストについては、[JavaScript API](/docs/js)のエラーコードに関するセクションをご覧ください。
