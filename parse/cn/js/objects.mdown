# 对象

## Parse.Object

Parse 上的数据储存建立在 `Parse.Object` 的基础上。每个 `Parse.Object` 包含 JSON 兼容数据的键值对。该数据没有计划性，即您不需要事先指定每个 `Parse.Object` 上存在的键。您只需随意设置您需要的键值对，我们的后台会储存它们。

例如，假设您要跟踪游戏的高分。单个 `Parse.Object` 可能包括：

```js
score: 1337, playerName: "Sean Plott", cheatMode: false
```

键值必须是字母数字字符串。键值可以是字符串、数字、布尔值或设置是数组和字典 － 只要是能用 JSON 编码的任何内容。

每个 `Parse.Object` 都是一种具体子类的实例，您可以用其类名来区别不同组的数据。例如，您可以把高分对象称为 `GameScore`。我们建议您这样命名类名（如：NameYourClassesLikeThis）和键值（如：nameYourKeysLikeThis），让您的代码看起来整齐美观。

若要创建新的子类，可使用 `Parse.Object.extend` 方法。任何 `Parse.Query` 将返回具有相同类名的任何 `Parse.Object` 的新子类实例。如果您熟悉 `Backbone.Model`，那么您就知道如何使用 `Parse.Object`。它被设计为一种混入式替代品。

```js
// Simple syntax to create a new subclass of Parse.Object.
var GameScore = Parse.Object.extend("GameScore");

// Create a new instance of that class.
var gameScore = new GameScore();

// Alternatively, you can use the typical Backbone syntax.
var Achievement = Parse.Object.extend({ className: "Achievement" });
```

您可以向您的 `Parse.Object` 子类添加额外的方法和属性。

```js
// A complex subclass of Parse.Object
var Monster = Parse.Object.extend("Monster", {
  // Instance methods
  hasSuperHumanStrength: function () {
    return this.get("strength") > 18;
  },
  // Instance properties go in an initialize method
  initialize: function (attrs, options) {
    this.sound = "Rawr"
  }
}, {
  // Class methods
  spawn: function(strength) {
    var monster = new Monster();
    monster.set("strength", strength);
    return monster;
  }
});

var monster = Monster.spawn(200);
alert(monster.strength());  // Displays 200.
alert(monster.sound); // Displays Rawr.
```

## 保存对象

假如您想要将上述 `GameScore` 保存到 Parse 云中。保存接口与 `Backbone.Model` 类似，包括 `save` 方法：

```js
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();

gameScore.set("score", 1337);
gameScore.set("playerName", "Sean Plott");
gameScore.set("cheatMode", false);
gameScore.save(null, {
  success: function(gameScore) {
    // Execute any logic that should take place after the object is saved.
    alert('New object created with objectId: ' + gameScore.id);
  },
  error: function(gameScore, error) {
    // Execute any logic that should take place if the save fails.
    // error is a Parse.Error with an error code and description.
    alert('Failed to create new object, with error code: ' + error.description);
  }
});
```

该代码运行后，您可能不知道是否执行了相关操作。为确保数据正确保存，您可以在 Parse 上查看应用中的数据浏览器。您应该会看到类似于以下的内容：

```json
objectId: "xWMyZ4YEGZ", score: 1337, playerName: "Sean Plott", cheatMode: false, createdAt:"2011-06-10T18:33:42Z", updatedAt:"2011-06-10T18:33:42Z"
```

这里要注意两点。在运行这个代码前，您不需要配置或创建名称为 `GameScore` 的新类别。您的 Parse 应用在第一次遇到这个类别时会为您创建该类别。

还有几个字段只是为了方便，您不需要指定内容。`objectId` 是各已存对象的唯一标识符。`createdAt` 和 `updatedAt` 分别是各个对象在云中的创建时间和最后修改时间。每个字段都由 Parse 填充，所以完成保存操作后，`Parse.Object` 上才会存在这些字段。

如果您喜欢，可以在调用 `save` 时直接设置属性。

```js
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();
gameScore.save({
  score: 1337,
  playerName: "Sean Plott",
  cheatMode: false
}, {
  success: function(gameScore) {
    // The object was saved successfully.
  },
  error: function(gameScore, error) {
    // The save failed.
    // error is a Parse.Error with an error code and description.
  }
});
```

## 对象检索

将数据保存到云中非常有趣，但是更有趣的是从云中获取这些数据。如果您有 `objectId`，您可以用 `Parse.Query` 检索整个 `Parse.Object`：

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.get("xWMyZ4YEGZ", {
  success: function(gameScore) {
    // The object was retrieved successfully.
  },
  error: function(object, error) {
    // The object was not retrieved successfully.
    // error is a Parse.Error with an error code and description.
  }
});
```

若要从 `Parse.Object` 获取数值，可使用 `get` 方法。

```js
var score = gameScore.get("score");
var playerName = gameScore.get("playerName");
var cheatMode = gameScore.get("cheatMode");
```

有三个特殊的属性值：

```js
var objectId = gameScore.id;
var updatedAt = gameScore.updatedAt;
var createdAt = gameScore.createdAt;
```

若您需要用 Parse 云中的最新数据刷新已有对象，您可以像这样调用 `fetch` 方法：

```js
myObject.fetch({
  success: function(myObject)
    // The object was refreshed successfully
  },
  error: function(myObject, error) {
    // The object was not refreshed successfully.
    // error is a Parse.Error with an error code and description.
  }
});
```

## 对象更新

进行对象更新非常简单。只需在对象上设置一些新的数据并调用保存方法即可。例如：

```js
// Create the object.
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();
gameScore.set("score", 1337);
gameScore.set("playerName", "Sean Plott");
gameScore.set("cheatMode", false);
gameScore.set("skills", ["pwnage", "flying"]);
gameScore.save(null, {
  success: function(gameScore) {
    // Now let's update it with some new data. In this case, only cheatMode and score
    // will get sent to the cloud. playerName hasn't changed.
    gameScore.set("cheatMode", true);
    gameScore.set("score", 1338);
    gameScore.save();
  }
});
```

Parse 会自动找出修改的数据，并只向 Parse 云发送包含修改的字段。您不需要担心其中会包含您不想更新的数据。

### 计数器

上面的例子包含一种常见的使用案例。&ldquo;score&rdquo;（得分）字段是个计数器，需要用玩家的最新得分进行连续更新。上面的方法虽然有用，但是繁琐，如果您有多个客户端在尝试更新同一个计数器就可能会产生一些问题。

为帮助储存计数器类型的数据，Parse 提供了能够以原子递增（或递减）操作任何数字字段的方法。因此，这项更新可以重写为：

```js
gameScore.increment("score");
gameScore.save();
```

您也可以向 `increment` 输入另外一个参数，设置任意增量。若不指定增量，则使用默认值 1。

### 数组

为帮助储存数组数据，可使用三项操作以原子级更改与给定键值相关的数组：

*   `add` 将给定对象附加在数组字段末端。
*   `addUnique` 用于在给定对象不包含在数组字段中时添加该对象。插入位置是不确定的。
*   `remove` 会从数组字段中删除给定对象的所有实例。

例如，我们可以像这样将项目添加到类似于设置的&ldquo;skills&rdquo;（技能）字段中：

```js
gameScore.addUnique("skills", "flying");
gameScore.addUnique("skills", "kungfu");
gameScore.save();
```

注意：目前不能从位于同一保存位置的数组中进行原子级的项目添加和删除操作。在不同类型的数组操作之间，您必须调用 `save`。

## 对象删除

若要从云中删除对象：

```js
myObject.destroy({
  success: function(myObject) {
    // The object was deleted from the Parse Cloud.
  },
  error: function(myObject, error) {
    // The delete failed.
    // error is a Parse.Error with an error code and description.
  }
});
```

您可以使用 `unset` 方法从对象中删除单一字段：

```js
// After this, the playerName field will be empty
myObject.unset("playerName");
// Saves the field deletion to the Parse Cloud
myObject.save();
```

## 关系数据

一些对象可能与另外一些对象有一定的关系。例如，在某个博客应用程序中，一个 `Post` 对象可能有多个 `Comment` 对象。Parse 支持各种关系，包括一对一、一对多和多对多。

### 一对一和一对多关系

一对一和一对多关系是通过把 `Parse.Object` 保存为另一个对象的值来建立模型的。例如，一个博客应用中的每个 `Comment` 可能对应一个 `Post`。

要创建一篇带有单一 `Comment` 的新 `Post`，您可以这样写：

```js
// Declare the types.
var Post = Parse.Object.extend("Post");
var Comment = Parse.Object.extend("Comment");

// Create the post var myPost = new Post();
myPost.set("title", "I'm Hungry");
myPost.set("content", "Where should we go for lunch?");

// Create the comment var myComment = new Comment();
myComment.set("content", "Let's do Sushirrito.");

// Add the post as a value in the comment
myComment.set("parent", myPost);

// This will save both myPost and myComment
myComment.save();
```

从内部来看，为了保持一致性，Parse 框架会将提到的对象仅储存在一个位置。您还可以用它们的 `objectId` 将多个对象联系起来，如下所示：

```js
var post = new Post();
post.id = "1zEcyElZ80";
myComment.set("parent", post);
```

默认在提取对象时不提取相关的 `Parse.Object`。这些对象的值在按如下方式提取之前无法检索：

```js
var post = fetchedComment.get("parent");
post.fetch({
  success: function(post) {
    var title = post.get("title");
  }
});
```

### 多对多关系

多对多关系模型使用 `Parse.Relation` 建立。这与在键值上储存 `Parse.Object` 数组类似，只是您不需要一次提取某项关系的所有对象。此外，这让 `Parse.Relation` 可以扩展到比 `Parse.Object` 方法多很多的对象上。例如，一个 `User` 可能有很多篇喜欢的 `Posts`。这种情况下，您可以用 `relation` 储存 `User` 喜欢的 `Posts`。若要将一个 `Post` 添加至 `User` 的&ldquo;likes&rdquo;（喜欢）列表，您可以：

```js
var user = Parse.User.current();
var relation = user.relation("likes");
relation.add(post);
user.save();
```

您可以从 `Parse.Relation` 中删除一篇帖子：

```js
relation.remove(post);
user.save();
```

您可以在调用保存前多次调用 `add` 和 `remove`：

```js
relation.remove(post1);
relation.remove(post2);
user.save();
```

您还可以将 `Parse.Object` 数组传递给 `add` 和 `remove`：

```js
relation.add([post1, post2, post3]);
user.save();
```

默认情况下，不下载这种关系中的对象列表。您可以用 `query` 返回的 `Parse.Query`，获取用户喜欢的帖子列表。代码类似于：

```js
relation.query().find({
  success: function(list) {
    // list contains the posts that the current user likes.
  }
});
```

若您只想要帖子的一个子集，可以像这样对查询返回的 `Parse.Query` 添加额外限制条件：

```js
var query = relation.query();
query.equalTo("title", "I'm Hungry");
query.find({
  success:function(list) {
    // list contains post liked by the current user which have the title "I'm Hungry".
  }
});
```

若要了解有关 `Parse.Query` 的更多详细信息，请查看本指南的查询部分。`Parse.Relation` 的运作方式类似于用于查询的 `Parse.Object` 数组，所以对于可以在对象数组上执行的任何查询，您都可以在 `Parse.Relation` 上执行。

## 数据类型

目前，我们使用的数值类型有 `String`、`Number` 和 `Parse.Object`。Parse 还支持 JavaScript `Date` 和 `null`。

您可以嵌套 JavaScript `Object` 和 JavaScript `Array`，以在单一 `Parse.Object` 中储存更多结构数据。

一些示例：

```js
var number = 42;
var string = "the number is " + number;
var date = new Date();
var array = [string, number];
var object = { number: number, string: string };

var BigObject = Parse.Object.extend("BigObject");
var bigObject = new BigObject();
bigObject.set("myNumber", number);
bigObject.set("myString", string);
bigObject.set("myDate", date);
bigObject.set("myArray", array);
bigObject.set("myObject", object);
bigObject.set("myNull", null);
bigObject.save();
```

`Parse.Object` 的大小不应超过 128 KB。

若要了解有关 Parse 如何处理数据的更多信息，请查看[数据与安全](#data)部分的文档。
