# 文件

## 创建 Parse.File

`Parse.File` 让您可以把应用程序文件储存在云中，以应对文件太大或太多，不适宜放入普通 `Parse.Object` 的情况。最常见的用例是储存图片，但是您还可以用它储存文件、视频、音乐以及其他任何二进制数据（大小不超过 10 MB）。

`Parse.File` 非常容易上手。有多种方法可以创建文件。第一种方法是使用 base64 编码的字符串。

```js
var base64 = "V29ya2luZyBhdCBQYXJzZSBpcyBncmVhdCE=";
var file = new Parse.File("myfile.txt", { base64: base64 });
```

或者，您可以利用字节值数组创建文件：

```js
var bytes = [ 0xBE, 0xEF, 0xCA, 0xFE ];
var file = new Parse.File("myfile.txt", bytes);
```

Parse 将根据文件扩展名自动检测您正在上传的文件类型，但是您可以用第三个参数指定 `Content-Type`：

```js
var file = new Parse.File("myfile.zzz", fileData, "image/png");
```

但是对于 HTML5 应用最常见的情况是，您想要使用带文件上传控制的 html 格式。在现代浏览器上，这很简单。创建一个文件输入标签，该标签允许用户从本地驱动器中选择要上传的文件：

```html
  <input type="file" id="profilePhotoFileUpload">
```

然后，在点击处理代码或其他函数中获取对该文件的变量地址：

```js
var fileUploadControl = $("#profilePhotoFileUpload")[0];
if (fileUploadControl.files.length > 0) {
  var file = fileUploadControl.files[0];
  var name = "photo.jpg";
  var parseFile = new Parse.File(name, file);
}
```

注意，在这个例子中，我们把文件命名为 `photo.jpg`。这里要注意两点： 

*   您不需要担心文件名冲突。每次上传都会获得一个唯一标识符，所以上传多个文件名为 `photo.jpg` 的文件不同出现任何问题。
*   重要的是，您要给文件命名（带文件扩展名）。这样 Parse 就能够判断文件类型，并对文件进行相应的处理。所以，若您要储存 PNG 图片，务必使文件名以 `.png` 结尾。

然后，您可以把文件保存到云中。与 `Parse.Object` 相同，您可以根据回调类型和适合的错误处理方式使用 `save` 方法的多种派生方法。

```js
parseFile.save().then(function() {
  // The file has been saved to Parse.
}, function(error) {
  // The file either could not be read, or could not be saved to Parse.
});
```

最后，保存完成后，您可以像其他数据一样把 `Parse.File` 与 `Parse.Object` 关联起来：

```js
var jobApplication = new Parse.Object("JobApplication");
jobApplication.set("applicantName", "Joe Smith");
jobApplication.set("applicantResumeFile", parseFile);
jobApplication.save();
```

## 检索文件内容

检索文件内容的最佳方法取决于应用程序的环境。由于跨域请求问题，最好能够让浏览器为您检索文件内容。通常，这意味着将文件的地址嵌入到 DOM 中。这里，我们用 jQuery 在页面上嵌入已上传的个人主页照片：

```js
var profilePhoto = profile.get("photoFile");
$("profileImg")[0].src = profilePhoto.url();
```

如果您想以 Cloud Code 处理文件的数据，您可以用我们的 http 网络库检索文件：

```js
Parse.Cloud.httpRequest({ url: profilePhoto.url() }).then(function(response) {
  // The file contents are in response.buffer.
});
```

您可以用 [REST API](/docs/rest#files-deleting) 删除对象引用的文件。您需要提供主密钥才能删除文件。

如果您的文件未被应用中的任何对象引用，则不能通过 REST API 删除它们。您可以在应用的&ldquo;设置&rdquo;页面请求清理未使用的文件。请记住，该操作可能会破坏依赖于访问未被引用文件（通过其地址属性）的功能。当前与对象关联的文件将不会受到影响。
