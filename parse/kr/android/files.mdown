# 파일

## ParseFile

`ParseFile`을 사용하면 일반 `ParseObject`에 보관하기에 너무 크거나 번거로운 앱 파일을 클라우드에 저장할 수 있습니다. 가장 일반적인 사용 사례는 이미지 저장이지만 문서와 동영상, 음악, 기타 바이너리 데이터(최대 10MB) 저장에도 사용할 수 있습니다.

`ParseFile`은 쉽게 시작할 수 있습니다. 먼저 `byte[]` 형식의 데이터가 있어야 합니다. 그런 다음 이 데이터로 `ParseFile`을 만듭니다. 다음 예에서는 문자열을 사용합니다.

```java
byte[] data = "Working at Parse is great!".getBytes();
ParseFile file = new ParseFile("resume.txt", data);
```

이 예에서는 파일 이름을 `resume.txt`로 지정합니다. 여기에는 주목해야 할 두 가지 사항이 있습니다. 

*   파일 이름이 충돌할 것을 염려할 필요가 없습니다. 각 업로드에는 고유 ID가 부여되므로 `resume.txt`라는 파일을 여러 개 업로드해도 문제가 되지 않습니다.
*   파일에 파일 확장명이 있는 이름을 지정하는 것이 중요합니다. Parse에서는 확장명을 통해 파일 유형을 파악하고 이에 따라 처리합니다. 즉, PNG 이미지를 저장하는 경우 파일 이름이 `.png`로 끝나야 합니다.

그런 다음 파일을 클라우드에 저장합니다. `ParseObject`에서와 같이 본인에게 맞는 콜백 종류나 오류 처리에 따라 사용할 수 있는 `save` 메서드의 다양한 변형이 있습니다.

```java
file.saveInBackground();
```

마지막으로 저장이 완료되면 다른 데이터와 같이 `ParseFile`을 `ParseObject`에 연결할 수 있습니다.

```java
ParseObject jobApplication = new ParseObject("JobApplication");
jobApplication.put("applicantName", "Joe Smith");
jobApplication.put("applicantResumeFile", file);
jobApplication.saveInBackground();
```

다시 검색하려면 `ParseObject`의 `getData` 변형 중 하나를 호출해야 합니다. 다음 예에서는 다른 JobApplication 개체에서 이력서 파일을 검색합니다.

```java
ParseFile applicantResume = (ParseFile)anotherApplication.get("applicantResumeFile");
applicantResume.getDataInBackground(new GetDataCallback() {
    public void done(byte[] data, ParseException e) {
        if (e == null) {
            // data has the bytes for the resume
        } else {
            // something went wrong
        }
    }
});
```

`ParseObject`에서와 같이 `getData`의 백그라운드 버전을 사용할 가능성이 높습니다.

## 진행 상태

`saveInBackground` 및 `getDataInBackground`에 ProgressCallback을 전달하여 ParseFile을 사용한 업로드와 다운로드의 진행 상태를 쉽게 가져올 수 있습니다. 예:

```java
byte[] data = "Working at Parse is great!".getBytes();
ParseFile file = new ParseFile("resume.txt", data);

file.saveInBackground(new SaveCallback() {
    public void done(ParseException e) {
        // Handle success or failure here ...
    }
}, new ProgressCallback() {
    public void done(Integer percentDone) {
        // Update your progress spinner here. percentDone will be between 0 and 100.
    }
});
```

[REST API](/docs/rest#files-deleting)를 사용하여 개체에서 참조하는 파일을 삭제할 수 있습니다. 파일을 삭제할 수 있게 하려면 마스터 키를 제공해야 합니다.

앱의 어떤 개체에서도 파일을 참조하지 않는 경우 REST API를 통해 파일을 삭제할 수 없습니다. 앱의 설정 페이지에서 사용되지 않는 파일의 삭제를 요청할 수 있습니다. 이렇게 하면 URL 속성을 통해 참조되지 않는 파일 액세스에 의존하는 기능이 중단될 수 있습니다. 개체와 현재 연결된 파일은 영향을 받지 않습니다.
