# GeoPoints

Parse에서는 실제 위도 및 경도 좌표를 개체와 연결할 수 있습니다.  `ParseObject`에 `ParseGeoPoint`를 추가하면 쿼리에서 참조점과 개체의 근접도를 고려할 수 있습니다.  따라서 다른 사용자 근처에 있는 사용자나 사용자 근처에 있는 장소를 찾는 등의 작업을 쉽게 수행할 수 있습니다.

## ParseGeoPoint

지점을 개체와 연결하려면 먼저 `ParseGeoPoint`를 만들어야 합니다.  예를 들어 위도 40.0도, 경도 -30.0도인 지점을 만들려면 다음과 같이 하세요.

```java
ParseGeoPoint point = new ParseGeoPoint(40.0, -30.0);
```

그런 다음 이 지점을 개체에 일반 필드로 저장합니다.

```java
placeObject.put("location", point);
```

## 지리적 쿼리

공간 좌표를 갖는 여러 개체가 있으므로 이제 한 지점과 가장 가까운 개체를 찾으면 좋을 것입니다.  이렇게 하려면 `whereNear`를 사용하여 `ParseQuery`에 다른 제한을 추가합니다.  사용자와 가장 가까운 장소 10개의 목록을 가져오는 쿼리는 다음과 같습니다.

```java
ParseGeoPoint userLocation = (ParseGeoPoint) userObject.get("location");
ParseQuery<ParseObject> query = ParseQuery.getQuery("PlaceObject");
query.whereNear("location", userLocation);
query.setLimit(10);
query.findInBackground(new FindCallback<ParseObject>() { ... });
```

여기서 `nearPlaces`는 `userLocation`으로부터의 거리를 기준으로 정렬된 개체의 배열입니다(가장 가까운 거리에서 가장 먼 거리순). 추가 `orderByAscending()`/`orderByDescending()` 제약을 적용하는 경우 거리 순서보다 우선합니다.

거리를 사용하여 결과를 제한하려면 `whereWithinKilometers`, `whereWithinMiles` 및 `whereWithinRadians`를 체크아웃하세요.

특정 영역 내에 포함된 개체 집합을 쿼리하는 것도 가능합니다.  사각형 경계 상자 안의 개체를 찾으려면 `ParseQuery`에 `whereWithinGeoBox` 제한을 추가합니다.

```java
ParseGeoPoint southwestOfSF = new ParseGeoPoint(37.708813, -122.526398);
ParseGeoPoint northeastOfSF = new ParseGeoPoint(37.822802, -122.373962);
ParseQuery<ParseObject> query = ParseQuery.getQuery("PizzaPlaceObject");
query.whereWithinGeoBox("location", southwestOfSF, northeastOfSF);
query.findInBackground(new FindCallback<ParseObject>() { ... });
```

## 주의 사항

몇 가지 유의할 사항이 있습니다.

1.  각 ParseObject 클래스에는 ParseGeoPoint 개체를 사용하는 키를 하나만 사용할 수 있습니다.
2.  지점은 범위의 양 끝과 동일하거나 이를 넘으면 안 됩니다.  위도는 -90.0 또는 90.0이면 안 됩니다.  경도는 -180.0 또는 180.0이면 안 됩니다.  범위를 벗어나는 위도 또는 경도를 설정하려고 하면 오류가 발생합니다.
