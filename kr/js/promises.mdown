# Promise

콜백 외에도 Parse JavaScript SDK의 비동기 메서드는 모두 `Promise`를 반환합니다. Promise를 사용하면 콜백을 사용하여 가져오는 중첩 코드보다 훨씬 깔끔한 코드를 얻을 수 있습니다.

## `then` 메서드

вЂ&sbquo; вЂ 

모든 `Promise`에는 콜백 한 쌍을 사용하는 `then` 메서드가 있습니다. 첫 번째 콜백은 Promise가 _해결된_ 경우에 호출되고 두 번째 콜백은 Promise가 _거절된_ 경우에 호출됩니다.

```js
obj.save().then(function(obj) {
  // the object was saved successfully.
},
function(error) {
  // the save failed.
});
```

## Promise 함께 변경

Promise는 중첩하지 않고 체인으로 연결할 수 있다는 점이 특이합니다. Promise의 콜백에서 새 Promise를 반환하는 경우 두 번째 Promise가 해결될 때까지 첫 번째 Promise가 해결되지 않습니다. 이 점을 이용하면 콜백에서 가져오는 피라미드 코드를 만들지 않고 여러 작업을 수행할 수 있습니다.

```js
var query = new Parse.Query("Student");
query.descending("gpa");
query.find().then(function(students) {
  students[0].set("valedictorian", true);
  return students[0].save();
}).then(function(valedictorian) {
  return query.find();
}).then(function(students) {
  students[1].set("salutatorian", true);
  return students[1].save();
}).then(function(salutatorian) {
  // Everything is done!
});
```

## 오류 처리

한 체인에 포함된 Promise에서 오류를 반환하면 오류 콜백을 만날 때까지 그 뒤의 모든 성공 콜백을 건너뜁니다. 오류 콜백에서는 오류를 변경하거나, 거절되지 않은 새 Promise를 반환하여 처리할 수 있습니다. Promise가 거절된 것은 예외가 발생한 것으로 생각할 수 있습니다. 오류 콜백은 오류를 처리하거나 다시 발생시킬 수 있는 캐치 블록과 같습니다.

```js
var query = new Parse.Query("Student");
query.descending("gpa");
query.find().then(function(students) {
  students[0].set("valedictorian", true);
  // Force this callback to fail.
  return Parse.Promise.error("There was an error.");
}).then(function(valedictorian) {
  // Now this will be skipped.
  return query.find();
}).then(function(students) {
  // This will also be skipped.
  students[1].set("salutatorian", true);
  return students[1].save();
}, function(error) {
  // This error handler WILL be called. error will be "There was an error.".
  // Let's handle the error by returning a new promise.
  return Parse.Promise.as("Hello!");
}).then(function(hello) {
  // Everything is done!
}, function(error) {
  // This isn't called because the error was already handled.
});
```

긴 성공 콜백 체인을 두고 끝에 오류 핸들러를 하나만 두면 편리한 경우가 많습니다.

## Promise 만들기

처음에는 `find`나 `save`와 같은 메서드에서 반환된 Promise를 사용하면 됩니다. 하지만 좀 더 복잡한 시나리오에서는 직접 Promise를 만들 수도 있습니다. `Promise`를 만들고 나면 `resolve`나 `reject`를 호출하여 콜백을 트리거해야 합니다.

```js
var successful = new Parse.Promise();
successful.resolve("The good result.");

var failed = new Parse.Promise();
failed.reject("An error message.");
```

Promise를 만들 때 결과를 알면 편리한 메서드 몇 가지를 사용할 수 있습니다.

```js
var successful = Parse.Promise.as("The good result.");
var failed = Parse.Promise.error("An error message.");
```

## 직렬 Promise

여러 작업을 이어서 수행하고 앞의 작업이 끝날 때까지 기다렸다가 뒤의 작업을 시작하고 싶은 경우 Promise를 사용하면 편리합니다. 예를 들면 블로그에 있는 댓글을 모두 삭제하는 경우를 생각할 수 있습니다.

```js
var query = new Parse.Query("Comments");
query.equalTo("post", 123);

query.find().then(function(results) {
  // Create a trivial resolved promise as a base case.
  var promise = Parse.Promise.as();
  _.each(results, function(result) {
    // For each item, extend the promise with a function to delete it.
    promise = promise.then(function() {
      // Return a promise that will be resolved when the delete is finished.
      return result.destroy();
    });
  });
  return promise;
}).then(function() {
  // Every comment was deleted.
});
```

## 병렬 Promise

`when` 메서드를 사용하여 Promise를 통해 여러 작업을 병렬로 수행할 수도 있습니다. 여러 작업을 한꺼번에 시작하고 `Parse.Promise.when`을 사용하여 입력 Promise가 모두 해결된 후에 해결되는 새 Promise를 만들 수 있습니다. 전달된 Promise 중에서 실패한 것이 없으면 새 Promise도 성공하지만 그렇지 않은 경우에는 마지막 오류가 표시되면서 실패합니다. 병렬로 작업을 수행하면 직렬로 수행하는 것보다 빨리 완료되지만 시스템 리소스와 대역폭도 더 많이 소비합니다.

```js
var query = new Parse.Query("Comments");
query.equalTo("post", 123);

query.find().then(function(results) {
  // Collect one promise for each delete into an array.
  var promises = [];
  _.each(results, function(result) {
    // Start this delete immediately and add its promise to the list.
    promises.push(result.destroy());
  });
  // Return a new promise that is resolved when all of the deletes are finished.
  return Parse.Promise.when(promises);
}).then(function() {
  // Every comment was deleted.
});
```

## 비동기 메서드 만들기

이러한 툴을 사용하면 Promise를 반환하는 비동기 함수를 간단하게 만들 수 있습니다. 예를 들어 Promise를 사용하는 버전의 `setTimeout`을 만들 수 있습니다.

```js
var delay = function(millis) {
  var promise = new Parse.Promise();
  setTimeout(function() {
    promise.resolve();
  }, millis);
  return promise;
};
delay(100).then(function() {
  // This ran after 100ms!
});
```
