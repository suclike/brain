# Promise

除了回调以外，Parse JavaScript SDK 中的每一种异步方法都会返回一个 `Promise`。有了 promise，您的代码比用回调得到的嵌套代码整洁得多。

## `then` 方法

вЂ&sbquo; вЂ&sbquo;

每个 `Promise` 都有一种名称为 `then` 的方法，可调用一对回调。若 promise 得以_解决_，则会调用第一个回调；若 promise 被_拒绝_，则会调用第二个回调。

```js
obj.save().then(function(obj) {
  // the object was saved successfully.
},
function(error) {
  // the save failed.
});
```

## Promise 链合

Promise 有点神奇，因为您不需要嵌套就可以把它们链合起来。如果对某个 promise 的回调返回一个新 promise，那么第一个 promise 要在第二个 promise 解决后才能解决。如此，您可以执行多次操作，不用担心回调带来的金字塔代码问题。

```js
var query = new Parse.Query("Student");
query.descending("gpa");
query.find().then(function(students) {
  students[0].set("valedictorian", true);
  return students[0].save();
}).then(function(valedictorian) {
  return query.find();
}).then(function(students) {
  students[1].set("salutatorian", true);
  return students[1].save();
}).then(function(salutatorian) {
  // Everything is done!
});
```

## 错误处理

若链路中的任何 Promise 返回一个错误，后面的所有成功回调都会跳过，直至遇到错误的回调。错误回调可以改变错误，可以通过返回未被拒绝的新 Promise 来处理它。您可以把被拒的 Promise 当成丢弃异常项。错误回调像是一个捕获模块，可以处理错误或重新丢弃错误。

```js
var query = new Parse.Query("Student");
query.descending("gpa");
query.find().then(function(students) {
  students[0].set("valedictorian", true);
  // Force this callback to fail.
  return Parse.Promise.error("There was an error.");
}).then(function(valedictorian) {
  // Now this will be skipped.
  return query.find();
}).then(function(students) {
  // This will also be skipped.
  students[1].set("salutatorian", true);
  return students[1].save();
}, function(error) {
  // This error handler WILL be called. error will be "There was an error.".
  // Let's handle the error by returning a new promise.
  return Parse.Promise.as("Hello!");
}).then(function(hello) {
  // Everything is done!
}, function(error) {
  // This isn't called because the error was already handled.
});
```

通常比较方便的形式是一长串成功回调，并且只在结尾有一个错误处理代码。

## 创建 Promise

开始时，您只能使用 `find` 或 `save` 等方法返回的 promise。但是，对于更高级的方案，您可能需要专用的 promise。创建一个 `Promise` 后，您需要调用 `resolve` 或 `reject` 来触发其回调。

```js
var successful = new Parse.Promise();
successful.resolve("The good result.");

var failed = new Parse.Promise();
failed.reject("An error message.");
```

如果您在创建 promise 时知道其结果，就可以使用一些简单方便的方法。

```js
var successful = Parse.Promise.as("The good result.");
var failed = Parse.Promise.error("An error message.");
```

## 串联 promise

如果您想连续执行一连串的任务，每个任务等前面的一个任务完成后才开始执行，那么使用 promise 将非常方便。例如，假如您想删除您博客上的所有评论。

```js
var query = new Parse.Query("Comments");
query.equalTo("post", 123);

query.find().then(function(results) {
  // Create a trivial resolved promise as a base case.
  var promise = Parse.Promise.as();
  _.each(results, function(result) {
    // For each item, extend the promise with a function to delete it.
    promise = promise.then(function() {
      // Return a promise that will be resolved when the delete is finished.
      return result.destroy();
    });
  });
  return promise;
}).then(function() {
  // Every comment was deleted.
});
```

## 并联 promise

您还可以通过 `when` 方法，使用 promise 执行并联的几个任务。您可以同时开始多项操作，并使用 `Parse.Promise.when` 创建一个新的 promise，新 promise 将在所有输入 promise 解决后得到解决。若传入的所有 promise 都没有失败，那么新 promise 就会成功；否则，它将在最后一个错误时失败。并联执行操作比串联执行操作快，但是会占用更多的系统资源和带宽。

```js
var query = new Parse.Query("Comments");
query.equalTo("post", 123);

query.find().then(function(results) {
  // Collect one promise for each delete into an array.
  var promises = [];
  _.each(results, function(result) {
    // Start this delete immediately and add its promise to the list.
    promises.push(result.destroy());
  });
  // Return a new promise that is resolved when all of the deletes are finished.
  return Parse.Promise.when(promises);
}).then(function() {
  // Every comment was deleted.
});
```

## 创建异步方法

使用这些工具，可以轻松创建可以返回 promise 的异步函数。例如，您可以 promise 版本的 `setTimeout`。

```js
var delay = function(millis) {
  var promise = new Parse.Promise();
  setTimeout(function() {
    promise.resolve();
  }, millis);
  return promise;
};
delay(100).then(function() {
  // This ran after 100ms!
});
```
