# 本機資料存放區

Parse Android SDK 提供可以用來存放和擷取 `ParseObject` 的本機資料存放區，甚至在沒有網路時仍然可以使用。若要啟用此功能，只要在呼叫 `initialize` 前先呼叫 `Parse.enableLocalDatastore()` 即可。

```java
import com.parse.Parse;
import android.app.Application;

public class App extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        Parse.enableLocalDatastore(this);
        Parse.initialize(this, PARSE_APPLICATION_ID, PARSE_CLIENT_KEY);
    }
}
```

請留意，啟用本機資料存放區會有幾個副作用。啟用時，任何 `ParseObject` 都只會有一個執行個體。例如，假設您有一個 `"GameScore"` 類別的執行個體，其中含有 `"xWMyZ4YEGZ"` 的 `objectId`，然後您針對含有該 `objectId` 之 `"GameScore"` 的所有執行個體發出 `ParseQuery`。結果會與您記憶體中已經有的物件是相同的執行個體。

另一個副作用是目前使用者與安裝會存放在本機資料存放區，因此您可以利用以下方法保存應用程式執行之間這些物件未儲存的變更。

在 `ParseObject` 呼叫 `saveEventually` 方法會導致物件在儲存完成前一直被釘選在本機資料存放區中。所以現在，如果您變更了目前的 `ParseUser`，並呼叫 `ParseUser.getCurrent().saveEventually()`，您的應用程式會持續出現做出的變更。

## 釘選

您可以透過釘選將 `ParseObject` 存放在本機資料存放區中。`ParseObject` 的釘選是遞迴的，就像儲存一樣，所以您的釘選所指向的物件也一樣會被釘選。當物件被釘選時，每次透過擷取或儲存新資料進行更新時，本機資料存放區中的副本也會自動更新。您可以完全放心。

```java
ParseObject gameScore = new ParseObject("GameScore");
gameScore.put("score", 1337);
gameScore.put("playerName", "Sean Plott");
gameScore.put("cheatMode", false);
gameScore.pinInBackground();
```

如果您有多個物件，可以使用 `pinAllInBackground` 便捷方法一次全部釘選。

```java
ParseObject.pinAllInBackground(listOfObjects);
```

## 從本機資料存放區擷取物件

能夠存放物件固然好，但只有能夠在之後將物件重新取出，這個功能才有意義。從本機資料存放區擷取物件的方式就如同從網路擷取物件一樣。唯一不同之處是呼叫 `fromLocalDatastore` 方法，指示 `ParseQuery` 要到何處尋找結果。

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.fromLocalDatastore();
query.getInBackground("xWMyZ4YE",
    new GetCallback<ParseObject>() {
        public void done(ParseObject object, ParseException e) {
            if (e == null) {
                // object will be your game score
            } else {
                // something went wrong
            }
        }
    });
```

## 查詢本機資料存放區

您經常會想要尋找符合某些條件的完整物件清單，而不是透過 ID 取得單一物件。您可以使用 [ParseQuery](#queries)

## 取消釘選

當物件處理完畢而您不再需要使用本機資料存放區時，只需要取消釘選即可。這會釋放出裝置的磁碟空間，並讓本機資料存放區中的查詢可以保持快速執行。

```java
gameScore.unpinInBackground();
```

還有一個方法可以一次取消數個物件的釘選。

```java
ParseObject.unpinAllInBackground(listOfObjects);
```

## 以標籤釘選

手動釘選和取消釘選個別物件有點類似使用 `malloc` 和 `free`。這是功能相當強大的工具，但是在複雜情境下，物件存放的管理或許會有些困難。例如，假設您在設計一款遊戲的高分排行榜；一個是全球高分榜，另一個是您朋友的高分榜。如果您的朋友恰好出現在全球高分榜中，則當您將他們從快取查詢中移除時，請確保釘選並未完全取消。若要讓這些情境更簡單，也可以標籤釘選。標籤代表一組需要一起存放的物件。

```java
// Add several objects with a label.
ParseObject.pinAllInBackground("MyScores", someGameScores);

// Add another object with the same label.
anotherGameScore.pinInBackground("MyScores");
```

若要同時取消帶有相同標籤物件的釘選，可以將標籤傳送至取消釘選方法。這讓您免於手動追蹤各組中您在意的物件。

```java
ParseObject.unpinAllInBackground("MyScores");
```

任何物件只要以標籤釘選，就會永遠存在於資料存放區。換句話說，如果以兩種不同的標籤釘選同一物件，然後只有其中一個標籤取消釘選，該物件就會繼續存在於資料存放區，直到也取消另一標籤的釘選。

## 快取查詢結果

利用標籤釘選使得查詢結果的快取更加容易。您可以用標籤釘選每個不同查詢的結果。若要取得新結果，只要執行查詢並更新釘選的物件即可。

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery(“GameScore");
query.orderByDescending(“score”);

// Query for new results from the network.
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scores, ParseException e) {
        // Remove the previously cached results.
        ParseObject.unpinAllInBackground(“highScores”, new DeleteCallback() {
            public void done(ParseException e) {
                // Cache the new results.
                ParseObject.pinAllInBackground(“highScores”, scores);
            }
        });
    }
});
```

當想要取得查詢的快取結果時，可以透過本機資料存放區執行相同的查詢。

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery(“GameScore");
query.orderByDescending(“score”);
query.fromLocalDatastore();

query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scores, ParseException e) {
        // Yay! Cached scores!
    }
});
```

## 同步本機變更

在本機儲存變更後，有幾個不同的方法可以透過網路將這些變更儲存回 Parse。使用 `saveEventually` 是最簡單的做法。當您在 `ParseObject` 呼叫 `saveEventually` 時，變更在可以儲存前會被釘選。SDK 會確保在下一次網路恢復連線時儲存物件。

```java
gameScore.saveEventually();
```

如果想要對物件同步的方式有更好的掌控，可以將物件放置於本機資料存放區，直到您準備以 `saveInBackground` 自行進行儲存。若要管理需要儲存的物件組，同樣可以使用標籤進行。`ParseQuery` 的 `fromPin` 方法讓擷取想要的物件更加容易。

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery(“GameScore");
query.fromPin(“myChanges”);
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scores, ParseException e) {
        for (ParseObject score in scores) {
            score.saveInBackground();
            score.unpinInBackground(“myChanges”);
        }
    }
});
```
