# 푸시 알림

푸시 알림은 사용자의 참여를 이끌어내고 앱에 대해 알리는 데 유용한 방법입니다. 전체 사용자 층에 빠르고 효과적으로 도달할 수 있습니다. 이 가이드는 푸시 알림을 보내도록 Parse를 설정하는 절차와 일반적인 사용법에 대해 안내합니다.

## 푸시 설정

푸시를 사용하려면 우선 [Android 푸시 튜토리얼](/tutorials/android-push-notifications)을 완료하여 앱을 구성하는 방법에 대해 알아보세요. 그런 다음 이 가이드로 돌아와서 Parse에서 제공하는 푸시 기능에 대해 자세히 알아보세요.

Parse 라이브러리에서는 가능한 경우 GCM(Google Cloud Messaging)을 사용하여 푸시 알림을 제공합니다. Amazon Kindle Fire와 같이 GCM을 지원하지 않는 기기의 경우 Parse에서는 Parse Cloud와의 지속적인 연결을 유지하는 백그라운드 서비스를 사용하여 푸시를 제공합니다. 따라서 Android 2.2 이상을 실행하는 모든 기기에서 Parse Push가 작동합니다. 

## 설치

푸시 알림을 받도록 등록된 기기에 설치된 모든 Parse 앱에는 연결된 `Installation` 개체가 있습니다. `Installation` 개체는 푸시 알림을 타게팅하는 데 필요한 모든 데이터를 저장하는 위치입니다. 예를 들어 야구 앱에서 사용자의 관심 팀을 저장하여 실적에 대한 업데이트를 보낼 수 있습니다.

Android에서 `Installation` 개체는 `ParseInstallation` 클래스(`ParseObject`의 하위 클래스)를 통해 사용할 수 있습니다. 이 클래스는 데이터 저장과 검색에 [동일한 API](/docs/android_guide#objects)를 사용합니다. Android 앱에서 현재 `Installation` 개체에 액세스하려면 `ParseInstallation.getCurrentInstallation()` 메서드를 사용합니다. 처음으로 `ParseInstallation`을 저장하면 이 클래스가 `Installation` 클래스에 추가되고 푸시 알림 타게팅에 사용할 수 있게 됩니다.

```java
// Save the current Installation to Parse.
ParseInstallation.getCurrentInstallation().saveInBackground();
```

`ParseObject`와 마찬가지로 `ParseInstallation`을 수정할 수 있으며, 기기 관리와 타게팅에 도움이 되는 여러 특수 필드가 있습니다.

*   **`badge`**: iOS 앱용 아이콘 배지의 현재 값입니다. 서버에서 이 값에 대한 변경 사항은 이후 배지 증가 푸시 알림에 사용됩니다.
*   **`channels`**: 기기가 현재 가입된 채널의 배열입니다.
*   **`timeZone`**: 대상 기기가 위치한 지역의 현재 시간대입니다. 이 값은 기기에서 `Installation` 개체가 저장될 때마다 동기화됩니다_(읽기 전용)_.
*   **`deviceType`**: 기기 유형을 지정하며, &quot;ios&quot; 또는 &quot;android&quot;입니다_(읽기 전용)_.
*   **`installationId`**: Parse에서 사용하는 기기의 고유 ID입니다_(읽기 전용)_.
*   **`deviceToken`**: iOS 기기에 사용되는 Apple에서 생성한 토큰 또는 GCM에서 등록 ID를 추적하는 데 사용되는 토큰입니다_(읽기 전용)_.
*   **`channelUris`**: Microsoft에서 생성한 푸시 URI로, Windows 기기에 사용됩니다_(읽기 전용)_.
*   **`appName`**: 이 설치가 속한 클라이언트 앱의 표시 이름입니다_(읽기 전용)_.
*   **`appVersion`**: 이 설치가 속한 클라이언트 앱의 버전 문자열입니다_(읽기 전용)_.
*   **`parseVersion`**: 이 설치에서 사용하는 Parse SDK의 버전입니다_(읽기 전용)_.
*   **`appIdentifier`**: 이 설치의 클라이언트 앱에 대한 고유 ID입니다. Android에서는 이 매개변수가 지원되지 않습니다_(읽기 전용)_.
*   **`pushType`** 이 필드는 Parse를 사용할 푸시 전달 네트워크에 연결하기 위한 것입니다. 기기가 GCM을 통해 푸시를 받도록 등록된 경우 이 필드에는 &quot;gcm&quot;이 표시됩니다. 이 기기가 GCM을 사용하지 않고 Parse의 푸시 알림 서비스를 사용하는 경우 비어 있습니다_(읽기 전용)_.

## 푸시 전송

Parse를 사용하여 푸시 알림을 보내는 방법에는  [채널](#sending-channels)과 [고급 타게팅](#sending-queries), 두 가지가 있습니다. 채널은 간단하고 사용하기 쉬운 푸시 전송 모델을 제공하는 반면 고급 타게팅은 보다 강력하고 유연한 모델을 제공합니다. 둘 다 서로 완전히 호환되며 이 섹션에서 다뤄집니다.

알림 전송은 주로 웹 콘솔이나 REST API, Cloud Code에서 수행됩니다. 하지만 기존 클라이언트 SDK에서 푸시 알림을 트리거할 수도 있습니다. 클라이언트 SDK에서 알림을 보내려는 경우 Parse 앱의 Push Notifications 설정에서 **Client Push Enabled** 를 설정해야 합니다.

![](/images/docs/client_push_settings.png)

### 채널 사용

알림을 보내는 가장 간단한 방법은 채널을 사용하는 것입니다. 채널을 사용하면 푸시 전송에 게시자-가입자 모델을 사용할 수 있습니다. 기기가 하나 이상의 채널에 가입하는 것으로 시작하고 나중에 가입자에게 알림이 전송될 수 있습니다. 지정된 `Installation`으로 가입된 채널은 `Installation` 개체의 `channels` 필드에 저장됩니다.

#### 채널에 가입

채널은 글자로 시작하는 문자열로 식별되며 영숫자와 밑줄, 대시로 구성됩니다. 사용하기 전에 명시적으로 생성할 필요가 없으며 각 `Installation`에서 한 번에 원하는 수의 채널에 가입할 수 있습니다.

채널 가입은 싱글 메서드 호출을 사용하여 할 수 있습니다. 예를 들어 야구 점수 앱에서 다음을 수행할 수 있습니다.

```java
// When users indicate they are Giants fans, we subscribe them to that channel.
PushService.subscribe(context, "Giants", YourActivity.class);
```

제공한 Activity 클래스는 사용자가 이 채널에서 알림에 응답할 때 실행할 활동을 지정합니다. 이렇게 하면 다른 채널의 푸시 알림을 다른 방법으로 처리할 수 있습니다.

&quot;Giants&quot; 채널에 가입하면 `Installation` 개체의 `channels` 필드가 업데이트되어야 합니다.

![](/images/docs/installation_channel.png)

채널 해지도 다음과 같이 쉽게 수행할 수 있습니다.

```java
// When users indicate they are no longer Giants fans, we unsubscribe them.
PushService.unsubscribe(context, "Giants");
```

다음을 사용하여 현재 기기가 가입된 채널 세트를 가져올 수도 있습니다.

```java
Set<String> setOfAllSubscriptions = PushService.getSubscriptions();
```

subscribe 메서드나 unsubscribe 메서드 모두 호출되는 스레드를 차단하지 않습니다. 가입 정보는 네트워크에 액세스할 수 없는 경우 기기의 디스크에 캐시되며 네트워크를 사용할 수 있게 되면 즉시 Parse Cloud로 전송됩니다. 따라서 가입을 관리할 때 스레딩이나 콜백에 대해 걱정할 필요가 없습니다.

#### 채널에 푸시 전송

Android SDK에서 다음 코드를 사용하여 &quot;Giants&quot; 채널의 모든 가입자에게 자이언트 팀이 방금 득점했다는 알림을 보낼 수 있습니다. 알림을 보내면 iOS 사용자에게는 알림 센터에 알림이 표시되고 Android 사용자에게는 시스템 트레이에 알림이 표시됩니다.

```java
ParsePush push = new ParsePush();
push.setChannel("Giants");
push.setMessage("The Giants just scored! It's now 2-2 against the Mets.");
push.sendInBackground();
```

한 개의 푸시 알림으로 여러 채널을 타게팅하려면 채널의 `LinkedList`를 사용할 수 있습니다.

```java
LinkedList<String> channels = new LinkedList<String>();
channels.add("Giants");
channels.add("Mets");
ParsePush push = new ParsePush();
push.setChannels(channels);
// Notice we use setChannels not setChannel
push.setMessage("The Giants won against the Mets 2-3.");
push.sendInBackground();
```

### 고급 타게팅 사용

채널은 많은 앱에 유용하지만 푸시 알림의 수신자를 좀 더 정확하게 타게팅해야 하는 경우가 있습니다. Parse에서는 [쿼리 API](/docs/android_guide#queries)를 사용하여 일부 `Installation` 개체에 대한 쿼리를 작성한 다음 푸시를 보낼 수 있습니다.

`ParseInstallation`이 `ParseObject`의 하위 클래스이므로 원하는 데이터를 저장하고 `Installation` 개체와 다른 개체 간의 관계를 생성할 수 있습니다. 이렇게 하면 사용자 층의 맞춤화된 동적 세그먼트로 푸시를 보낼 수 있습니다.

#### 설치 데이터 저장

Parse에 [다른 데이터](/docs/android_guide#objects)를 저장하는 것만큼 쉽게 `Installation` 개체에 데이터를 저장할 수 있습니다. 야구 앱에서는 사용자가 경기 결과와 점수, 부상 정보에 대한 푸시를 받을 수 있습니다.

```java
// Store app language and version
ParseInstallation installation = ParseInstallation.getCurrentInstallation();
installation.put("scores",true);
installation.put("gameResults",true);
installation.put("injuryReports",true);
installation.saveInBackground();
```

`Installation` 개체와 Parse에 저장된 다른 클래스 사이에 관계를 생성할 수도 있습니다. 특정 사용자에게 설치를 연결하려면 현재 사용자를 `ParseInstallation`에 저장하면 됩니다.

```java
// Associate the device with a user
ParseInstallation installation = ParseInstallation.getCurrentInstallation();
installation.put("user",ParseUser.getCurrentUser());
installation.saveInBackground();
```

#### 쿼리에 푸시 전송

`Installation` 개체에 데이터를 저장한 뒤 `PFQuery`를 사용하여 일부 기기를 타게팅할 수 있습니다. `Installation` 쿼리는 다른 [Parse 쿼리](/docs/android_guide#queries)와 마찬가지로 작동하지만 이를 생성하기 위해 특별한 정적 메서드 `ParseInstallation.getQuery()`를 사용합니다. 또한 알림을 보내기 전에 이 쿼리를 `PFPush` 개체에 설정합니다.

```java
// Create our Installation query
ParseQuery pushQuery = ParseInstallation.getQuery();
pushQuery.whereEqualTo("injuryReports", true);

// Send push notification to query
ParsePush push = new ParsePush();
push.setQuery(pushQuery);
// Set our Installation query
push.setMessage("Willie Hayes injured by own pop fly.");
push.sendInBackground();
```

채널을 쿼리와 함께 사용할 수도 있습니다. 다음과 같이 &quot;Giants&quot; 채널의 모든 가입자에게 푸시를 보내지만 점수 업데이트를 원하는 가입자로 필터링할 수 있습니다.

```java
// Create our Installation query
ParseQuery pushQuery = ParseInstallation.getQuery();
pushQuery.whereEqualTo("channels", "Giants");
// Set the channel
pushQuery.whereEqualTo("scores", true);

// Send push notification to query
ParsePush push = new ParsePush();
push.setQuery(pushQuery);
push.setMessage("Giants scored against the A's! It's now 2-2.");
push.sendInBackground();
```

`Installation` 클래스의 다른 개체에 관계를 저장하는 경우 쿼리에서 이를 사용할 수 있습니다. 예를 들어 다음과 같이 지정된 위치 근처의 모든 사용자에게 푸시 알림을 보낼 수 있습니다.

```java
// Find users near a given location
ParseQuery userQuery = ParseUser.getQuery();
userQuery.whereWithinMiles("location", stadiumLocation, 1.0);

// Find devices associated with these users
ParseQuery pushQuery = ParseInstallation.getQuery();
pushQuery.whereMatchesQuery("user", userQuery);

// Send push notification to query
ParsePush push = new ParsePush();
push.setQuery(pushQuery);
// Set our Installation query
push.setMessage("Free hotdogs at the Parse concession stand!");
push.sendInBackground();
```

## 전송 옵션

푸시 알림은 단순히 메시지를 전송하는 일 외에 더 많은 것을 할 수 있습니다. Android에서는 보내려는 사용자 지정 데이터와 받으면 시작할 `Intent`도 푸시에 포함할 수 있습니다. 또한 시간에 민감한 경우 알림에 만기일을 설정할 수 있습니다.

### 알림 사용자 지정

메시지뿐 아니라 더 많은 것을 보내려면 `JSONObject`를 사용하여 모든 데이터를 패키지에 포함해야 합니다. Android에는 특별한 의미가 있는 예약된 필드가 있습니다.

*   **`alert`**: 알림 메시지입니다.
*   **`badge`**: _(iOS에만 해당)_ 앱 아이콘의 오른쪽 상단에 표시되는 값입니다. 이 필드를 값에 설정하거나, `Increment`에 설정하여 현재 값을 1씩 증가시킬 수 있습니다.
*   **`sound`**: _(iOS에만 해당)_ 앱 번들에 있는 사운드 파일의 이름입니다.
*   **`content-available`**: _(iOS에만 해당)_ [뉴스스탠드](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html) 앱이나 [iOS7에 도입된](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10) 원격 알림 백그라운드 모드(&quot;백그라운드 푸시&quot;라고도 함)를 사용하는 앱을 작성하는 경우 이 값을 1로 설정하여 백그라운드 다운로드를 트리거할 수 있습니다.
*   **`action`**: _(Android에만 해당)_ 푸시를 받으면 `Intent`가 시작됩니다. `title` 또는 `alert` 값을 지정하지 않으면 `Intent`가 시작되지만 사용자에게 알림이 표시되지 않습니다.
*   **`title`**: _(Android, Windows 8 및 Windows Phone 8에만 해당)_ Android 시스템 트레이나 Windows 토스트 알림에 표시되는 값입니다.

예를 들어 현재 배지 번호를 1씩 증가시키고 사용자 지정 사운드를 재생하는 알림을 보내려면 다음을 수행할 수 있습니다. Android 클라이언트에서 이러한 속성을 설정할 수는 있지만, 이 설정은 앱의 iOS 버전에서만 적용됩니다. Android 받는 사람에게는 배지 및 사운드 필드가 적용되지 않습니다.

```java
JSONObject data = new JSONObject("{\"alert\": \"The Mets scored!\",
                                  \"badge\": \"Increment\",
                                  \"sound\": \"cheering.caf);
ParsePush *push = new ParsePush();
push.setChannel("Mets");
push.setData(data);
push.sendPushInBackground();
```

이 딕셔너리에 자신만의 데이터를 지정할 수도 있습니다. [알림 수신](#receiving/Android) 섹션에 설명된 것처럼 `Intent`를 사용하면 알림을 수신할 때 사용자 지정 처리를 수행할 수 있습니다. 알림에 설정된 데이터에도 액세스할 수 있습니다.

```java
JSONObject data = new JSONObject("{\"action\": \"com.example.UPDATE_STATUS\",
                                  \"name\": \"Vaughn\",
                                  \"newsItem\": \"Man bites dog\""}));
ParsePush *push = new ParsePush();
push.setQuery(injuryReportsQuery);
push.setChannel("Indians");
push.setData(data);
push.sendPushInBackground();
```

### 만기일 설정

사용자의 기기가 꺼져있거나 인터넷에 연결되어 있지 않을 때에는 푸시 알림이 전달되지 않습니다. 시간에 민감한 알림이 있는 경우 만기일을 설정할 수 있습니다. 이렇게 하면 더 이상 관련이 없는 정보를 불필요하게 사용자에게 알리지 않습니다.

`ParsePush` 클래스에서 제공하는 두 가지 메서드로 알림에 만기일을 설정할 수 있습니다. 첫 번째는 `setExpirationTime`으로, 이 메서드는 Parse에서 알림 전송을 중지해야 할 때를 지정하는 `time`(UNIX epoch 시간)을 사용합니다.

```java
// Send push notification with expiration date
ParsePush push = new ParsePush();
push.setExpirationTime(1424841505);
push.setQuery(everyoneQuery);
push.setMessage("Season tickets on sale until February 25th");
push.sendPushInBackground();
```

하지만 이 메서드에는 주의해야 할 사항이 있습니다. 기기 시계의 정확성이 보장되지 않으므로 부정확한 결과가 발생할 수 있습니다. 이런 이유로 `ParsePush` 클래스는 `timeInterval`(초)을 허용하는 `setExpirationTimeInterval` 메서드도 제공합니다. 알림은 지정된 간격이 경과한 후 만료됩니다.

```java
// Create time interval
long weekInterval = 60*60*24*7; // 1 week

// Send push notification with expiration interval
ParsePush push = new ParsePush();
push.setExpirationTimeInterval(weekInterval);
push.setQuery(everyoneQuery);
push.setMessage("Season tickets on sale until next week!");
push.sendPushInBackground();
```

### 플랫폼별 타게팅

플랫폼 간 앱을 빌드하는 경우 특정 운영 체제의 기기만 타게팅하고 싶을 수 있습니다. 고급 타게팅을 사용하면 대상 기기를 필터링할 수 있습니다.

다음 예에서는 Android와 iOS, Windows 8 사용자에게 서로 다른 알림을 보냅니다.

```java
ParseQuery query = ParseInstallation.getQuery();
query.whereEqualTo("channels", "suitcaseOwners");

// Notification for Android users
query.whereEqualTo("deviceType", "android");
ParsePush androidPush = new ParsePush();
androidPush.setMessage("Your suitcase has been filled with tiny robots!");
androidPush.setQuery(query);
androidPush.sendPushInBackground();

// Notification for iOS users
query.whereEqualTo("deviceType", "android");
ParsePush iOSPush = new ParsePush();
iOSPush.setMessage("Your suitcase has been filled with tiny apples!");
iOSPush.setQuery(query);
iOSPush.sendPushInBackground();

// Notification for Windows 8 users
query.whereEqualTo("deviceType", "winrt");
ParsePush winPush = new ParsePush();
winPush.setMessage("Your suitcase has been filled with tiny glass!");
winPush.setQuery(query);
winPush.sendPushInBackground();

// Notification for Windows 8 users
query.whereEqualTo("deviceType", "winrt");
ParsePush winPush = new ParsePush();
winPush.setMessage("Your suitcase has been filled with tiny glass!");
winPush.setQuery(query);
winPush.sendPushInBackground();

// Notification for Windows Phone 8 users
query.whereEqualTo("deviceType", "winphone");
ParsePush wpPush = new ParsePush();
wpPush.setMessage("Your suitcase is very hip; very metro.");
wpPush.setQuery(query);
wpPush.sendPushInBackground();
```

## 푸시 예약

현재 Android SDK에서는 예약된 푸시 알림 전송이 지원되지 않습니다. [REST API](#scheduled/REST), [JavaScript SDK](#scheduled/JavaScript) 또는 웹 콘솔을 참조하세요.

## 푸시 수신

푸시 알림을 수신하면 &quot;제목&quot;이 시스템 트레이에 표시되고 &quot;메시지&quot;가 해당 푸시의 콘텐츠로 표시됩니다. Android에서는 이외에도 열린 푸시 알림을 처리하는 `Activity`와 알림을 받으면 백그라운드에서 시작되는 `Intent`를 지정할 수 있습니다.

[Android 푸시 QuickStart](/apps/quickstart_push)를 완료하여 앱에서 푸시를 수신하도록 설정하세요. Quickstart에서는 GCM을 지원하지 않는 기기를 비롯해 모든 Android 기기에 대한 푸시를 설정하는 방법을 설명합니다. GCM 지원 기기로만 푸시하려는 경우에는 `AndroidManifest.xml`에서 다음 요소를 삭제할 수 있습니다.

*   `com.parse.ParseBroadcastReceiver`의 `receiver` 요소(`BOOT_COMPLETED` 및 `USER_PRESENT`에 대한 인텐트 필터 포함)*   `android.permission.RECEIVE_BOOT_COMPLETED`의 `permission` 요소

Quickstart에 설명된 대로 `com.parse.PushService`의 요소를 비롯한 다른 요소도 모두 필요합니다.

일부 Android 에뮬레이터(Google API 지원이 없는 에뮬레이터)는 GCM을 지원하지 않으므로 이 유형의 구성을 사용하는 에뮬레이터에서 앱을 테스트하는 경우에는 Google API가 설치된 에뮬레이터 이미지를 선택하세요.

### 활동을 사용하여 응답

사용자가 푸시 알림을 열 때 시작할 `Activity`를 지정할 수 있습니다. [채널](#sending-channels/Android)을 사용할 경우 subscribe 메서드 호출에서 이 `Activity`를 추가합니다.

```java
PushService.subscribe(context, "Giants", YourActivity.class);
```

[고급 타게팅](#sending-queries)을 사용할 경우 사용할 기본 `Activity`를 지정할 수 있습니다.

```java
PushService.setDefaultPushCallback(context, YourActivity.class);
```

### 인텐트를 사용하여 응답

푸시 알림을 받을 때 백그라운드에서 시작할 `Intent`를 지정할 수도 있습니다. 인텐트를 사용하면 앱에서 알림에 대해 사용자 지정 처리를 수행할 수 있으며 시스템 트레이 메시지를 표시하도록 선택했는지 여부와 상관없이 인텐트를 사용할 수 있습니다. 사용자 지정 알림 처리를 구현하려면 푸시 알림 데이터 딕셔너리에서 `Action` 항목을 시작할 `Intent` 활동으로 설정합니다. Android 가이드라인에는 활동 앞에 패키지 이름을 붙여 실행 중인 다른 앱과의 네임스페이스 충돌을 방지하는 것이 좋다고 나옵니다.

다음은 [앞에서](#options-data) 살펴본 예입니다.

```java
JSONObject data = new JSONObject("{\"action\": \"com.example.UPDATE_STATUS\",
                                  \"name\": \"Vaughn\",
                                  \"newsItem\": \"Man bites dog\""}));
ParsePush *push = new ParsePush();
push.setQuery(injuryReportsQuery);
push.setChannel("Angels");
push.setData(data);
push.sendPushInBackground();
```

코드가 `com.example` 패키지에 있고 `com.example.UPDATE_STATUS` 활동에 대한 수신기를 등록하려는 경우, `AndroidManifest.xml` 파일에서 앞에서 만든 `ParseBroadcastReceiver` 블록 끝의 바로 뒤에 다음 XML을 추가할 수 있습니다.

```html
<receiver android:name="com.example.MyCustomReceiver" android:exported="false">
  <intent-filter>
      <action android:name="com.example.UPDATE_STATUS" />
  </intent-filter>
</receiver>
```

이 사용자 지정 수신기는 활동 매개변수가 `com.example.UPDATE_STATUS`인 푸시 알림을 받을 때마다 호출됩니다. 보안을 위해 Parse SDK에서는 앱 내의 수신기만 이 인텐트를 처리할 수 있도록 합니다. 추가로 `<receiver>` 요소에서 `android:exported` 특성을 설정하여 다른 앱이 수신기에 푸시를 보내지 못하게 해야 합니다.

수신기에 전달되는 `Intent` 개체에는 두 개의 유용한 매핑을 사용하는 추가 `Bundle`이 포함됩니다. `"com.parse.Channel"` 키는 메시지가 전달된 채널을 나타내는 문자열을 가리킵니다. `"com.parse.Data"` 키는 푸시 알림에서 설정된 `"data"` 딕셔너리의 JSON 인코딩된 값을 나타내는 문자열을 가리킵니다. 예를 들어 다음 코드는 JSON 푸시 알림을 분석하고 Android 에뮬레이터 콘솔에 기록합니다.

```java
public class MyCustomReceiver extends BroadcastReceiver {
    private static final String TAG = "MyCustomReceiver";

    @Override
    public void onReceive(Context context, Intent intent) {
        try {
            String action = intent.getAction();
            String channel = intent.getExtras().getString("com.parse.Channel");
            JSONObject json = new JSONObject(intent.getExtras().getString("com.parse.Data"));
            Log.d(TAG, "got action " + action + " on channel " + channel + " with:");
            Iterator itr = json.keys();
            while (itr.hasNext()) {
                String key = (String) itr.next();
                Log.d(TAG, "..." + key + " => " + json.getString(key));
            }
        } catch (JSONException e) {
            Log.d(TAG, "JSONException: " + e.getMessage());
        }
    }
}
```

### 푸시 및 앱 오픈 횟수 추적

시간이 지남에 따른 사용자의 참여와 푸시 알림의 효과를 추적하기 위해 `ParseAnalytics` 클래스에 일부 연결 기능이 제공됩니다.

푸시 알림에 `Activity`로 응답하는 경우에는 푸시 처리 `Activity`의 `onCreate` 메서드에 다음을 추가하세요. 이 경우 앱을 열은 시기와 앱을 트리거한 항목에 대한 정보를 수집할 수 있습니다. 사용자 지정 `BroadcastReceiver`를 구현하여 푸시에 응답하는 경우에는 대신 `onReceive`에 전달된 `Intent`를 사용하도록 코드를 조정하세요.

```java
ParseAnalytics.trackAppOpened(getIntent());
```

`trackAppOpened`에 `null` 매개변수를 지정하면 표준 열기 이벤트_만_ 추적합니다(예: `Intent`의 Parse 페이로드가 비어 있는 경우나 `null`을 명시적으로 전달하여 푸시를 무시하는 경우).

앱 오픈 횟수와 푸시 관련 오픈율은 앱의 대시보드에 제공됩니다.

## 문제 해결

푸시 알림 설정은 개발자에게 불편을 야기하는 경우가 많습니다. 과정이 복잡하고 진행하는 동안 문제가 발생합니다. 문제가 발생하면 다음 문제 해결 도움말을 사용해 보세요. 

*   [최신 SDK로 업그레이드하세요](/docs/downloads). Android에서 푸시 알림과 관련된 여러 일반적인 문제는 Parse의 최신 릴리스에서 해결되었습니다.
*   [Android 푸시 Quickstart](/apps/quickstart_push#android/native/existing)의 4단계와 6단계에 설명된 대로 `AndroidManifest.xml` 파일에 올바른 권한이 나열되어 있는지 확인하세요. 사용자 지정 수신기를 사용하는 경우 매니페스트 파일에서 등록할 때 올바른 `android:name` 속성과 올바른 인텐트 필터를 사용했는지 확인하세요.
*   올바른 앱 ID와 클라이언트 키를 사용했고 `Parse.initialize()`가 호출되는지 확인하세요. `Parse.initialize()`를 사용하면 서비스에서 수신하는 앱을 알 수 있습니다. 이 코드를 특정 활동의 `onCreate` 메서드가 아니라 `Application.onCreate`에 넣어 활성화 기술에 Parse 사용 방법을 알리는 것이 좋습니다.
*   기기에서 앱이 보내는 푸시 알림을 허용하도록 설정되어 있는지 확인합니다.
*   Parse Push 콘솔에서 사용자 수를 확인합니다. 예상 수신자 수와 일치하나요? 푸시가 잘못 타게팅되었을 수 있습니다.
*   에뮬레이터에서 테스트할 경우 프로젝트를 지우고 다시 만든 다음 AVD를 다시 시작해 보세요.*   `Parse.setLogLevel(Parse.LOG_LEVEL_VERBOSE)`을 사용하여 자세한 정보 로깅을 켜세요. 오류 메시지는 무슨 일이 일어나는지 아는 데 도움이 됩니다.
*   대시보드에 &quot;Finished (with error)&quot;라는 메시지가 표시되는 경우 자세한 정보 로그를 확인하세요. 기기에서 푸시를 수행하는 경우 대시보드에서 클라이언트 측 푸시가 활성화되어 있는지 확인하세요.
*   로그에서 &quot;Could not construct writer&quot;라는 오류 메시지나 손상된 파이프와 관련된 다른 문제가 표시될 수 있습니다. 이 경우 프레임워크에서 다시 연결하려고 계속 시도합니다. 이로 인해 앱이 충돌하면 안 됩니다.

