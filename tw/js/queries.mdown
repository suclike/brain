# 查詢

我們已經見過具有 `get` 的 `Parse.Query` 如何自 Parse 取回單一 `Parse.Object`。還有許多其他方式可以用 `Parse.Query` 擷取資料：您可以一次擷取許多物件、在您想擷取的物件上設立條件等等。

## 基本查詢

在許多情況下，`get` 的功能不夠強大，而無法指定欲擷取的物件。`Parse.Query` 提供多種擷取一系列物件的方式，而不只是單一物件。

一般模式是建立一個 `Parse.Query`，並對它設立條件，然後使用 `find` 擷取相符 `Parse.Object` 的 `Array`。舉例來說，若要擷取特定 `playerName` 的分數，請使用 `equalTo` 方法限制索引鍵的值。

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.equalTo("playerName", "Dan Stemkoski");
query.find({
  success: function(results) {
    alert("Successfully retrieved " + results.length + " scores.");
    // Do something with the returned Parse.Object values
    for (var i = 0; i < results.length; i++) {
      var object = results[i];
      alert(object.id + ' - ' + object.get('playerName'));
    }
  },
  error: function(error) {
    alert("Error: " + error.code + " " + error.message);
  }
});
```

## 查詢限制

有幾種方式可以在 `Parse.Query` 找到的物件加上限制。您可以利用 `notEqualTo` 篩選出具有特定鍵值組的物件：

```js
query.notEqualTo("playerName", "Michael Yabuti");
```

您可以設下多重限制，只有符合全部限制的物件才會出現在結果中。換句話說，就像是&quot;AND&quot;限制條件。

```js
query.notEqualTo("playerName", "Michael Yabuti");
query.greaterThan("playerAge", 18);
```

您可以透過設定 `limit` 限制結果的數目。依據預設，結果的限制為 100，但是任何從 1 到 1000 的數目都是有效的限制：

```js
query.limit(10); // limit to at most 10 results
```

如果您只想要一個結果，使用 `first` 或許比使用 `find` 更方便。

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.equalTo("playerEmail", "dstemkoski@example.com");
query.first({
  success: function(object) {
    // Successfully retrieved the object.
  },
  error: function(error) {
    alert("Error: " + error.code + " " + error.message);
  }
});
```

您可以透過設定 `skip` 略過第一個結果。這對分頁十分有用：

```js
query.skip(10); // skip the first 10 results
```

對數字和字串等可排序類型，您可以控制結果傳回的順序：

```js
// Sorts the results in ascending order by the score field
query.ascending("score");
// Sorts the results in descending order by the score field
query.descending("score");
```

針對可排序類型，您也可以在查詢中使用比較指令：

```js
// Restricts to wins < 50
query.lessThan("wins", 50);

// Restricts to wins <= 50
query.lessThanOrEqualTo("wins", 50);

// Restricts to wins > 50
query.greaterThan("wins", 50);

// Restricts to wins >= 50
query.greaterThanOrEqualTo("wins", 50);
```

如果您希望擷取符合多個不同值的物件，可以使用 `containedIn`（其中有提供可接受值的陣列）。這通常適合用於以單一查詢取代多個查詢。舉例來說，如果您想在特定清單中擷取玩家達到的分數：

```js
// Finds scores from any of Jonathan, Dario, or Shawn
query.containedIn("playerName",
                  ["Jonathan Walsh", "Dario Wunsch", "Shawn Simon"]);
```

如果您希望擷取的物件不符合多個值的任何一個，可以使用可接受值的陣列呼叫 `notContainedIn`。舉例來說，如果您想擷取清單之外玩家的分數：

```js
// Finds scores from anyone who is neither Jonathan, Dario, nor Shawn
query.notContainedIn("playerName",
                     ["Jonathan Walsh", "Dario Wunsch", "Shawn Simon"]);
```

如果您希望擷取具有特定索引鍵集的物件，可以使用 `exists`。相反地，如果您希望擷取不具有特定索引鍵集的物件，可以使用 `doesNotExist`。

```js
// Finds objects that have the score set
query.exists("score");

// Finds objects that don't have the score set
query.doesNotExist("score");
```

您可以使用 `matchesKeyInQuery` 方法取得符合條件的物件（其中某索引鍵符合另一個查詢所產生之物件集中某索引鍵的值）。舉例來說，如果您有一個含有運動隊伍的類別，並且在使用者類別中存放使用者的家鄉，則您可發出查詢，以找出當地球隊擁有獲勝紀錄之使用者的清單。該查詢看起來可能像：

```js
var Team = Parse.Object.extend("Team");
var teamQuery = new Parse.Query(Team);
teamQuery.greaterThan("winPct", 0.5);
var userQuery = new Parse.Query(Parse.User);
userQuery.matchesKeyInQuery("hometown", "city", teamQuery);
userQuery.find({
  success: function(results) {
    // results has the list of users with a hometown team with a winning record
  }
});
```

相反地，若要取得索引鍵不符合另一個查詢所產生之物件集中某索引鍵值的物件，請使用 `doesNotMatchKeyInQuery`。舉例來說，若要找出家鄉的球隊擁有敗戰紀錄的使用者：

```js
var losingUserQuery = new Parse.Query(Parse.User);
losingUserQuery.doesNotMatchKeyInQuery("hometown", "city", teamQuery);
losingUserQuery.find({
  success: function(results) {
    // results has the list of users with a hometown team with a losing record
  }
});
```

您可以利用索引鍵清單呼叫 `select`，限制傳回的欄位。若要擷取只包含 `score` 和 `playerName` 欄位的文件（還有像是 `objectId`、`createdAt` 和 `updatedAt` 的特殊內建欄位）：

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.select("score", "playerName");
query.find().then(function(results) {
  // each of results will only have the selected fields available.
});
```

在傳回物件上呼叫 `fetch`，可於稍後擷取剩餘欄位：

```js
query.first().then(function(result) {
  // only the selected fields of the object will now be available here.
  return result.fetch();
}).then(function(result) {
  // all fields of the object will now be available here.
});
```

## 陣列值查詢

對於具有陣列類型的索引鍵，您可以用下列方式找出索引鍵陣列值包含 2 的物件：

```js
// Find objects where the array in arrayKey contains 2.
query.equalTo("arrayKey", 2);
```

您也可以利用下列方式找出索引鍵陣列值包含 2、3 和 4 元素的物件：

```js
// Find objects where the array in arrayKey contains all of the elements 2, 3, and 4.
query.containsAll("arrayKey", [2, 3, 4]);
```

## 字串值查詢

使用 `startsWith` 限制以特定字串開頭的字串值。與 MySQL LIKE 運算子相似，因為已經編制索引，所以對大型資料集而言很有效：

```js
// Finds barbecue sauces that start with "Big Daddy's".
var query = new Parse.Query(BarbecueSauce);
query.startsWith("name", "Big Daddy's");
```

## 關聯性查詢

有幾種方式可以查詢關聯性資料。如果您希望擷取欄位符合特定 `Parse.Object` 的物件，您可以使用 `equalTo`，就如其他資料類型一樣。舉例而言，如果每個 `Comment` 在其 `post` 欄位中都有一個 `Post` 物件，您可以針對特定 `Post` 擷取留言：

```js
// Assume Parse.Object myPost was previously created.
var query = new Parse.Query(Comment);
query.equalTo("post", myPost);
query.find({
  success: function(comments) {
    // comments now contains the comments for myPost
  }
});
```

如果您希望擷取欄位包含 `Parse.Object` 符合不同查詢的物件，可以使用 `matchesQuery`。請注意，預設限制 100 與最高限制 1000 同樣適用於內部查詢，因此在處理大型資料集時，您可能需要小心地建構您的查詢，以取得您想要的行為。若要尋找圖文貼文的留言，您可以這樣做：

```js
var Post = Parse.Object.extend("Post");
var Comment = Parse.Object.extend("Comment");
var innerQuery = new Parse.Query(Post);
innerQuery.exists("image");
var query = new Parse.Query(Comment);
query.matchesQuery("post", innerQuery);
query.find({
  success: function(comments) {
    // comments now contains the comments for posts with images.
  }
});
```

如果您希望擷取欄位包含 `Parse.Object` 符合相同查詢的物件，可以使用 `doesNotMatchQuery`。若要尋找沒有圖文貼文的留言，您可以這樣做：

```js
var Post = Parse.Object.extend("Post");
var Comment = Parse.Object.extend("Comment");
var innerQuery = new Parse.Query(Post);
innerQuery.exists("image");
var query = new Parse.Query(Comment);
query.doesNotMatchQuery("post", innerQuery);
query.find({
  success: function(comments) {
    // comments now contains the comments for posts without images.
  }
});
```

您也可以透過 `objectId` 執行關聯性查詢：

```js
var post = new Post();
post.id = "1zEcyElZ80";
query.equalTo("post", post);
```

在部分情況下，您可以在一次查詢中傳回多種相關物件。您可以利用 `include` 方法執行此操作。舉例來說，假設您正在擷取最後十則留言，而且希望同時擷取與留言相關的貼文：

```js
var query = new Parse.Query(Comment);

// Retrieve the most recent ones
query.descending("createdAt");

// Only retrieve the last ten 
query.limit(10);

// Include the post data with each comment
query.include("post");

query.find({
  success: function(comments) {
    // Comments now contains the last ten comments, and the "post" field
    // has been populated. For example
    for (var i = 0; i < comments.length; i++) 
      // This does not require a network access.
      var post = comments[i].get("post");
    }
  }
});
```

您也可以使用點標記法進行多層次查詢。如果您希望加入留言的貼文與貼文的作者，您可以這樣做：

```js
query.include(["post.author"]);
```

透過多次呼叫 `include`，您可以發出包含多個欄位的查詢。這個功能也可以與 Parse.Query 協助程式一起使用，像是 `first` 和 `get`。

## 物件計數

如果您只需要計算有多少符合查詢的物件，但是不需要擷取所有符合的物件，您可以使用 `count` 取代 `find`。舉例來說，若要計算某特定玩家已經進行了幾場遊戲：

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.equalTo("playerName", "Sean Plott");
query.count({
  success: function(count) {
    // The count request succeeded. Show the count
    alert("Sean has played " + count + " games");
  },
  error: function(error) {
    // The request failed
  }
});
```

對於超過 1000 個物件的類別，計算作業會受到逾時的限制。這可能會固定出現逾時錯誤，或傳回近似正確的結果。因此，比較好的做法是在設計您的應用程式時，避免這種計算作業。

## 複合查詢

如果您希望尋找符合數個查詢其中之一的物件，可以使用 `Parse.Query.or` 方法建構傳入查詢的&quot;OR&quot;查詢。例如，如果您希望尋找勝場數多或勝場數少的玩家，可以這樣做：

```js
var lotsOfWins = new Parse.Query("Player");
lotsOfWins.greaterThan("wins", 150);

var fewWins = new Parse.Query("Player");
fewWins.lessThan("wins", 5);

var mainQuery = Parse.Query.or(lotsOfWins, fewWins);
mainQuery.find({
  success: function(results) {
    // results contains a list of players that either have won a lot of games or won only a few games.
  },
  error: function(error) {
    // There was an error.
  }
});
```

您可將其他限制作為'and'運轉子新增到新建的 `Parse.Query`。

請注意，我們並不支援複合查詢子查詢中的非篩選條件限制（例如，`limit`、`skip`、`ascending`/`descending`、`include`）。
