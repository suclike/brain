# 사용자

많은 앱의 핵심에는 사용자가 안전하게 정보에 액세스할 있도록 하는 사용자 계정의 개념이 있습니다. Parse에서는 사용자 계정 관리에 필요한 많은 기능을 자동으로 처리하는 `ParseUser`라는 전문화된 사용자 클래스를 제공합니다.

이 클래스로 앱에 사용자 계정 기능을 추가할 수 있습니다.

`ParseUser`는 `ParseObject`의 하위 클래스로서 유연한 스키마, 자동 지속 및 키 값 인터페이스 등 동일한 기능을 모두 포함하고 있습니다. 또한 `ParseObject`에 있는 모든 메서드가 `ParseUser`에도 있습니다. 단지 `ParseUser`에는 사용자 계정과 관련된 몇 가지 특별한 추가 기능이 있다는 차이가 있습니다.

## 속성

`ParseUser`에는 다음과 같이 `ParseObject`와 구분되는 여러 속성이 있습니다.

*   username: 사용자의 사용자 이름입니다(필수).
*   password: 사용자의 비밀번호입니다(가입 시 필수).
*   email: 사용자의 이메일 주소입니다(선택 사항).

사용자의 다양한 사용 사례를 설명할 때 각 값에 대해 자세히 안내하도록 하겠습니다. `username` 및 `email`을 setter를 사용하여 설정하는 경우에는 `put` 메서드를 사용하여 설정할 필요가 없습니다.

## 가입

앱에서 가장 먼저 하는 일은 사용자에게 가입을 요청하는 것입니다. 다음 코드는 일반적인 가입을 보여줍니다.

```java
ParseUser user = new ParseUser();
user.setUsername("my name");
user.setPassword("my pass");
user.setEmail("email@example.com");

// other fields can be set just like with ParseObject
user.put("phone", "650-253-0000");

user.signUpInBackground(new SignUpCallback() {
    public void done(ParseException e) {
        if (e == null) {
            // Hooray! Let them use the app now.
        } else {
            // Sign up didn't succeed. Look at the ParseException
            // to figure out what went wrong
        }
    }
});
```

이 호출은 Parse 앱에서 비동기식으로 새 사용자를 만듭니다. 사용자를 만들기 전에 사용자 이름과 이메일이 고유한지 확인합니다. 또한 비밀번호를 클라우드에 안전하게 암호화하여 저장(hash)합니다. 비밀번호는 일반 텍스트로 저장되지 않으며 일반 텍스트로 클라이언트에게 다시 전송되지도 않습니다.

`saveInBackground` 메서드가 아니라 `signUpInBackground` 메서드를 사용합니다. 새로운 `ParseUser`는 항상 `signUpInBackground`(또는 `signUp`) 메서드를 사용하여 생성해야 합니다. 사용자에 대한 이후 업데이트는 `save`를 호출하여 수행할 수 있습니다.

`signUpInBackground` 메서드는 오류 다시 전달 기능 및 동기 버전과 함께 다양하게 제공됩니다. 평소처럼 가능하면 앱의 UI를 차단하지 않도록 비동기 버전을 사용하는 것이 좋습니다. 이러한 특별한 메서드에 대한 자세한 내용은 [API 문서](/docs/android/)를 참조하세요.

가입을 완료하지 못한 경우 반환된 오류 개체를 읽어야 합니다. 대개의 경우 이미 다른 사용자가 사용자 이름이나 이메일을 사용하기 때문일 가능성이 높습니다. 이에 대해 사용자에게 명확하게 설명하고 다른 사용자 이름을 사용하도록 요청해야 합니다.

이메일 주소를 사용자 이름으로 사용해도 됩니다. 사용자에게 이메일을 입력하도록 요청하되 username 속성에 작성하도록 요청하세요. 그러면 `ParseUser`가 정상적으로 작동합니다. 비밀번호 재설정 섹션에서 이를 처리하는 방법에 대해 검토하겠습니다.

## 로그인

물론 사용자에게 가입을 허용한 후에는 계정에 로그인할 수 있도록 해야 합니다. 이렇게 하려면 `logInInBackground` 클래스 메서드를 사용할 수 있습니다.

```java
ParseUser.logInInBackground("Jerry", "showmethemoney", new LogInCallback() {
    public void done(ParseUser user, ParseException e) {
        if (user != null) {
            // Hooray! The user is logged in.
        } else {
            // Signup failed. Look at the ParseException to see what happened.
        }
    }
});
```

## 이메일 인증

앱의 설정에서 이메일 인증을 활성화하면 앱에서 이메일 주소가 확인된 사용자에 대해 앱 환경 중 일부를 예약할 수 있습니다. 이메일 인증에서는 `ParseUser` 개체에 `emailVerified` 키를 추가합니다. `ParseUser`의 `email`을 설정하거나 수정하면 `emailVerified`가 `false`로 설정됩니다. 그러면 Parse에서는 `emailVerified`를 `true`로 설정하는 링크를 사용자에게 이메일로 보냅니다.

고려할 `emailVerified` 상태는 세 가지입니다.

1.  `true` - 사용자가 Parse에서 이메일로 받은 링크를 클릭하여 이메일 주소를 확인했습니다. 사용자 계정을 처음 만들 때 `ParseUsers`는 값이 `true`일 수 없습니다.
2.  `false` - `ParseUser` 개체를 마지막으로 가져올 때 사용자가 자신의 이메일 주소를 확인하지 않았습니다. `emailVerified`가 `false`인 경우 `ParseUser`에 대해 `fetch()`를 호출해보세요.
3.  _missing_ - 이메일 인증이 꺼져 있을 때 `ParseUser`를 만들었거나 `ParseUser`에게 `email`이 없습니다.

## 현재 사용자

사용자가 앱을 열 때마다 로그인해야 한다면 귀찮을 겁니다. 캐시된 `currentUser` 개체를 사용하면 이 불편함을 없앨 수 있습니다.

가입 또는 로그인 메서드를 사용할 때마다 사용자가 디스크에 캐시됩니다. 이 캐시를 세션으로 처리할 수 있으며, 사용자가 로그인한 것으로 자동으로 간주됩니다.

```java
ParseUser currentUser = ParseUser.getCurrentUser();
if (currentUser != null) {
    // do stuff with the user
} else {
    // show the signup or login screen
}
```

현재 사용자를 로그아웃하여 지울 수 있습니다.

```java
ParseUser.logOut();
ParseUser currentUser = ParseUser.getCurrentUser(); // this will now be null
```

## 익명 사용자

데이터와 개체를 개별 사용자와 연결할 수 있는 기능은 매우 유용하지만, 사용자로 하여금 사용자 이름과 비밀번호를 지정하게 하지 않고 이렇게 할 수 있었으면 하는 경우도 있습니다.

익명 사용자는 사용자 이름과 비밀번호 없이 만들 수 있지만 다른 `ParseUser`와 동일한 기능을 모두 갖는 사용자입니다. 익명 사용자는 로그아웃하면 폐기되며, 해당 데이터에 더 이상 액세스할 수 없습니다.

익명 사용자는 `ParseAnonymousUtils`를 사용하여 만들 수 있습니다.

```java
ParseAnonymousUtils.logIn(new LogInCallback() {
    @Override
    public void done(ParseUser user, ParseException e) {
        if (e != null) {
            Log.d("MyApp", "Anonymous login failed.");
        } else {
            Log.d("MyApp", "Anonymous user logged in.");
        }
    }
});
```

익명 사용자를 일반 사용자로 변환하려면 사용자 이름과 비밀번호를 설정한 다음 `signUp()`을 호출하거나 [Facebook](#fbusers) 또는 [Twitter](#twitterusers)와 같은 서비스에 로그인하거나 이 서비스와 연결합니다. 변환된 사용자는 원래 데이터를 모두 보유합니다.  현재 사용자가 익명 사용자인지 확인하려면 `ParseAnonymousUtils.isLinked()`를 확인할 수 있습니다.

```java
if (ParseAnonymousUtils.isLinked(ParseUser.getCurrentUser())) {
    enableSignUpButton();
} else {
    enableLogOutButton();
}
```

또한 익명 사용자는 네트워크 요청 없이도 자동으로 만들어질 수 있으므로, 앱이 시작되는 즉시 사용자 작업을 시작할 수 있습니다.  앱 시작 시 자동 익명 사용자 만들기를 활성화하는 경우 `ParseUser.getCurrentUser()`가 `null`이 아닙니다. 사용자 또는 사용자와 관련된 개체를 처음으로 저장할 때 사용자가 클라우드에 자동으로 만들어집니다.  이 때까지 사용자의 개체 ID는 `null`입니다.  자동 사용자 만들기를 활성화하면 데이터가 사용자와 문제 없이 연결됩니다.  예를 들어 `Application.onCreate()` 메서드에서 다음을 작성할 수 있습니다.

```java
ParseUser.enableAutomaticUser();
ParseUser.getCurrentUser().increment("RunCount");
ParseUser.getCurrentUser().saveInBackground();
```

## 현재 사용자 설정

인증 경로를 자체적으로 만들었거나 서버 측에서 사용자를 로그인시킨 경우 이제 클라이언트에 세션 토큰을 전달하고 `become` 메서드를 사용할 수 있습니다. 이 메서드는 현재 사용자를 설정하기 전에 세션 토큰이 유효한지 확인합니다.

```java
ParseUser.becomeInBackground("session-token-here", new LogInCallback() {
    public void done(ParseUser user, ParseException e) {
        if (user != null) {
            // The current user is now set to user.
        } else {
            // The token could not be validated.
        }
    }
});
```

## 사용자 개체에 대한 보안

`ParseUser` 클래스는 기본적으로 보호됩니다. `ParseUser`에 저장된 데이터는 해당 사용자만 수정할 수 있습니다. 기본적으로 모든 클라이언트가 데이터를 읽을 수는 있습니다. 따라서 일부 `ParseUser` 개체는 인증되고 수정할 수 있지만, 다른 개체는 읽기 전용입니다.

특히, `logIn` 또는 `signUp`과 같은 인증된 메서드를 사용하여 `ParseUser`를 가져오지 않는 경우 `save` 또는 `delete` 유형 메서드를 호출할 수 없습니다. 따라서 사용자는 자신의 데이터만 수정할 수 있습니다.

다음 코드는 이러한 보안 정책을 보여줍니다.

```java
ParseUser user = ParseUser.logIn("my_username", "my_password");
user.setUsername("my_new_username"); // attempt to change username
user.saveInBackground(); // This succeeds, since the user was authenticated on the device

// Get the user from a non-authenticated manner
ParseQuery<ParseUser> query = ParseUser.getQuery();
query.getInBackground(user.getObjectId(), new GetCallback<ParseUser>() {
    public void done(ParseUser object, ParseException e) {
        object.setUsername("another_username");
        // This will throw an exception, since the ParseUser is not authenticated
        object.saveInBackground();
    }
});
```

`getCurrentUser()`에서 가져온 `ParseUser`는 항상 인증됩니다.

`ParseUser`가 인증되었는지 확인해야 하는 경우 `isAuthenticated()` 메서드를 호출할 수 있습니다. 인증된 메서드를 통해 가져온 `ParseUser` 개체에서는 `isAuthenticated()`를 확인할 필요가 없습니다.

## 다른 개체에 대한 보안

`ParseUser`에 적용되는 보안 모델을 다른 개체에도 동일하게 적용할 수 있습니다. 어느 개체든 개체를 읽을 수 있는 사용자와 개체를 수정할 수 있는 사용자를 지정할 수 있습니다. 이러한 유형의 보안을 지원하려면 각 개체에 `ParseACL` 클래스로 구현되는 [액세스 제어 목록](http://en.wikipedia.org/wiki/Access_control_list)이 있어야 합니다.

`ParseACL`을 가장 간단히 사용하는 방법은 싱글 사용자만 개체를 읽거나 쓸 수 있도록 지정합니다. 이러한 개체를 만들려면 로그인한 `ParseUser`가 있어야 합니다. 그러면 `new ParseACL(user)`에서 해당 사용자에 대한 액세스를 제한하는 `ParseACL`을 생성합니다. 개체의 ACL은 다른 속성처럼 개체를 저장할 때 업데이트됩니다. 따라서 현재 사용자만 액세스할 수 있는 비공개 노트를 만들려면 다음과 같이 하세요.

```java
ParseObject privateNote = new ParseObject("Note");
privateNote.put("content", "This note is private!");
privateNote.setACL(new ParseACL(ParseUser.getCurrentUser()));
privateNote.saveInBackground();
```

그러면 이 노트는 현재 사용자만 자신이 로그인한 모든 기기에서 액세스할 수 있습니다. 이 기능은 개인 todo 목록과 같이 여러 기기의 사용자 데이터에 대한 액세스를 활성화하려는 앱에 유용합니다.

권한을 사용자 단위로 부여할 수도 있습니다. `setReadAccess` 및 `setWriteAccess`를 사용하여 `ParseACL`에 권한을 개별적으로 추가할 수 있습니다. 예를 들어 그룹의 몇몇 사용자에게 보낼 메시지가 있고, 각 사용자는 해당 메시지를 읽고 삭제할 권한이 있다고 가정해 보겠습니다.

```java
ParseObject groupMessage = new ParseObject("Message");
ParseACL groupACL = new ParseACL();
// userList is an Iterable<ParseUser> with the users we are sending this message to.
for (ParseUser user : userList) {
    groupACL.setReadAccess(user, true);
    groupACL.setWriteAccess(user, true);
}

groupMessage.setACL(groupACL);
groupMessage.saveInBackground();
```

또한 `setPublicReadAccess` 및 `setPublicWriteAccess`를 사용하여 모든 사용자에게 권한을 한 번에 부여할 수도 있습니다. 이 경우 메시지 게시판에 댓글 게시와 같은 패턴이 허용됩니다. 예를 들어 수정은 작성자만 할 수 있지만 누구나 읽을 수 있는 게시물을 만들려면 다음과 같이 하세요.

```java
ParseObject publicPost = new ParseObject("Post");
ParseACL postACL = new ParseACL(ParseUser.getCurrentUser());
postACL.setPublicReadAccess(true);
publicPost.setACL(postACL);
publicPost.saveInBackground();
```

사용자의 데이터가 기본적으로 보호되도록 하려면 새로 만들어지는 모든 `ParseObjects`에 적용할 기본 ACL을 설정할 수 있습니다.

```java
ParseACL.setDefaultACL(defaultACL, true);
```

위의 코드에서 setDefaultACL의 두 번째 매개변수는 Parse로 하여금 개체 생성 시 할당된 기본 ACL에서 그 당시 현재 사용자에게 읽기 및 쓰기 액세스를 허용하는지 확인하도록 합니다.  이 설정이 없으면 사용자가 로그인하거나 로그아웃할 때마다 기본 ACL을 재설정해야만 현재 사용자에게 액세스 권한이 적절히 부여됩니다.  이 설정이 있으면 다른 종류의 액세스 권한을 명시적으로 부여해야 하는 경우 외에는 현재 사용자에 대한 변경 사항을 무시해도 됩니다.

기본 ACL을 사용하면 일반 액세스 패턴을 따르는 앱을 쉽게 만들 수 있습니다. 예를 들어 Twitter와 같이 사용자 콘텐츠가 일반적으로 전 세계에 표시되는 앱은 기본 ACL을 다음과 같이 설정할 수 있습니다.

```java
ParseACL defaultACL = new ParseACL();
defaultACL.setPublicReadAccess(true);
ParseACL.setDefaultACL(defaultACL, true);
```

명시적 권한을 지정하지 않은 경우 사용자 자신만 사용자 데이터에 액세스할 수 있는 Dropbox와 같은 앱의 경우 현재 사용자에게만 액세스 권한이 지정되는 기본 ACL을 제공합니다.

```java
ParseACL.setDefaultACL(new ParseACL(), true);
```

Parse에 데이터를 기록하지만 사용자에게 해당 데이터에 대한 액세스 권한을 제공하지 않는 앱은 대신 현재 사용자에 대한 액세스를 거부하고 제한적 ACL을 제공합니다.

```java
ParseACL.setDefaultACL(new ParseACL(), false);
```

쓰기 권한이 없는 개체를 삭제하는 등과 같이 금지된 작업을 수행하면 `ParseException.OBJECT_NOT_FOUND` 오류 코드가 발생합니다. 보안을 위해 이 기능은 클라이언트에서 어떤 개체 ID는 있지만 보호되어 있고 어떤 개체 ID는 전혀 없는지를 구분하지 못하게 합니다.

## 비밀번호 재설정

실제로 시스템에 비밀번호를 도입하자마자 사용자가 비밀번호를 잊어버리기도 합니다. 이런 경우 라이브러리에서는 사용자가 비밀번호를 안전하게 재설정할 수 있는 방법을 제공합니다.

비밀번호 재설정 절차를 시작하려면 사용자에게 이메일 주소를 묻고 다음을 호출하세요.

```java
ParseUser.requestPasswordResetInBackground("myemail@example.com",
                                           new RequestPasswordResetCallback() {
    public void done(ParseException e) {
        if (e == null) {
            // An email was successfully sent with reset instructions.
        } else {
            // Something went wrong. Look at the ParseException to see what's up.
        }
    }
});
```

그러면 지정된 이메일을 사용자의 이메일 또는 username 필드와 일치시키려고 하고 사용자에게 비밀번호 재설정 이메일을 보냅니다. 이렇게 하면 사용자로 하여금 이메일을 사용자 이름으로 사용하도록 하거나 이메일을 별도로 수집하여 email 필드에 저장할 수 있습니다.

비밀번호 재설정 절차는 다음과 같습니다.

1.  사용자가 이메일을 입력하여 비밀번호를 재설정하도록 요청합니다.
2.  Parse에서 특별 비밀번호 재설정 링크가 포함된 이메일을 사용자 주소로 보냅니다.
3.  사용자가 재설정 링크를 클릭하면 새 비밀번호를 입력할 수 있는 특별한 Parse 페이지로 연결됩니다.
4.  사용자가 새 비밀번호를 입력합니다. 이제 사용자 비밀번호가 지정한 값으로 재설정되었습니다.

이 절차의 메시지에서는 이 앱을 Parse에서 만들 때 지정한 이름으로 앱을 참조합니다.

## 쿼리

사용자를 쿼리하려면 특별한 사용자 쿼리를 사용해야 합니다.

```java
ParseQuery<ParseUser> query = ParseUser.getQuery();
query.whereEqualTo("gender", "female");
query.findInBackground(new FindCallback<ParseUser>() {
    public void done(List<ParseUser> objects, ParseException e) {
        if (e == null) {
            // The query was successful.
        } else {
            // Something went wrong.
        }
    }
});
```

또한 `get`을 사용하여 `ParseUser`를 ID별로 가져올 수 있습니다.

## 연결

`ParseUser`와 관련된 연결은 즉시 작동합니다. 예를 들어 블로깅 앱을 만든다고 가정해 보겠습니다. 사용자의 새 게시물을 저장하고 이 사용자의 게시물을 모두 검색하려면 다음과 같이 하세요.

```java
ParseUser user = ParseUser.getCurrentUser();

// Make a new post
ParseObject post = new ParseObject("Post");
post.put("title", "My New Post");
post.put("body", "This is some great content.");
post.put("user", user);
post.saveInBackground();

// Find all posts by the current user
ParseQuery<ParseObject> query = ParseQuery.getQuery("Post");
query.whereEqualTo("user", user);
query.findInBackground(new FindCallback<ParseObject>() { ... });
```

## Facebook 사용자

Parse에서는 Facebook을 앱과 통합하는 간단한 방법을 제공합니다. Facebook SDK는 Parse SDK와 함께 사용할 수 있고 `ParseUser` 클래스와 통합되므로 사용자를 사용자의 Facebook ID에 쉽게 연결할 수 있습니다.

Parse의 Facebook 통합 기능을 사용하면 인증된 Facebook 사용자를 `ParseUser`와 연결할 수 있습니다. 코드 몇 줄만 사용하여 앱에 &quot;Facebook으로 로그인&quot; 옵션을 제공할 수 있고 사용자 데이터를 Parse에 저장할 수 있습니다.

### 설정

Facebook을 Parse와 함께 사용하려면 다음을 수행해야 합니다.

1.  아직 설치하지 않은 경우 [Facebook 앱을 설치](https://developers.facebook.com/apps)합니다.
2.  Parse 앱 설정 페이지에서 앱의 Facebook 앱 ID를 추가합니다.
3.  [Facebook SDK 시작하기](https://developers.facebook.com/docs/getting-started/facebook-sdk-for-android/3.0/)에 대한 Facebook 지침에 따라 Facebook SDK에 연결된 앱을 만듭니다.  6단계에 이르면 Facebook SDK 프로젝트를 연결하고 Facebook 앱 ID를 구성한 후 중지합니다. 가이드에 따라 Parse 사용자를 로그인 시 Facebook 계정과 연결할 수 있습니다.
4.  `Application.onCreate()`에서 Parse SDK를 초기화하는 위치에 다음을 추가합니다.
```java
ParseFacebookUtils.initialize("YOUR FACEBOOK APP ID");
```

Facebook의 Android SDK에서는 [Facebook의 공식 Android 앱](https://market.android.com/details?id=com.facebook.katana)이 설치된 기기에서 향상된 로그인 환경을 제공합니다. 이 경우 Facebook 로그인을 지원하는 앱 사용자가 기기에 이미 있는 로그인 정보를 사용하여 Facebook 앱을 통해 직접 로그인할 수 있습니다. Facebook 앱이 설치되지 않은 경우에는 기본 대화 상자 기반 인증이 사용됩니다. Facebook에서는 이 기능을 &quot;SSO(Single Sign-On)&quot;라고 하며, 이 기능을 사용하려면 호출 `Activity`에서 `finishAuthentication()`을 호출하도록 `onActivityResult()`를 재정의해야 합니다.

```java
@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    ParseFacebookUtils.finishAuthentication(requestCode, resultCode, data);
}
```

`Activity`에서 이미 `onActivityResult()`를 사용하는 경우 `activityCode` 매개변수를 사용하는 `link()` 및 `logIn()`의 버전을 호출하고 고유하다고 알려진 코드를 지정하여 `requestCode` 충돌을 방지할 수 있습니다.  그렇지 않으면 실제 기본 `activityCode`가 사용됩니다.

Facebook와 관련된 문제가 발생하는 경우 [공식 Android용 Facebook SDK 페이지](https://developers.facebook.com/android/)를 참조하면 유용합니다.

Parse는 Android용 Facebook SDK의 v3.0과 호환됩니다.

Parse 사용자에서 Facebook을 사용하는 방법은 기본적으로 (1) Facebook 사용자로 로그인하고 `ParseUser` 만들기 또는 (2) Facebook을 기존 `ParseUser`에 연결하는 두 가지입니다.

### 로그인 및 가입

`ParseFacebookUtils`에서는 `ParseUser`가 Facebook을 통해 로그인 또는 가입할 수 있는 방법을 제공합니다. 이렇게 하려면 `logIn()` 메서드를 사용합니다.

```java
ParseFacebookUtils.logIn(this, new LogInCallback() {
    @Override
    public void done(ParseUser user, ParseException err) {
        if (user == null) {
            Log.d("MyApp", "Uh oh. The user cancelled the Facebook login.");
        } else if (user.isNew()) {
            Log.d("MyApp", "User signed up and logged in through Facebook!");
        } else {
            Log.d("MyApp", "User logged in through Facebook!");
        }
    }
});
```

이 코드를 실행하면 다음이 수행됩니다.

1.  사용자에게 Facebook 로그인 대화 상자나 Facebook 앱이 생성한 프롬프트가 표시됩니다.
2.  사용자가 Facebook을 통해 인증하고 앱이 콜백을 받습니다.
3.  Parse SDK가 Facebook 데이터를 받고 `ParseUser`에 저장합니다. Facebook ID를 기반으로 하는 새 사용자인 경우 해당 사용자가 만들어집니다.
4.  `LogInCallback`이 해당 사용자에서 호출됩니다.

Facebook 로그인 대화 상자와 활동을 표시하려면 위에서 수행한 대로 현재 `Activity`를 지정해야 합니다(`Activity`에서 `logIn()`을 호출할 때 현재 활동은 `this`인 경우가 많음).

선택적으로 앱이 Facebook 사용자에게 요구할 읽기 권한을 지정하는 문자열 컬렉션을 지정할 수 있습니다.  이러한 문자열을 직접 지정하거나 Parse에서 `ParseFacebookUtils.Permissions` 클래스에 제공한 조건을 사용할 수 있습니다.  예:

```java
ParseFacebookUtils.logIn(Arrays.asList("email", Permissions.Friends.ABOUT_ME),
                         this, new LogInCallback() {
    @Override
    public void done(ParseUser user, ParseException err) {
        // Code to handle login.
    }
});
```

`ParseUser` 통합은 권한 없이도 바로 작동합니다(즉, `null` 또는 권한을 지정하지 않는 것도 완전히 허용됨). 로그인할 때는 읽기 권한만 사용할 수 있습니다. [추가 권한 요청](#fbusers-permissions)(읽기 또는 게시)에 대한 아래 설명서를 참조하세요. [권한에 대한 자세한 내용은 Facebook의 개발자 가이드를 참조하세요.](https://developers.facebook.com/docs/reference/api/permissions/)

<div class='tip info'><div>
  Facebook 사용자가 인증된 후 필요한 사용자의 데이터를 기록하는 일은 앱 개발자의 몫입니다. 이를 위해서는 [Facebook SDK를 통해 그래프 쿼리를 수행](https://parse.com/questions/how-can-i-find-parse-users-that-are-facebook-friends-with-the-current-user)해야 합니다.
</div></div>

### 연결

기존 `ParseUser`를 Facebook 계정에 연결하려면 다음과 같이 연결할 수 있습니다.

```java
if (!ParseFacebookUtils.isLinked(user)) {
    ParseFacebookUtils.link(user, this, new SaveCallback() {
        @Override
        public void done(ParseException ex) {
            if (ParseFacebookUtils.isLinked(user)) {
                Log.d("MyApp", "Woohoo, user logged in with Facebook!");
            }
        }
    });
}
```

연결할 때 수행되는 단계는 로그인과 매우 유사합니다. 로그인되면 기존 `ParseUser`가 Facebook 정보로 업데이트되는 점만 다릅니다. 나중에 Facebook을 통해 로그인하면 사용자가 자신의 기존 계정으로 로그인됩니다.

Facebook과 사용자의 연결을 취소하려면 다음과 같이 하면 됩니다.

```java
ParseFacebookUtils.unlinkInBackground(user, new SaveCallback() {
    @Override
    public void done(ParseException ex) {
        if (ex == null) {
            Log.d("MyApp", "The user is no longer associated with their Facebook account.");
        }
    }
});
```

또는 스레딩을 직접 처리하는 경우 다음과 같이 `unlink()`를 직접 호출할 수 있습니다.

```java
try 
    ParseFacebookUtils.unlink(user);
    Log.d("MyApp", "The user is no longer associated with their Facebook account.");
} catch (ParseException e) { }
```

### 권한 요청

Facebook SDK v3.0부터 읽기 및 게시 권한을 별도로 요청해야 합니다. `ParseFacebookUtils.logIn()` 및 `ParseFacebookUtils.link()`를 사용하면 읽기 권한만 요청할 수 있습니다. 추가 권한을 요청하려면 `ParseFacebookUtils.getSession().requestNewReadPermissions()` 또는 `ParseFacebookUtils.getSession().requestNewPublishPermissions()`를 호출할 수 있습니다. 새 권한 요청에 대한 자세한 내용은 [이러한 기능에 대한 Facebook의 API 설명서](https://developers.facebook.com/docs/reference/android/3.0/Session#requestNewReadPermissions(NewPermissionsRequest))를 참조하세요.

새 권한을 성공적으로 가져온 후 `ParseFacebookUtilities.saveLatestSessionData()`를 호출하세요. 그러면 세션 토큰에 대한 변경 사항이 `ParseUser`에 다시 저장되고 세션 데이터는 사용자가 어디서 로그인하든 사용자를 따릅니다.

### Facebook SDK와 Parse

Facebook Android SDK에서는 Facebook의 API와 상호 작용하는 여러 헬퍼 클래스를 제공합니다. 일반적으로 Request 클래스를 사용하여 로그인한 사용자 대신 Facebook과 상호 작용합니다. [Facebook SDK에 대한 자세한 내용은 여기를 참조하세요](https://developers.facebook.com/docs/reference/android/3.0).

Parse의 라이브러리에서는 사용자의 `Session` 개체를 관리합니다. `ParseFacebookUtils.getSession()`을 호출하여 세션 인스턴스에 액세스하면 Requests에 전달될 수 있습니다.

## Twitter 사용자

Parse에서는 Facebook과 마찬가지로 Twitter 인증을 앱에 통합하는 쉬운 방법을 제공합니다. Parse SDK에서는 Twitter 계정을 인증하고 `ParseUser`에 연결하는 간단한 방법을 제공합니다. 코드 몇 줄만 사용하여 앱에서 &quot;Twitter로 로그인&quot; 옵션을 제공할 수 있고 사용자 데이터를 Parse에 저장할 수 있습니다.

### 설정

Twitter를 Parse와 함께 사용하려면 다음을 수행해야 합니다.

1.  아직 설치하지 않은 경우 [Twitter 앱을 설치](https://dev.twitter.com/apps)합니다.
2.  Parse 앱 설정 페이지에서 앱의 Twitter 소비자 키를 추가합니다.
3.  Twitter 앱의 &quot;콜백 URL&quot;을 지정하라는 메시지가 표시되면 유효한 URL을 삽입하세요. 이 값은 iOS 또는 Android 앱에서 사용되지는 않지만 Twitter를 통한 인증을 활성화하기 위해 필요합니다.
4.  `Application.onCreate()`에서 Parse SDK를 초기화하는 위치에 다음을 추가합니다.
```java
ParseTwitterUtils.initialize("YOUR CONSUMER KEY", "YOUR CONSUMER SECRET");
```

Twitter와 관련된 문제가 발생하는 경우 [공식 Twitter 설명서](https://dev.twitter.com/docs)를 참조하면 유용합니다.

Parse 사용자에서 Twitter를 사용하는 방법은 기본적으로 (1) Twitter 사용자로 로그인하고 `ParseUser` 만들기 또는 (2) Twitter를 기존 `ParseUser`에 연결의 두 가지입니다.

### 로그인 및 가입

`ParseTwitterUtils`에서는 `ParseUser`가 Twitter를 통해 로그인 또는 가입할 수 있는 방법을 제공합니다. 이렇게 하려면 `logIn()` 메서드를 사용합니다.

```java
ParseTwitterUtils.logIn(this, new LogInCallback() {
    @Override
    public void done(ParseUser user, ParseException err) {
        if (user == null) {
            Log.d("MyApp", "Uh oh. The user cancelled the Twitter login.");
        } else if (user.isNew()) {
            Log.d("MyApp", "User signed up and logged in through Twitter!");
        } else {
            Log.d("MyApp", "User logged in through Twitter!");
        }
    }
});
```

이 코드를 실행하면 다음이 수행됩니다.

1.  사용자에게 Twitter 로그인 대화 상자가 표시됩니다.
2.  사용자가 Twitter를 통해 인증하고 앱이 콜백을 받습니다.
3.  Parse SDK가 Twitter 데이터를 받고 `ParseUser`에 저장합니다. Twitter 핸들을 기반으로 하는 새 사용자인 경우 해당 사용자가 만들어집니다.
4.  `LogInCallback`이 해당 사용자에서 호출됩니다.

Twitter 로그인 대화 상자와 활동을 표시하려면 위에서 수행한 대로 현재 `Context`가 지정해야 합니다(`Activity`에서 `logIn()`을 호출할 때 현재 컨텍스트는 `this`인 경우가 많음).

### 연결

기존 `ParseUser`를 Twitter 계정에 연결하려면 다음과 같이 연결할 수 있습니다.

```java
if (!ParseTwitterUtils.isLinked(user)) 
    ParseTwitterUtils.link(user, this, new SaveCallback() {
        @Override
        public void done(ParseException ex) {
            if (ParseTwitterUtils.isLinked(user)) {
                Log.d("MyApp", "Woohoo, user logged in with Twitter!");
            }
        }
    });
}
```

연결할 때 수행되는 단계는 로그인과 매우 유사합니다. 로그인되면 기존 `ParseUser`가 Twitter 정보로 업데이트되는 점만 다릅니다. 나중에 Twitter를 통해 로그인하면 사용자가 자신의 기존 계정으로 로그인됩니다.

Twitter와 사용자의 연결을 취소하려면 다음과 같이 하면 됩니다.

```java
ParseTwitterUtils.unlinkInBackground(user, new SaveCallback() {
    @Override
    public void done(ParseException ex) {
        if (ex == null) {
            Log.d("MyApp", "The user is no longer associated with their Twitter account.");
        }
    }
});
```

### Twitter API 호출

Parse SDK에서는 앱에 Twitter 연결된 `ParseUser`가 있는 경우 [Twitter REST API](https://dev.twitter.com/docs/api)에 대한 API HTTP 요청에 서명하는 간단한 방법을 제공합니다.  Parse API를 통해 요청하려면 `ParseTwitterUtils`에서 제공하는 `Twitter` singleton을 사용할 수 있습니다.

```java
HttpClient client = new DefaultHttpClient();
HttpGet verifyGet = new HttpGet(
    "https://api.twitter.com/1/account/verify_credentials.json");
ParseTwitterUtils.getTwitter().signRequest(verifyGet);
HttpResponse response = client.execute(verifyGet);
```
