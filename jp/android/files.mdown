# ファイル

## ParseFile

`ParseFile` を使うと、`ParseObject`で扱うには大きすぎたり手間がかかりすぎたりする、アプリケーションファイルを保管することができます。最も一般的な使用例としては画像の保管がありますが、他にも文書、ビデオ、音楽、その他のバイナリデータにも使えます（最大10メガバイト）。

`ParseFile`を使うための準備は簡単です。まず`byte[]`形式でデータを用意し、それを使って`ParseFile`を作成します。以下の例では、文字列を使用します。

```java
byte[] data = "Working at Parse is great!".getBytes();
ParseFile file = new ParseFile("resume.txt", data);
```

この例ではファイルに`resume.txt`という名前をつけています。注意点が2点あります。 

*   ファイル名の衝突を気にする必要はありません。アップロードされた各ファイルには一意の識別子が付与されるため、`resume.txt`という名前のファイルを複数アップロードしても問題ありません。
*   ただし、ファイルに拡張子をつけるのを忘れないでください。Parseは拡張子でファイルの種類を識別し、それに従って処理します。ですから、PNGを保管する場合は、ファイル名の末尾を必ず`.png`にしてください。

次に、ファイルをクラウドに保存します。`ParseObject`と同様、`save`メソッドにもさまざまなバリアントがあり、コールバックや処理の必要に応じて使い分けることができます。

```java
file.saveInBackground();
```

最後に、保存処理の完了後、他のデータと同様に、`ParseFile`を`ParseObject`に関連付けます。

```java
ParseObject jobApplication = new ParseObject("JobApplication");
jobApplication.put("applicantName", "Joe Smith");
jobApplication.put("applicantResumeFile", file);
jobApplication.saveInBackground();
```

このファイルを再取得するには、`ParseObject`に`getData`のバリアントを呼び出します。以下の例では、別のJobApplicationオブジェクトからresumeファイルを取得します。

```java
ParseFile applicantResume = (ParseFile)anotherApplication.get("applicantResumeFile");
applicantResume.getDataInBackground(new GetDataCallback() {
    public void done(byte[] data, ParseException e) {
        if (e == null) {
            // data has the bytes for the resume
        } else {
            // something went wrong
        }
    }
});
```

`ParseObject`と同様、`getData`のバックグラウンド版を使うことが多いでしょう。

## 進行状況

ParseFileで、`saveInBackground`や`getDataInBackground`にProgressCallbackを渡すと、簡単にアップロードやダウンロードの進行状況を取得できます。以下に例を示します。

```java
byte[] data = "Working at Parse is great!".getBytes();
ParseFile file = new ParseFile("resume.txt", data);

file.saveInBackground(new SaveCallback() {
    public void done(ParseException e) {
        // Handle success or failure here ...
    }
}, new ProgressCallback() {
    public void done(Integer percentDone) {
        // Update your progress spinner here. percentDone will be between 0 and 100.
    }
});
```

[REST API](/docs/rest#files-deleting)を使用して、オブジェクトから参照されたファイルを削除することができます。ファイルの削除を行うためには、マスターキーを提示する必要があります。

ファイルがアプリのどのオブジェクトからも参照されていない場合、REST API経由でそれらのファイルを削除することはできません。アプリの設定ページから、使用されていないファイルのクリーンアップをリクエストすることはできますが、これらのファイルにURLでアクセスしている場合は、以後機能しなくなることを考慮してください。オブジェクトと関連付けられているファイルは、この処理の影響を受けません。
