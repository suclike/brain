# 호스팅

Parse Hosting은 정적 및 동적 웹사이트를 호스팅할 수 있는 툴을 제공합니다. 클라우드에서는 JavaScript SDK를 사용하고 서버에서는 Cloud Code와 Express를 사용하여 임의의 정적 웹 콘텐츠를 업로드하거나 동적 웹 앱을 만들 수 있습니다. 이를 통해 네이티브 앱과 연동하여 사용하는 컴패니언 웹 앱(companion web app)을 만들거나 모바일 앱용 랜딩 페이지를 만들 수도 있고 Unity Web Player 바이너리를 호스팅할 수도 있습니다.

## 시작하기

개발에 사용하는 컴퓨터에 Parse의 커맨드 라인 툴을 설치해야 합니다. 이 툴을 사용하여 Parse Cloud의 웹사이트를 관리할 수 있습니다. 버전 1.1.0 이상의 커맨드 라인 툴을 사용해야 합니다.

### 커맨드 라인 툴 설치 또는 업데이트(Mac/Linux)

Mac OS와 Linux/Unix 환경에서 다음 커맨드를 실행하여 Parse 툴을 설치할 수 있습니다.

```bash
curl -s https://www.parse.com/downloads/cloud_code/installer.sh | sudo /bin/bash
```

커맨드를 실행하면 `/usr/local/bin/parse`에 &quot;parse&quot;라는 툴이 설치됩니다. 다른 파일이 없으므로 툴을 제거하려면 해당 파일을 삭제하면 됩니다. 툴을 이미 설치한 경우에는 커맨드 라인 툴이 업데이트됩니다.

### 커맨드 라인 툴 설치(Windows)

Windows용 Parse 커맨드 라인 툴은 [여기](/downloads/windows/console/parse.zip)에서 사용할 수 있습니다. zip 파일을 다운로드하고 파일 압축을 해제한 뒤 ParseConsole.exe를 두 번 클릭하여 Parse를 인식하는 powershell 세션을 실행할 수 있습니다. Win + R을 누르고 &quot;parse&quot;를 입력하여 powershell 세션을 시작할 수도 있습니다.

### 프로젝트 디렉터리 만들기

다음 단계는 클라우드에서 실행할 웹사이트를 저장하기 위한 디렉터리를 만드는 것입니다. `parse new` 커맨드를 실행하면 이 디렉터리를 설정하고 호스팅을 만들 앱을 선택하라는 메시지가 표시됩니다.

```bash
$ parse new MyWebsite
Email: ninja@gmail.com
Password:
1:MyApp
Select an App: 1
$ cd MyWebsite
```

Parse 계정의 이메일 주소와 비밀번호를 사용하여 로그인하세요. OAuth를 통해 가입하고 비밀번호를 설정하지 않았다면 지금 계정 설정을 수정하여 비밀번호를 설정해야 합니다. 이렇게 하면 현재 디렉터리에 이름이 `MyWebsite`인 디렉터리가 만들어집니다. 다음과 같은 여러 파일이 자동으로 생성됩니다.

```bash
-config/
  global.json
-cloud/
  main.js
-public/
  index.html
```

`config` 디렉터리에는 대개는 처리할 필요가 없는 JSON 구성 파일이 포함되고 `cloud` 디렉터리에는 동적 웹사이트 코드가 있으며 `public` 디렉터리에는 Parse에서 호스팅할 모든 정적 콘텐츠가 저장됩니다. 지금은 이런 파일이 모두 생성되었는지만 확인합니다. 소스 관리를 사용하는 경우 이 모든 파일이 들어있는지 확인할 수 있습니다.

### 간단한 웹사이트

Parse를 이용하여 손쉽게 정적 콘텐츠를 호스팅할 수 있습니다. `public` 디렉터리에 있는 모든 것이 `your-custom-subdomain.parseapp.com`에 호스팅됩니다. 이 디렉터리는 `cloud` 및 `config` 디렉터리와 함께 있습니다.

Hello World 웹사이트를 배포하려면 간단히 다음 작업을 수행하세요.

```bash
$ echo "Hello World" > public/index.html
$ parse deploy
```

배포한 웹사이트에 액세스하려면 서브도메인을 설정해야 합니다.

### 서브도메인 이름 선택

호스팅된 콘텐츠에 액세스하려면 먼저 ParseApp 서브도메인을 선택해야 합니다. 앱 설정의 &quot;Web Hosting&quot; 섹션에 서브도메인을 설정할 수 있습니다. 해당 섹션에 ParseApp 이름을 입력할 입력란이 있습니다. 서브도메인 이름은 대소문자를 구분하지 않으며 앱 이름과 달리 전체 Parse 시스템에서 고유해야 합니다. 또한 3~20자의 영숫자와 대시를 사용할 수 있지만 대시로 시작하거나 끝나면 안 됩니다. 고유한 서브도메인 이름을 선택할 때 아직 선택되지 않았음을 나타내는 선택 표시가 나타납니다.

웹사이트의 서브도메인 이름으로 `at-the-movies`를 선택했다고 가정하면, 이제 루트 URL `at-the-movies.parseapp.com`에서 이 서브도메인에 액세스할 수 있습니다. `public/images/background.png`에서 다른 호스팅된 파일을 업로드하면 `at-the-movies.parseapp.com/images/background.png`에서 브라우저를 가리켜 파일에 액세스할 수 있습니다.

### 업로드 제약

호스팅된 파일에는 다음과 같은 몇 가지 제약이 있습니다.

*   파일은 500MB로 제한됩니다.
*   호스팅된 파일을 500개 이상 업로드할 수 없습니다.
*   파일 이름은 영숫자로 시작해야 하고 영숫자와 대시, 밑줄, 공백, '@' 기호만 포함해야 합니다.
*   커맨드 라인 툴은 emacs와 vim 자동 저장 파일을 자동으로 건너뜁니다.

원하는 모든 유형의 호스팅된 콘텐츠를 업로드할 수 있습니다. Parse에서는 각 파일의 확장명에서 콘텐츠 유형을 식별합니다.

## 사용자 지정 도메인 이름

사용자는 사용자 지정 도메인 이름에 콘텐츠를 호스팅할 수 있습니다. ParseApp 이름 `at-the-movies`를 선택하고 `www.example.com`에 콘텐츠를 호스팅하려면 다음 세 단계를 수행해야 합니다.

1.  `www.example.com`의 DNS 항목을 제어한다는 사실을 보여줍니다. `www.example.com` 또는 `[your_host_name_key].www.example.com`에서 `at-the-movies.parseapp.com`에 CNAME을 추가하여 이를 수행할 수 있습니다. 호스트 이름 키는 앱 설정의 &quot;Web Hosting&quot; 섹션에 있는 12자의 문자열입니다. 새로운 DNS 항목이 전파되는 데 어디에서든 15분에서 몇 시간까지 걸릴 수 있으며, 항목이 전파되어야 다음 단계를 완료할 수 있습니다. 현재 `www.example.com`에 웹사이트를 호스팅하는 경우 호스트 이름 키 방법을 사용할 수 있습니다. 그렇지 않으면 다음 단계를 완료하기 전에 새 DNS 항목이 사용자에게 표시되기까지 웹사이트가 중단될 수 있습니다.
2.  새로운 DNS 항목이 전파된 후 앱의 호스팅 설정에 호스트 이름을 `www.example.com`으로 설정할 수 있습니다. 첫 단계를 완료하면 선택 표시가 나타납니다. 완료되지 않으면 오류 메시지가 나타나 무엇이 잘못되었는지 표시합니다.
3.  호스트 이름 키를 통해 소유권을 확인한 경우에도 `www.example.com`에서 CNAME을 `at-the-movies.parseapp.com`에 추가해야 호스팅된 앱으로 트래픽 전송이 시작됩니다.

이 단계를 완료하면 `www.example.com`에서 `at-the-movies.parseapp.com`과 동일한 콘텐츠를 게재합니다.

`example.com`과 같은 최상위 도메인에 콘텐츠를 게재하려는 경우 루트 도메인에서는 일반적으로 CNAME 레코드를 지원하지 않으므로 위의 단계에서 문제가 발생할 수 있습니다. 이러한 문제를 해결하기 위해 Parse에서는 `example.com`과 같은 루트 도메인의 트래픽을 `www.example.com` 서브도메인으로 리디렉션하는 서비스를 제공합니다. 이 서비스를 사용하려면 `www.example.com`과 같이 www로 시작하는 도메인을 사용하여 위의 단계를 완료한 뒤 다음 IP 주소 중 하나 또는 둘 다에 `example.com`의 `A` 레코드를 만듭니다.

*   `54.85.233.145`
*   `54.85.226.190`

`A` 레코드는 도메인 이름 서비스 제공자의 설정 페이지에 생성할 수 있습니다. `A` 레코드를 생성하면 `example.com`에 대한 요청이 `www.example.com`으로 301(영구) 리디렉션되면서 동시에 요청 경로가 유지됩니다.

사용자 지정 도메인을 사용하여 HTTPS를 통해 호스팅된 사이트를 방문하면 웹사이트에서 `*.parseapp.com`에 속한 SSL 인증서를 사용하여 콘텐츠를 게재하고 있다는 경고 메시지가 표시될 수 있습니다. 사용자 지정 도메인에 속한 SSL 인증서가 있는 경우 앱 설정의 &quot;Web Hosting&quot; 섹션에 공용 인증서 파일과 개인 키 파일을 업로드하여 이 경고를 해결할 수 있습니다. 도메인의 공용 인증서에 중개 인증서가 필요한 경우 공용 인증서와 중개 인증서, 루트 인증서를 이 순서대로 하나의 파일에 추가하여 앱 설정에서 &quot;SSL Public Certificate&quot;로 업로드합니다.  10~30분 이내에 인증서가 Parse Hosting 서버로 전파되고 HTTPS를 통해 호스팅된 사이트를 방문하는 사용자에게 게재됩니다.

## 동적 웹사이트

Cloud Code와 Express를 사용하여 여러 페이지의 동적 웹 앱을 빌드할 수 있습니다. [Express](http://expressjs.com/) 프레임워크로 요청 라우팅과 쿠키 처리, 템플릿 렌더링 등 많은 강력한 툴을 언제든지 사용할 수 있습니다. 또한 [Cloud Code](/docs/cloud_code_guide)를 통해 Parse 데이터와 상호 작용하고 [HTTP 요청을 전송](/docs/cloud_code_guide#networking)하는 등의 기능을 사용할 수 있습니다.

Parse를 사용하면 Express로 여러 페이지로 구성된 웹 앱을 빌드하거나 클라이언트에서 Parse JavaScript SDK로 싱글 페이지의 Backbone 앱을 빌드할 수 있습니다.  Express 방식에는 검색 엔진이 웹사이트를 크롤링할 수 있다는 이점이 있는 반면 클라이언트 측 Backbone 방식은 더욱 빠르게 반응하는 앱을 만들 수 있습니다.  Express와 Cloud Code에 대한 자세한 내용은 [Express API 문서](/docs/js/api/symbols/express.html)를 참조하세요.

Express를 사용하여 앱을 빠르게 구축하고 실행할 수 있지만 낮은 수준의 [Node.js](http://nodejs.org/)와 같은 HTTP 인터페이스를 사용하려는 경우에도 지원됩니다.  자세한 내용은 [HTTP 인터페이스 API 문서](/docs/js/api/symbols/http.html)를 참조하세요. Express를 선택하든 Node.js를 선택하든 관계없이 먼저 `public/index.html`을 삭제해야 사용자 지정 핸들러 함수에 요청이 전달될 수 있습니다.

이 가이드에서는 Express API를 사용한 웹 앱 빌드에 초점을 맞춥니다.

### 시작하기

Parse Hosting을 [설정](#started-project)한 후 Parse 프로젝트 폴더 내에 다음을 입력하여 스타터 웹 앱을 생성할 수 있습니다.

```bash
$ parse generate
```

이 커맨드는 클라우드 폴더 내에 다음 디렉터리 구조를 만듭니다.  기존 main.js 파일은 영향을 받지 않습니다.

```bash
-cloud/
  app.js
  -views/
    hello.ejs
  main.js (not touched)
```

그런 다음 `main.js` 맨 위에 다음 줄을 추가해야 합니다.  이렇게 하면 `app.js`에 있는 코드가 로드됩니다.

```js
require('cloud/app.js');
```

그런 다음 `parse deploy`를 실행하여 웹 앱을 배포합니다. 배포한 후에 `your-custom-subdomain.parseapp.com/hello`에서 웹 앱을 찾을 수 있어야 합니다.  다음은 이 샘플 앱을 자세히 알아보도록 하겠습니다.

### 샘플 웹 앱

스타터 웹 앱을 자세히 조사하여 Express의 작동 방식을 이해해 보도록 하겠습니다.  아직 스타터 앱을 만들지 않았으면 [이 안내](#webapp-started)에 따라 앱을 만들 수 있습니다.

Express 앱의 최상위 수준 진입점은 `app.js`입니다. 여기에서 앱이 초기화되고 요청 경로가 Express 라우팅 API를 통해 해당 로직과 연결됩니다.  `main.js`에서 이 파일을 요청해야 합니다. Cloud Code가 JavaScript를 로드할 때 `main.js`에서 시작하기 때문입니다. 클라우드 함수를 `main.js`에 넣고 모든 Express 관련 코드를 `app.js`에 넣는 것이 좋습니다.

샘플 앱에서 `app.js`의 형식은 다음과 같아야 합니다.

```js
// These two lines are required to initialize Express.
var express = require('express');
var app = express();

// Global app configuration section
app.set('views', 'cloud/views');  // Specify the folder to find templates
app.set('view engine', 'ejs');    // Set the template engine
app.use(express.bodyParser());    // Middleware for reading request body

// This is an example of hooking up a request handler with a specific request
// path and HTTP verb using the Express routing API.
app.get('/hello', function(req, res) {
  res.render('hello', { message: 'Congrats, you just set up your app!' });
});

// This line is required to make Express respond to http requests.
app.listen();
```

맨 위의 global app configuration section에서 일부 앱 설정을 지정하고 Express 미들웨어를 초기화합니다.  앱 설정에는 웹 페이지 렌더링을 위한 템플릿 엔진과 템플릿 소스 파일을 찾을 수 있는 위치 지정이 포함됩니다.  Express 미들웨어는 수신 요청을 선행 처리하는 선택적 요소입니다.  이 섹션에 지정된 미들웨어는 모든 요청 경로에 적용됩니다.

또한 샘플 앱에는 EJS 템플릿 파일(`hello.ejs`)이 포함된 `cloud/views` 폴더가 있습니다. 이 템플릿에서는 `message` 변수가 `app.js`의 `res.render()` 줄에 지정된 값으로 대체됩니다.

### 요청 처리

요청 텍스트를 읽고 요청 텍스트가 포함된 메시지로 응답하는 간단한 요청 핸들러에 대해 알아보겠습니다.

```js
app.post('/echo', function(req, res) {
  res.set('Content-Type', 'text/plain');
  res.send('echoing: ' + req.body.message);
});
```

모든 요청 핸들러는 `app.VERB`로 시작합니다. 여기에서 `VERB`는 `get`, `post`, `put` 또는 `delete` 등 모든 표준 HTTP 동사가 될 수 있습니다. 이를 통해 Express에 이 핸들러가 응답해야 하는 HTTP 요청의 유형을 알립니다.

그런 다음 `'/echo'` 매개변수로 이 요청 핸들러가 응답해야 하는 url 경로(루트라고도 함)를 지정합니다.  그런 다음 요청 처리 로직을 수행하기 위해 요청 및 응답 개체에서 사용하는 함수를 지정합니다. `express.bodyParser` 미들웨어를 포함하면 `req.body`가 입력 데이터로 채워집니다. 예를 들어 원본 요청 본문이 `{ "message": "hi" }`이면 위의 `req.body.message`에 `'hi'` 값이 포함됩니다.  마지막으로 [`res.send()`](/docs/js/api/symbols/express.Response.html#send) 함수는 응답 개체를 지정된 문자열로 채우도록 Express에 지시합니다.

### Express 미들웨어

미들웨어는 요청이 요청 핸들러에 도달하기 전에 처리하는 모듈입니다.  이 요소는 원본 HTTP 요청을 요청 핸들러에서 손쉽게 처리할 수 있는 요청 개체로 변환합니다. Cloud Code는 Express에서 제공하는 다음 미들웨어를 지원합니다.

*   [`express.basicAuth()`](/docs/js/api/symbols/express.html#.basicAuth) - 웹사이트의 HTTP 기본 인증을 설정합니다.
*   [`express.bodyParser()`](/docs/js/api/symbols/express.html#.bodyParser) - HTTP 요청 본문(JSON 또는 www 형식 인코딩)을 `request.body` 개체로 변환합니다.
*   [`express.methodOverride()`](/docs/js/api/symbols/express.html#.methodOverride) - 표준 웹 양식은 HTTP POST만 지원합니다.  이 미들웨어를 통해 웹 양식에서 put/delete HTTP 요청을 Express로 보낼 수 있습니다.  REST-ful 원칙을 엄격하게 따르려는 경우 특히 유용합니다.
*   [`express.cookieParser()`](/docs/js/api/symbols/express.html#.cookieParser) - 브라우저에서 보낸 요청 쿠키를 읽고 이를 `request.cookies` 및 `express.request.signedCookies` 개체에 넣습니다.
*   [`express.cookieSession()`](/docs/js/api/symbols/express.html#.cookieSession) - `request.session` 개체를 설정하여 서명된 쿠키에 세션 데이터를 저장할 수 있습니다.
*   [`express.csrf()`](/docs/js/api/symbols/express.html#.csrf) - 사이트 간 요청 위조를 방지합니다.

또한 다음과 같은 사용자 지정 미들웨어가 제공됩니다.

*   [`parseExpressRawBody()`](/docs/js/api/symbols/parseExpressRawBody.html) - `req.body`에서 [`Buffer`](/docs/js/api/symbols/Buffer.html) 개체로 원본 요청 본문에 액세스할 수 있습니다.  요청에 있는 바이트에 직접 액세스하려는 경우나 요청 핸들러에서 자체 파서를 사용하여 요청 본문을 다른 데이터 형식(예: XML)으로 읽으려는 경우에 유용합니다.

[`app.use()`](/docs/js/api/symbols/express.Application.html#use) 함수로 앱에 미들웨어를 추가할 수 있습니다.  표준 Express 미들웨어는 함수이므로 그에 따라 호출해야 합니다(예: `app.use(express.csrf()`). `app.VERB()` 함수로 요청 핸들러를 등록하기 전에 앱의 미들웨어를 추가해야 합니다.

global app configuration section에 Express 미들웨어를 설정할 때는 위의 순서를 따르세요.  필요하지 않은 미들웨어는 빼도 됩니다.  이후에 설정되는 미들웨어가 이전 미들웨어에서 생성한 데이터에 의존할 수 있으므로 순서가 중요합니다.

### 템플릿 렌더링

템플릿은 웹 콘텐츠를 동적으로 생성하고 코드 중복을 줄이는 좋은 방법입니다.  Cloud Code는 EJS 및 Jade 템플릿 엔진용 모듈을 제공합니다.

`app.set('view engine', ENGINE_NAME)`으로 global app configuration section에 템플릿 엔진을 지정합니다. 여기서 `ENGINE_NAME`은 `'ejs'` 또는 `'jade'`일 수 있습니다. `cloud/views` 폴더 내 템플릿 파일에 `ENGINE_NAME`과 일치하는 확장명이 있어야 합니다. 샘플 앱의 템플릿은 다음과 같은 EJS(`hello.ejs`) 또는 Jade(`hello.jade`) 템플릿입니다.

```html
// Using EJS syntax
<!DOCTYPE html>
<html>
  <head>
    <title>Sample App</title>
  </head>
  <body>

# Hello World

<%%= message %>

  </body>
</html>
```

```html
// Using Jade syntax
doctype 5
html
  head
    title Sample App
  body
    h1 Hello World
    p= message
```

각 템플릿 엔진의 구문에 대한 자세한 내용은 [EJS](https://github.com/visionmedia/ejs) 및 [Jade](https://github.com/visionmedia/jade) 홈페이지를 참조하세요.

[`res.render()`](/docs/js/api/symbols/express.Response.html#render)를 호출하여 템플릿을 렌더링합니다. 첫 번째 인수는 템플릿 파일 이름입니다.  여기에 파일 확장명이 없는 경우 Express는 앱의 템플릿 엔진 설정과 일치하는 확장명을 가진 파일을 찾습니다. 두 번째 인수는 템플릿에 있는 모든 변수와 해당 값이 포함된 JSON 개체입니다.  템플릿의 각 변수는 플레이스홀더로 사용되고 템플릿을 렌더링할 때 실제 값으로 대체됩니다.

### 사용자 입력 받기

Cloud Code에서 Express를 사용하면 손쉽게 사용자 입력을 받을 수 있습니다.  템플릿에 사용자가 텍스트를 입력할 수 있는 양식 요소를 만든 다음 양식을 제출하여 발행된 요청에 대한 요청 핸들러를 추가할 수 있습니다.

샘플 앱 템플릿에 간단한 양식을 추가해 보겠습니다.  `hello.ejs` 또는 `hello.jade`를 다음 코드로 바꾸세요.

```html
// Using EJS syntax
<!DOCTYPE html>
<html>
  <head>
    <title>Sample App</title>
  </head>
  <body>

# Hello World

    <p><%%= message %>

    <form method="post" action="/hello">

        <input name="message"></input>
        <input class="button" type="submit" value="Update Greeting">

    </form>
  </body>
</html>
```
```html
// Using Jade syntax
doctype 5
html
  head
    title Sample App
  body
    h1 Hello World
    p= message
    form(method="post", action="/hello")
      p
        input(type="text", name="message")
        input(type="submit", name="submit", value="Update Greeting")
```

그런 다음 `app.js`에 HTTP POST 요청에 대한 요청 핸들러를 추가해야 합니다.

```js
app.post('/hello', function(req, res) {
  res.render('hello', { message: req.body.message });
});
```

사용자가 텍스트 상자에 &quot;hi&quot;를 입력하고 &quot;Update Greeting&quot; 버튼을 클릭한다고 가정하겠습니다.  양식은 HTTP POST 요청을 요청 본문 `message=hi`와 함께 url `http://example.parseapp.com/hello`에 보냅니다.  `express.bodyParser` 미들웨어는 요청 본문을 읽고 `req.body.message`를 `'hi'`로 설정합니다. 그러면 HTTP 동사와 url 경로가 모두 일치하므로 요청에서 위의 요청 핸들러를 트리거합니다.  마지막으로 요청 핸들러는 `'hi'`를 `message` 변수의 플레이스홀더에 삽입하여 `hello.ejs` 템플릿을 렌더링합니다.

### 사용자 세션 관리

`parseExpressCookieSession` 미들웨어를 사용하여 [`Parse.User`](/docs/js_guide#users) 인증 및 세션 관리를 Express 앱에 추가할 수 있습니다. Cloud Code에서 `Parse.User.logIn()` 함수를 호출하면 이 미들웨어가 자동으로 사용자 세션을 관리합니다.

웹 양식을 사용하여 사용자의 로그인 정보를 요청하고 이 양식으로부터 데이터를 받으면 Cloud Code에서 사용자에 로그인할 수 있습니다.  `Parse.User.logIn()`을 호출하면 미들웨어가 자동으로 사용자 브라우저에 쿠키를 설정합니다.  같은 브라우저에서 후속 HTTP 요청이 이루어지는 동안 이 미들웨어가 이 쿠키를 사용하여 Cloud Code에 자동으로 [현재 사용자](/docs/js_guide#users-current)를 설정합니다. 이를 통해 Cloud Code에서 [ACL](/docs/js_guide#users-acls)이 올바로 작동하고 필요한 경우 전체 현재 사용자 개체를 검색할 수 있도록 합니다.  마지막으로 `Parse.User.logOut()`을 호출하여 Cloud Code에서 사용자를 로그아웃하면 미들웨어가 자동으로 브라우저 쿠키를 삭제합니다.  샘플 앱 코드에 대한 자세한 내용은 이 미들웨어의 [설명서](/docs/js/api/symbols/parseExpressCookieSession.html)를 참조하세요.

사용자 데이터로 작업할 때는 가능한 경우 HTTPS를 사용해야 합니다.  앱과 사용자를 보호하기 위해 `parseExpressCookieSession` 미들웨어를 사용하려면 HTTPS를 사용해야 합니다.  편의를 위해 모든 HTTP 요청을 HTTPS로 리디렉션하기 위한 `parseExpressHttpsRedirect` 미들웨어를 제공합니다.  자세한 내용은 [설명서](/docs/js/api/symbols/parseExpressHttpsRedirect.html)를 참조하세요.

### 정적 콘텐츠

Express 앱을 `public` 폴더에서 배포한 정적 콘텐츠와 나란히 배치할 수 있습니다.  서브도메인의 URL로 요청이 전달되면 Parse는 먼저 `public` 디렉터리에서 일치하는 파일을 찾습니다.  일치하는 파일이 없으면 Parse에서 Cloud Code에 등록된 Express 요청 핸들러를 호출합니다.  그래도 일치하는 파일이 없으면 Parse에서 &quot;404 찾을 수 없음&quot; 페이지를 표시합니다.

 Express를 정적 콘텐츠와 함께 사용 중인 경우 프로젝트에 다음 디렉터리 구조를 사용하는 것이 좋습니다.

```bash
-cloud/
  main.js            Cloud Code functions, require cloud/app.js here
  app.js             Express app configuration and request handling logic
  -views/            View template files that Express needs to render
    hello.ejs
-public/
  example.html       Static HTML files
  favicon.ico        Your favicon logo
  -stylesheets/      CSS stylesheets
    style.css
```

## 기록

`parse log`에서 표시한 로그 파일에 메시지를 기록하려면 `console.log`, `console.error` 또는 `console.warn`을 사용할 수 있습니다.  `console.error`와 `console.warn`은 모두 오류 로그에 기록합니다.

```js
app.post('/hello', function(req, res) {
  console.log("New message: " + req.body.message);
  res.render('hello', { message: req.body.message });
});
```

## 개발 및 프로덕션

개발 앱으로 새로운 코드를 사용해 볼 수 있으며 프로덕션 앱으로 전체에 배포되는 앱을 실행할 수 있습니다.

### 프로젝트에 새 앱 추가

프로젝트에 여러 앱을 링크해야 합니다. `parse new`는 첫 번째 앱을 프로젝트에 링크합니다.  `parse add [alias]`를 다음과 같이 실행하여 더 많은 앱을 추가할 수 있습니다.

```bash
$ parse add production
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounterProd
2:PiecesOfEightCounterDev
Select an App: 1
```

위의 예에서는 `PiecesOfEightCounterProd` 앱을 프로젝트에 링크합니다. 또한 앱을 참조하기 위한 간단한 방식을 제공하는 `production`이라는 새 앱에 대한 별칭을 만듭니다.

### 웹사이트 개발

새 코드를 개발하는 동안 `develop` 커맨드를 사용하여 Parse 커맨드 라인 툴에서 지속적으로 프로젝트에 대한 업데이트가 있는지 확인하고 변경 사항을 업로드하도록 할 수 있습니다.  커맨드는 다음과 같습니다.

```bash
$ parse develop development
E2013-11-21T01:05:56.257Z] Deploy failed with error:Error: Uncaught SyntaxError: Unexpected token ; in app.js:30
    at main.js:1:1
I2013-11-21T01:06:21.504Z] Deployed v172 with triggers:
  Cloud Functions:
    hello
```

`develop` 커맨드에서 새로운 변경 사항을 푸시하려는 앱에 대해 명확하게 표시해야 합니다.  이렇게 해야 프로덕션 앱에서 실수로 `develop`이 실행되어 테스트되지 않은 코드가 배포되지 않도록 할 수 있습니다.  커맨드 라인 툴은 코드 변경 사항을 업로드하고 Ctrl-C를 누를 때까지 새 로그 메시지를 표시합니다.

### 프로덕션에 코드 배포

코드 테스트와 업데이트를 완료하면 다음과 같이 프로덕션 앱을 `deploy` 커맨드로 전달하여 프로덕션에 코드를 배포할 수 있습니다.

```bash
$ parse deploy production
New release is named v2
```
