# Интерфейс пользователя

В конечном счете пользователи вашего приложения будут взаимодействовать с компонентами UIKit. Parse предоставляет несколько подклассов объекта `UIViewController`, которые существенно упрощают вход или регистрацию пользователей `%{ParseUser}` и отображение объектов `%{ParseObject}`.

## PFLogInViewController

Если вы используете Parse для управления пользователями в вашем мобильном приложении, вам уже известен класс `%{ParseUser}`. В определенном месте приложения вам может понадобиться представить экран для осуществления входа пользователя `%{ParseUser}`.  Parse предоставляет элемент управления просмотром, который выполняет именно это действие.

<div class='tip info'><div>
  Ознакомьтесь с [руководством по использованию представлений для осуществления входа и регистрации](/tutorials/login-and-signup-views), которое предоставляет набор встроенных представлений, готовых к настройке и внедрении в приложение, которое использует объект `%{ParseUser}`.
</div></div>

Вы используете класс `PFLogInViewController` при помощи копирования и модального представления этого класса:

```objc
PFLogInViewController *logInController = [[PFLogInViewController alloc] init];
logInController.delegate = self;
[self presentModalViewController:logInController animated:YES];
```

Это все, что необходимо сделать для получения работоспособного экрана входа.

### Настройка элементов входа

![](/images/docs/login_diagram.png)

Класс `PFLogInViewController` можно настроить для предоставления ряда параметров входа. По умолчанию класс `PFLogInViewController` представляет следующий интерфейс пользователя:

*   Поля «Имя пользователя» и «Пароль»
*   Кнопка на случай утери пароля
*   Кнопка входа
*   Кнопка регистрации
*   Кнопка отмены

Любую из указанных выше функций можно включить или выключить. Параметры можно настроить при помощи свойства `fields` для `PFLogInViewController`:

```objc
logInController.fields = PFLogInFieldsUsernameAndPassword
                         | PFLogInFieldsLogInButton
                         | PFLogInFieldsSignUpButton
                         | PFLogInFieldsPasswordForgotten
                         | PFLogInFieldsDismissButton;
```

Фактически для связывания всех параметров, которые необходимо включить в экран входа, используется поразрядный оператор &quot;OR&quot; `|` и назначается значение для полей `fields`.

Кроме того, существует ряд других параметров, которые можно включить, в частности:

*   Кнопка Facebook
*   Кнопка Twitter

Аналогично можно включить собственно вход через Facebook или Twitter:

```objc
logInController.fields = PFLogInFieldsUsernameAndPassword
        | PFLogInFieldsFacebook
        | PFLogInFieldsTwitter;
```

Указанный выше код откроет экран входа, на котором будут представлены имя пользователя, пароль, кнопки Facebook и Twitter. Разрешения для входа через Facebook можно настроить через `facebookPermissions`.

```objc
PFLogInViewController *logInController = [[PFLogInViewController alloc] init];
logInController.delegate = self;
logInController.facebookPermissions = @[@"friends_about_me"];
[self presentModalViewController:logInController animated:YES];
```

### Ответ на успешный вход, ошибку или отмену входа

Когда пользователь входит или отменяет вход, контроллер `PFLogInViewController` уведомляет делегата события. При получении этого обратного вызова делегат должен по меньшей мере отклонить контроллер `PFLogInViewController`. Кроме того, делегат может обновить свои представления или переадресовать сообщение другим компонентам, которым необходимо знать о пользователе `%{ParseUser}`.

```objc
- (void)logInViewController:(PFLogInViewController *)controller
        didLogInUser:(PFUser *)user {
    [self dismissModalViewControllerAnimated:YES];
}

- (void)logInViewControllerDidCancelLogIn:(PFLogInViewController *)logInController {
    [self dismissModalViewControllerAnimated:YES];
}
```

Кроме схемы делегата, контроллер `PFLogInViewController` также поддерживает схему уведомления, которая полезна при наличии нескольких алгоритмов наблюдения событий входа.

### Настройка логотипа и фонового изображения

Возможно использовать собственный логотип или фоновое изображение. Вы можете выполнить это, разделив на подклассы контроллер `PFLogInViewController` и обходя `viewDidLoad`:

```objc
@interface MyLogInViewController : PFLogInViewController

@end

@implementation MyLogInViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    self.view.backgroundColor = [UIColor darkGrayColor];

    UIImageView *logoView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"logo.png"]];
    self.logInView.logo = logoView; // logo can be any UIView
}
@end
```

Если необходимо изменить логотип и фон связанного представления регистрации, необходимо разделить на подклассы контроллер `PFSignUpViewController`, создать копию подкласса и назначить ее для `signUpController` сразу же после создания экземпляра контроллера `PFLogInViewController`:

```objc
MyLogInViewController *logInController = [[MyLogInViewController alloc] init];
logInController.signUpController = [[MySignUpViewController alloc] init];
[self presentModalViewController:logInController animated:YES];
```

### Дальнейшая настройка представлений

Иногда необходимо выполнить дополнительную настройку контроллера `PFLogInViewController`. Например, необходимо изменить замещающий текст на «Эл. почта» или изменить размер кнопки входа. В обоих случаях необходимо разделить контроллер `PFLogInViewController` на подклассы и заменить метод `viewDidLoad` или `viewDidLayoutSubviews`. Замените первый метод, если действие не относится к внешнему виду, или второй метод в противном случае:

```objc
@interface MyLogInViewController : PFLogInViewController

@end

@implementation MyLogInViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.logInView.usernameField.placeholder = @"email";
}

- (void)viewDidLayoutSubviews {
    [super viewDidLayoutSubviews];
    self.logInView.logInButton.frame = CGRectMake(...); // Set a different frame.
}

@end
```

Разработчикам, которых интересует подобная настройка, следует ознакомиться с интерфейсом [`PFLogInView`](ios/api/Classes/PFLogInView.html), где задокументированы все настраиваемые свойства.

### Портретная и альбомная ориентация

По умолчанию контроллер `PFLogInViewController` поддерживает все ориентации, кроме `UIInterfaceOrientationPortraitUpsideDown` на iPhone. Это действие можно заменить, разделив на подклассы и заменив `shouldAutorotateToInterfaceOrientation:`.

### iPhone и iPad

Контроллер `PFLogInViewController` работает для устройств iOS всех размеров и плотности пикселей.

## PFSignUpViewController

При использовании контроллера `PFLogInViewController` с включенным параметром `PFLogInFieldsSignUpButton` для включения функции регистрации не нужно выполнять дополнительных действий. Когда пользователь касается кнопки регистрации на экране входа, появляется экран регистрации, на котором можно зарегистрироваться. Однако существуют случаи, когда может понадобиться использоват�� экран регистрации отдельно от экрана входа. В таких случаях будет полезным контроллер `PFSignUpViewController`.

Контроллер `PFSignUpViewController` используется при помощи копирования и модального представления:

```objc
PFSignUpViewController *signUpController = [[PFSignUpViewController alloc] init];
signUpController.delegate = self;
[self presentModalViewController:signUpController animated:YES];
```

Это все, что необходимо сделать для получения работоспособного экрана регистрации.

### Настройка элементов регистрации

![](/images/docs/signup_diagram.png)

Контроллер `PFSignUpViewController` можно настроить для предоставления ряда параметров регистрации. По умолчанию представлен следующий интерфейс пользователя:

*   Поля «Имя пользователя» и «Пароль»
*   Электронный адрес
*   Кнопка регистрации
*   Кнопка отмены

Если на экране регистрации необходимо дополнительное поле, кроме полей по умолчанию, например, «номер телефона», можно включить поле с названием &quot;additional&quot;:

```objc
signUpController.fields = PFSignUpFieldsUsernameAndPassword
                          | PFSignUpFieldsSignUpButton
                          | PFSignUpFieldsEmail
                          | PFSignUpFieldsAdditional
                          | PFSignUpFieldsDismissButton;
```

Фактически для связывания всех параметров, которые необходимо включить в экран регистрации, используется поразрядный оператор &quot;OR&quot; `|` и присваивается значение для полей `fields`. Аналогично можно отключить любое поле, исключая его в назначении полей.

### Ответ на успешный вход, ошибку или отмену регистрации

Когда пользователь регистрируется или отменяет регистрацию, контроллер `PFSignUpViewController` уведомляет делегата события. При получении этого обратного вызова делегат должен по меньшей мере отклонить контроллер `PFSignUpViewController`. Кроме того, делегат может обновить свои представления или переадресовать сообщение другим компонентам, которым необходимо знать о пользователе `%{ParseUser}`.

```objc
- (void)signUpViewController:(PFSignUpViewController *)signUpController didSignUpUser:(PFUser *)user {
    [self dismissModalViewControllerAnimated:YES];
}

- (void)signUpViewControllerDidCancelSignUp:(PFSignUpViewController *)signUpController {
    [self dismissModalViewControllerAnimated:YES];
}
```

Кроме схемы делегата, контроллер `PFSignUpViewController` также поддерживает `NSNotification`, что полезно при наличии нескольких алгоритмов обработчика событий входа.

### Настройка логотипа и фонового изображения

Вы можете использовать собственный логотип или фоновое изображение. Выполнить это можно разделением контроллера `PFSignUpViewController` на подклассы и перекрытием `viewDidLoad`:

```objc
@interface MySignUpViewController : PFSignUpViewController

@end

@implementation MySignUpViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    self.view.backgroundColor = [UIColor darkGrayColor];

    UIImageView *logoView = [[UIImageView alloc] initWithImage:@"logo.png"];
    self.signUpView.logo = logoView; // logo can be any UIView
}

@end
```

### Настройка логики подтверждения

Часто необходимо выполнять подтверждение информации о регистрации со стороны клиента перед ее отправкой в облако Parse Cloud. В метод `signUpViewController:shouldBeginSignUp:` в `PFSignUpViewControllerDelegate` можно добавить собственную логику подтверждения. Например, если устанавливается слишком короткий пароль, содержащий менее 8 символов, можно осуществить это при помощи следующего кода:

```objc
- (BOOL)signUpViewController:(PFSignUpViewController *)signUpController
           shouldBeginSignUp:(NSDictionary *)info {
    NSString *password = info[@"password"];
    return (password.length >= 8); // prevent sign up if password has to be at least 8 characters long
}
```

`info` &mdash; это словарь, который содержит все поля регистрации, например, имя пользователя, пароль, электронная почта и дополнительное поле.

### Дальнейшая настройка представлений

Иногда необходимо выполнить дополнительную настройку контроллера `PFSignUpViewController`. Например, необходимо изменить замещающий текст поля &quot;additional&quot; на «Телефон» или изменить размер кнопки регистрации. Вы всегда можете разделить контроллер `PFSignUpViewController` на подклассы и заменить различные методы для `UIViewController`. Необходимо заменить метод `viewDidLoad`, если действие, которое необходимо изменить, не связано с разбивкой представления, или заменить метод `viewWillLayoutSubviews` в противном случае:

```objc
@interface MySignUpViewController : PFSignUpViewController

@end

@implementation MySignUpViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.signUpView.usernameField.placeholder = @"phone";
}

- (void)viewDidLayoutSubviews {
    [super viewDidLayoutSubviews];
    self.signUpView.signUpButton.frame = CGRectMake(...); // Set a different frame.
}

@end
```

Разработчикам, которых интересует подобная настройка, следует ознакомиться с интерфейсом [`PFSignUpView`](ios/api/Classes/PFSignUpView.html), где задокументированы все настраиваемые свойства.

### Портретная и альбомная ориентация

По умолчанию контроллер `PFSignUpViewController` поддерживает все ориентации, кроме `UIInterfaceOrientationPortraitUpsideDown` на iPhone. Это действие можно заменить, разделив на подклассы и заменив `shouldAutorotateToInterfaceOrientation:`.

### iPhone и iPad

Контроллер `PFSignUpViewController` работает для устройств iOS всех размеров и плотности пикселей.

## PFQueryTableViewController

Приложения iOS, ориентированные на данные, в основном являются совокупностью контроллеров `UITableViewController` и соответствующих представлений `UITableView`. При использовании Parse каждая ячейка представления `UITableView` обычно представляет данные из объекта `%{ParseObject}`. `PFQueryTableViewController` &mdash; это подкласс контроллера `UITableViewController`, который предоставляет слой абстрактного представления, позволяющего легко отображать данные из одного из классов Parse.

<div class='tip info'><div>
  Ознакомьтесь с [руководством по использованию PFQueryTableViewController](/tutorials/parse-query-table) для отображения объектов из класса `Todo` в вашем приложении Parse.
</div></div>

По использованию контроллер `PFQueryTableViewController` очень похож на контроллер `UITableViewController`:

1.  Создайте подкласс контроллера `PFQueryTableViewController` и настройте его. Используйте [файл шаблона](https://gist.github.com/ba03c1a550f14f88f95d) в качестве исходной точки.
2.  Подкласс автоматически устанавливает себя делегатом и источником данных.
3.  Настройте переменную экземпляра `parseClassName`, чтобы указать, на какой класс Parse должен отправляться запрос на данные.
4.  Замените метод `queryForTable` для создания пользовательского запроса `PFQuery`, который должен использоваться для получения объектов таблицы.
5.  Замените метод `tableView:cellForRowAtIndexPath:object:`, чтобы вернуть пользовательскую ячейку, специально настроенную для каждого объекта `%{ParseObject}`.
6.  Реализуйте пользовательский класс ячейки; убедитесь, что он наследует из класса `PFTableViewCell`. После загрузки представления класс автоматически захватывает объекты `%{ParseObject}` через созданный запрос и загружает их в таблицу. Запрос включает также разбивку на страницы и функцию «потянуть для обновления» в стандартном решении.

Этот класс позволяет учитывать распределение «один к одному» между объектом `%{ParseObject}` и `UITableViewCell` вместо изменения индексного пути. Следующие функции также могут входить в стандартное решение:

*   Разбивка на страницы с ячейкой, которой можно касаться для загрузки следующей страницы.
*   Заголовок представления таблицы «потянуть для обновления».
*   Автоматическая загрузка и отображение удаленных изображений в ячейках.
*   Загрузка экрана, который отображается до загрузки данных.
*   Автоматическая загрузка и управление массивом объектов.
*   Различные методы, которые можно заменять при настройке действий для крупных событий в цикле данных.

Этот класс проще всего понять при помощи примера. Этот подкласс контроллера `PFQueryTableViewController` отображает серию элементов списка дел и их числовой приоритет:

```objc
@interface SimpleTableViewController : PFQueryTableViewController

@end

@implementation SimpleTableViewController

- (instancetype)initWithStyle:(UITableViewStyle)style {
    self = [super initWithStyle:style];
    if (self) { // This table displays items in the Todo class 
      self.parseClassName = @"Todo"; 
      self.pullToRefreshEnabled = YES; 
      self.paginationEnabled = YES; 
      self.objectsPerPage = 25;
    }
    return self;
}

- (PFQuery *)queryForTable {
    PFQuery *query = [PFQuery queryWithClassName:self.parseClassName];

    // If no objects are loaded in memory, we look to the cache first to fill the table
    // and then subsequently do a query against the network.
    if (self.objects.count == 0) { 
      query.cachePolicy = kPFCachePolicyCacheThenNetwork;
    }

    [query orderByDescending:@"createdAt"];

    return query;
}

- (UITableViewCell *)tableView:(UITableView *)tableView  
         cellForRowAtIndexPath:(NSIndexPath *)indexPath 
                        object:(PFObject *)object {
    static NSString *cellIdentifier = @"cell";

    PFTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
    if (!cell) { 
      cell = [[PFTableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle
                                    reuseIdentifier:cellIdentifier];
    }

    // Configure the cell to show todo item with a priority at the bottom
    cell.textLabel.text = object[@"text"];
    cell.detailTextLabel.text = [NSString stringWithFormat:@"Priority: %@",  object[@"priority"]];

    return cell;
}

@end
```

![](/images/docs/todo_view.gif)

В этом представлении отображаются элементы списка дел. Также пользователь может использовать функцию «потянуть для обновления» и загрузить следующую страницу, коснувшись специальной ячейки разбивки на страницы в конце таблицы. Благодаря этому также обеспечивается правильное кэширование объектов. Таким образом, когда представление больше не находится в памяти, при следующей загрузке оно будет использовать кэш запроса для немедленного отображения предыдущих загруженных объектов во время выполнения запроса сети на обновление.

Обратите внимание на то, какие элементы кода мы не пишем. Нам не понадобится обрабатывать загрузку данных в таблицу, индексные пути или сложный код разбивки на страницы. Все эти данные автоматически обрабатываются при помощи контроллера `PFQueryTableViewController`.

Для получения дополнительных сведений рекомендуется ознакомиться с документом [API для класса](/docs/ios/api/Classes/PFQueryTableViewController.html), а также [файлом шаблона подкласса](https://gist.github.com/ba03c1a550f14f88f95d). Класс был разработан с учетом возможности настройки, поэтому он должен содержать много экземпляров для тех случаев, где ранее вы использовали контроллер `UITableViewController`.

### Загрузка удаленных изображений в ячейки

Контроллер `PFQueryTableViewController` упрощает отображение удаленных изображений, хранящихся в облаке Parse как файлы `PFFile`. Необходимо просто заменить метод `tableView:cellForRowAtIndexPath:object:` и вернуть `PFTableViewCell` с заданным свойством `file` для `imageView`. Если необходимо отображать замещающее изображение до загрузки удаленного изображения, назначьте замещающее изображение для свойства `image` объекта `imageView`.

```objc
@implementation SimpleTableViewController

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath object:(PFObject *)object {
    static NSString *identifier = @"Cell";
    PFTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];
    if (!cell) {
        cell = [[PFTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];
    }
    cell.textLabel.text = object[@"title"];
    PFFile *thumbnail = object[@"thumbnail"];
    cell.imageView.image = [UIImage imageNamed:@"placeholder.jpg"];
    cell.imageView.file = thumbnail;
    return cell;
}
@end
```

![](/images/docs/images_table.png)

В этой таблице представлен список фотографий симпатичных животных, которые хранятся в Parse Cloud в виде файлов `PFFile`. &quot;placeholder.jpg&quot; &mdash; это изображение, включенное в комплект приложения, и которое отображается до загрузки фотографий животных.

Изображения загружаются по требованию. При прокручивании таблицы загружаются изображения в видимых на данный момент ячейках. Желательно настроить подобное своевременное отображение, так как это не только экономит пропускную способность, но и обеспечивает своевременное отображение видимых изображений. Если необходима более интенсивная загрузка, можно использовать метод `loadInBackground` для `imageView` для загрузки изображений.

### Настройка запроса

Запрос по умолчанию настроен на получение объектов из класса в порядке ниспадающего поля `createdAt`. Для настройки просто замените метод `queryForTable` для возврата собственного запроса `PFQuery`. Таблица будет использовать этот запрос при получении отображаемых объектов.

### Настройка ячеек

Для настройки вида таблицы замените метод `tableView:cellForRowAtIndexPath:object:` для возврата настроенной ячейки. Обратите внимание, что этот метод похож на типичный метод источника табличных данных, но также непосредственно включает в себя объект `%{ParseObject}` как параметр.

Больше не нужно заменять метод `tableView:cellForRowAtIndexPath:`.

_Важно!_ Ячейки представления таблицы должны наследовать из метода `PFTableViewCell`, а не `UITableViewCell`. `PFTableViewCell` является подклассом `UITableViewCell`, который поддерживает загрузку удаленных изображений. При использовании с контроллером `PFQueryTableViewController` удаленные изображения `PFTableViewCell` будут загр��жаться автоматически.

### Методы жизненного цикла

Предоставляются некоторые методы, которые вызываются при крупных событиях во время жизненного цикла данных таблицы. Это методы `objectsDidLoad:` и `objectsWillLoad`, которые вызываются после загрузки объектов из запроса и прямо перед запуском запроса соответственно. Эти методы можно заменить для предоставления дополнительных функций во время этих событий.

### Разбивка на страницы

![](/images/docs/pagination.png)

Разбивка на страницы обеспечивает одновременное получение только одной страницы объектов для таблицы. Количество объектов на странице можно настроить при помощи настройки переменной экземпляра `objectsPerPage`.

Запрос автоматически изменяется для применения разбивки на страницы, и при первой загрузке таблицы будет отображена только первая страница объектов. Ячейка разбивки на страницы отображается в нижней части таблицы, что позволяет пользователям загрузить следующую страницу. Эту ячейку можно настроить при помощи замены метода `tableView:cellForNextPageAtIndexPath:`.

Разбивка на страницы включена по умолчанию. Чтобы отключить ее, просто установите для параметра `paginationEnabled` значение `NO`.

### Функция «потянуть для обновления»

![](/images/docs/pull_to_refresh.png)

«Потянуть для обновления» &mdash; это функция, которая позволяет пользователям потянуть таблицу вниз и отпустить ее для повторной загрузки данных. Фактически, первая страница данных повторно загружается из класса, а таблица очищается и обновляется данными. Parse использует библиотеку `EGOTableViewPullRefresh` для достижения этого эффекта.

Функция «потянуть для обновления» включена по умолчанию. Чтобы отключить ее, просто установите для параметра `pullToRefreshEnabled` значение `NO`.

### Представление загрузки

Представление загрузки отображается, когда контроллер представления таблицы загружает первую страницу данных. По умолчанию эта функция включена, ее можно выключить при помощи свойства `loadingViewEnabled`.

### Сообщения о работе не в сети и сообщения об ошибках

Если пользователь находится не в сети, или в результате запроса была сгенерирована ошибка Parse, для пользователя может автоматически отображаться предупреждение. По умолчанию этот инструмент включен при использовании контроллера `PFQueryTableViewController`. Если необходимо отключить это действие, это можно выполнить при помощи методов `offlineMessagesEnabled` и `errorMessagesEnabled` для класса `Parse`.

## PFImageView

Для многих приложений необходимо отображать изображения, хранящиеся в Parse Cloud, как файлы `PFFile`. Однако для загрузки удаленных изображений при помощи встроенного инструмента `UIImageView` необходимо написать большое количество строк шаблонного кода. Инструмент `PFImageView` упрощает эту задачу:

```objc
PFImageView *imageView = [[PFImageView alloc] init];
imageView.image = [UIImage imageNamed:@"..."]; // placeholder image
imageView.file = (PFFile *)someObject[@"picture"]; // remote image
[imageView loadInBackground];
```

При назначении свойство `image` используется для отображения замещающего изображения до загрузки удаленного изображения. Обратите внимание, что загрузка не начинается, если назначено свойство `file`, а только в том случае, если вызывается метод `loadInBackground:`. Удаленное изображение кэшируется в памяти и на диске. Если изображение найдено в кэше, вызов метода `loadInBackground:` будет немедленно возвращен.

## PFTableViewCell

Для многих приложений необходимо отображать ячейки представления таблицы, которые содержат изображения, хранящиеся в Parse Cloud, как файлы `PFFile`. Однако для загрузки удаленных изображений при помощи встроенного инструмента `UITableViewCell` необходимо написать большое количество строк шаблонного кода. Инструмент `PFTableViewCell` упрощает эту задачу при помощи предоставления свойства `imageView` для типа `PFImageView`, который поддерживает загрузку удаленных изображений:

```objc
@implementation SimpleTableViewController

- (UITableViewCell *)tableView:(UITableView *)tableView  cellForRowAtIndexPath:(NSIndexPath *)indexPath object:(PFObject *)object {
    static NSString *identifier = @"cell";
    PFTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];
    if (!cell) { cell = [[PFTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];
    }
    cell.textLabel.text = object[@"title"];

    PFFile *thumbnail = object[@"thumbnail"];
    cell.imageView.image = [UIImage imageNamed:@"placeholder.jpg"];
    cell.imageView.file = thumbnail;
    return cell;
}

@end
```

Подобно инструменту `UITableViewCell`, инструмент `PFTableViewCell` поддерживает стандартные стили оформления. В отличие от инструмента `UITableViewCell` свойство `imageView` инструмента `PFTableViewCell` является свойством типа `PFImageView`, которое поддерживает загрузку удаленных изображений в файлах `PFFile`.

Несмотря на то, что этот инструмент можно использовать независимо, `PFTableViewCell` лучше всего использовать в составе контроллера `PFQueryTableViewController`. `PFQueryTableViewController` учитывает `PFTableViewCell` и загружает изображения автоматически. Это действие подробно описывается в документации к контроллеру `PFQueryTableViewController`.

## Настройка/локализация ресурсов строк

Все строки в пользовательском интерфейсе Parse можно настроить или локализовать. Самым простым способом настройки строки является [стандартная поддержка локализации](https://developer.apple.com/internationalization/), предоставляемая в iOS.

Например, необходимо настроить сообщение о загрузке в дисплее `PFSignUpViewController`, которое сообщает &quot;Loading...&quot; («Загружается...»). Предположим, вы выполнили указания руководства по локализации и настроили файл `Localizable.strings` в каталоге `en.lproj`. После этого можно ввести в файле `Localizable.strings` следующее: 

```js
"Loading..." = "In progress";
```

Это изменит значение строки на &quot;In progress&quot; («Выполняется»). Ключ слева &mdash; это исходная строка, которую необходимо настроить, а значение справа &mdash; это настроенное значение.

Допустим, необходимо настроить сообщение об ошибке в контроллере `PFSignUpViewController`, которое сообщает: &quot;The email address &quot;andrew@x&quot; is invalid. Please enter a valid email.&quot; (Адрес эл. почты &quot;andrew@x&quot; недействителен. Укажите действительный адрес эл. почты.). Вы не уверены, каким образом ввести это сообщение в файл `Localizable.strings`, поскольку оно содержит переменную.

В SDK Parse включен файл под названием `Localizable.string`, который содержит все локализируемые ключи в среде разработки Parse. Просматривая этот файл, разработчики могут найти ключ для строки, которую необходимо настроить. Обратите внимание, что строка &quot;The email address \&quot;%@\&quot; is invalid. Please enter a valid email.&quot; (Адрес эл. почты \&quot;%@\ недействителен. Укажите действительный адрес эл. почты.) является ключом в файле. В вашем файле `Localizable.strings` после этого можно ввести следующее:

```js
"The email address \"%@\" is invalid. Please enter a valid email." = "Wrong email: \"%@\"";
```

Теперь строка настроена.
