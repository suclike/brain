# 檔案

## 建立 Parse 檔案

`Parse.File` 讓您可以將應用程式檔案存放於雲端，這些檔案對於一般 `Parse.Object` 而言可能太大或是不好處理。最常見的使用案例就是圖像的存放，但是您也可以用來存放文件、影片、音樂和任何其他的二進位資料（上限 10 MB）。

`Parse.File` 很容易就能上手。有一些方法可以建立檔案。首先是用 base64 編碼的字串。

```js
var base64 = "V29ya2luZyBhdCBQYXJzZSBpcyBncmVhdCE=";
var file = new Parse.File("myfile.txt", { base64: base64 });
```

您也可以從位元組值的陣列建立檔案：

```js
var bytes = [ 0xBE, 0xEF, 0xCA, 0xFE ];
var file = new Parse.File("myfile.txt", bytes);
```

Parse 將依副檔名自動偵測您上傳的檔案類型，但您可以用第三個參數指定 `Content-Type`：

```js
var file = new Parse.File("myfile.zzz", fileData, "image/png");
```

但就一般 HTML5 應用程式而言，您會想使用具有檔案上傳控制的 HTML 格式。在最新的瀏覽器上，這點很簡單。建立檔案輸入標籤，允許使用者從自己的本機磁碟挑選要上傳的檔案：

```html
  <input type="file" id="profilePhotoFileUpload">
```

然後，在點擊處理常式或其他函數中，取得該檔案的參考：

```js
var fileUploadControl = $("#profilePhotoFileUpload")[0];
if (fileUploadControl.files.length > 0) {
  var file = fileUploadControl.files[0];
  var name = "photo.jpg";
  var parseFile = new Parse.File(name, file);
}
```

請注意，本範例中我們將檔案命名為 `photo.jpg`。在這裡有兩件事需要注意： 

*   您無須擔心檔名衝突。每次上傳都會取得唯一識別碼，所以就算上傳多個名為 `photo.jpg` 的檔案也不會有問題。
*   命名時記得加上副檔名，這很重要。這能讓 Parse 辨識出檔案類型，並且以相應的方式處理。因此，如果您正在存放 PNG 圖像，請確認檔案名稱的結尾為 `.png`。

接下來，您會希望將檔案儲存至雲端。如同 `Parse.Object`，有許多不同的 `save` 方法可供您使用，端看何種回呼和錯誤處理方式適合您。

```js
parseFile.save().then(function() {
  // The file has been saved to Parse.
}, function(error) {
  // The file either could not be read, or could not be saved to Parse.
});
```

最後，儲存完成後，您可以將 `Parse.File` 關聯至 `Parse.Object`，就像是關聯其他資料一樣：

```js
var jobApplication = new Parse.Object("JobApplication");
jobApplication.set("applicantName", "Joe Smith");
jobApplication.set("applicantResumeFile", parseFile);
jobApplication.save();
```

## 擷取檔案內容

將檔案內容擷取回來的最佳作法要依應用程式的內容而定。因為有跨網域要求的問題，如果您能讓瀏覽器代您處理再好不過。一般來說，這表示要將檔案的網址轉譯到 DOM 中。以下我們將用 jQuery 轉譯已上傳的專頁大頭貼照：

```js
var profilePhoto = profile.get("photoFile");
$("profileImg")[0].src = profilePhoto.url();
```

如果您想處理 Cloud Code 中的檔案資料，可以使用我們的 HTTP 網路程式庫擷取此檔案：

```js
Parse.Cloud.httpRequest({ url: profilePhoto.url() }).then(function(response) {
  // The file contents are in response.buffer.
});
```

您可以使用 [REST API](/docs/rest#files-deleting) 刪除被物件參照的檔案。您必須提供主要金鑰才能刪除檔案。

如果您的檔案並未被應用程式中的物件參照，則無法透過 REST API 刪除。您可以在應用程式的「設定」頁面要求清理未使用的檔案。請記住，這麼做可能中斷功能，實際情況取決於透過網址屬性存取未參照檔案而定。目前與物件關聯的檔案，將不會受到影響。
