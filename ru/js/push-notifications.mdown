# Уведомления

Уведомления &mdash; это отличный способ вовлечения и информирования пользователей о вашем приложении. Можно быстро и эффективно охватывать всю базу пользователей. Это руководство поможет пройти процесс настройки, а также описывает общее использование Parse для рассылки уведомлений.

<div class='tip info'><div>
  SDK JavaScript в настоящее время не поддерживает получение уведомлений. Его можно использовать только для отправки уведомлений на устройства под управлением ОС iOS и Android. Распространенный случай использования &mdash; отправка уведомлений с [Cloud Code](/docs/cloud_code_guide).
</div></div>

## Настройка уведомлений

При использовании SDK JavaScript для отправки уведомлений не требуется выполнять настройку. Если вы еще не выполнили настройки для использования уведомлений клиентами [iOS](#setup/iOS) или [Android](#setup/Android), ознакомьтесь с соответствующей инструкцией по установке с помощью переключателя платформы вверху.

## Установки

Каждое приложение Parse, установленное на устройстве, зарегистрированном для уведомлений, имеет связанный объект `Installation`. Объект `Installation` &mdash; это объект, где хранятся все данные, необходимые для назначения уведомлений. Например, в приложении о бейсболе можно сохранять команды, которыми интересуется пользователь, чтобы отправлять обновления об их достижениях.

Обратите внимание, что данные `Installation` могут быть изменены только клиентскими SDK, браузером данных или REST API.

В этом классе есть несколько специальных полей для помощи в управлении устройствами и выборе целевой аудитории для них.

*   **`badge`**: текущее значение значка визитки для приложений iOS. Изменения этого значения на сервере будут использоваться для уведомлений о дополнении данных визитки в будущем.
*   **`channels`**: массив каналов, на которые подписано устройство на данный момент.
*   **`timeZone`**: текущий часовой пояс, где размещено целевое устройство. Это значение синхронизируется каждый раз, когда объект `Installation` сохраняется с устройства _(только для чтения)_.
*   **`deviceType`**: тип устройства &mdash; &quot;iOS&quot; или &quot;Android&quot; _(только для чтения)_.
*   **`installationId`**: уникальный идентификатор для устройства, который используется в Parse _(только для чтения)_.
*   **`deviceToken`**: метка, которая создается Apple и используется для устройств iOS _(только для чтения)_.

## Отправка уведомлений

Существует два способа отправки уведомлений при помощи Parse: [каналы](#sending-channels/JavaScript) и [расширенное таргетирование](#sending-queries/JavaScript). Каналы предлагают простую в использовании модель для отправки уведомлений, в то время как расширенные возможности определения целевой аудитории обеспечивают более мощную и гибкую модель. Оба способа полностью совместимы друг с другом и описаны в данном разделе.

Отправка уведомлений часто осуществляется с помощью веб-консоли, [REST API](#sending/REST) или [Cloud Code](#sending/JavaScript). Поскольку SDK JavaScript используется в Cloud Code, то следует начинать работу в нем, если нужно отправлять уведомления с функций облака. Однако, если уведомления будут отправляться с SDK JavaScript за пределами Cloud Code или любого другого клиентского SDK, потребуется установить **Client Push Enabled** в настройках уведомлений приложения Parse.

![](/images/docs/client_push_settings.png)

### Использование каналов

Самым простым способом запустить отправку уведомлений является использование каналов. Для отправки уведомлений этот способ применяет модель «публикатор-подписчик». Устройства подписываются на один или более каналов, и после этого можно отправлять уведомления этим подписчикам. Каналы, на которые оформлена подписка при помощи заданного объекта `Installation`, хранятся в поле `channels` объекта `Installation`.

#### Подписка на каналы

SDK JavaScript в настоящее время не поддерживает подписку устройств под управлением ОС iOS и Android на уведомления. Ознакомьтесь с руководством по уведомлениях [iOS](#sending-channels/iOS), [Android](#sending-channels/Android) или [REST](#sending-channels/REST) с помощью переключателя платформы вверху.

#### Отправка уведомлений каналам

С помощью SDK JavaScript можно использовать приведенный ниже код для уведомления всех подписчиков канала &quot;Giants&quot; и &quot;Mets&quot; о результатах игры. Благодаря этому будет показано сообщение центра уведомлений для пользователей iOS и уведомление панели задач для пользователей Android.

```js
  Parse.Push.send({
    channels: [ "Giants", "Mets" ],
    data: {
      alert: "The Giants won against the Mets 2-3."
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

### Использование расширенного таргетинга

Несмотря на то, что каналы отлично подходят для многих приложений, иногда при охвате получателей уведомлений необходима большая точность. Parse позволяет написать запрос для любого подкласса объектов `Installation` при помощи [API запросов](/docs/js_guide#queries) и отправлять им уведомление.

Поскольку объекты `Installation`, как и любые другие объекты, сохраняются в Parse, можно сохранять любые нужные данные и даже создавать связи между объектами `Installation` и другими объектами. Это позволит отправлять уведомления настроенному и динамическому сегменту базы пользователей.

#### Сохранение данных установки

SDK JavaScript в настоящее время не поддерживает изменение объектов `Installation`. Ознакомьтесь с руководством по уведомлениях [iOS](#sending-queries/iOS), [Android](#sending-queries/Android) или [REST](#sending-queries/REST) с помощью переключателя платформы вверху.

#### Отправка уведомлений в ответ на запросы

После сохранения данных на объектах `Installation` можно использовать запрос для выбора подгруппы этих устройств в качестве целевой аудитории. Запросы `Parse.Installation` работают подобно любому другому [запросу Parse](/docs/js_guide#queries).

```js
  var query = new Parse.Query(Parse.Installation);
  query.equalTo('injuryReports', true);

  Parse.Push.send({
    where: query, // Set our Installation query
    data: {
      alert: "Willie Hayes injured by own pop fly."
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

Для запроса можно также использовать каналы. Чтобы отправить уведомление всем подписчикам канала &quot;Giants&quot;, отфильтрованным по пользователям, которые хотят получить обновление счета, можно выполнить следующее:

```js
  var query = new Parse.Query(Parse.Installation);
  query.equalTo('channels', 'Giants'); // Set our channel
  query.equalTo('scores', true);

  Parse.Push.send({
    where: query,
    data: {
      alert: "Giants scored against the A's! It's now 2-2."
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

При хранении связей с другими объектами в классе `Installation` можно также использовать эти связи для запросов. Например, можно отправить такое уведомление всем пользователям, находящимся в районе заданного местонахождения, как показано ниже.

```js
  // Find users near a given location
  var userQuery = new Parse.Query(Parse.User);
  userQuery.withinMiles("location", stadiumLocation, 1.0);

  // Find devices associated with these users
  var pushQuery = new Parse.Query(Parse.Installation);
  pushQuery.matchesQuery('user', userQuery);
  // Send push notification to query
  Parse.Push.send({
    where: pushQuery,
    data: {
      alert: "Free hotdogs at the Parse concession stand!"
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

## Параметры отправки

Функцию уведомлений можно использовать не только для отправки сообщений. В iOS уведомления могут также включать воспроизведение звука, отображаемое число визитки, а также любые пользовательские данные, которые необходимо отправить. В Android возможно даже указать `Intent`, который срабатывает после получения уведомления. Если уведомление зависит от времени, можно также настроить дату истечения срока.

### Настройка уведомлений

Если нужно отправить не только сообщение, можно установить другие поля в словаре `data`. Существуют зарезервированные поля, имеющие специальное значение.

*   **`alert`**: сообщение уведомления.
*   **`badge`**: _(только для iOS)_ значение, указанное в правом верхнем углу значка приложения.. Это поле может быть настроено на значение или на `Increment` для увеличения текущего значения на 1.
*   **`sound`**: _(только для iOS)_ название звукового файла в комплекте приложения.
*   **`content-available`**: _(только для iOS)_ при написании приложения [Киоск](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html) или приложения, использующего удаленные уведомления в фоновом режиме, [представленные в iOS7](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10) (также известные как &quot;Background Push&quot;), установите для этого поля значение 1, чтобы инициировать фоновую загрузку.
*   **`action`**: _(только для Android)_ должен срабатывать метод `Intent` при получении уведомления. Если не указаны значения полей `title` или `alert`, сработает метод `Intent`, но уведомление не будет показано пользователю.
*   **`title`**: _(только для Android)_ значение, отображаемое в уведомлении панели задач Android.

Например, для отправки уведомления, которое увеличивает текущий номер значка на 1 и воспроизводит настраиваемый звук для устройств под управлением iOS, а также отображает определенное название для пользователей Android, можно выполнить следующее:

```js
  Parse.Push.send({
    channels: [ "Mets" ],
    data: {
      alert: "The Mets scored! The game is now tied 1-1.",
      badge: "Increment",
      sound: "cheering.caf",
      title: "Mets Score!"
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

Также можно указать собственные данные в этом словаре. Как упоминается в разделе «Получение уведомлений» для [iOS](#receiving/iOS) и [Android](#receiving/Android), iOS предоставит доступ к этим данным, только если пользователь откроет приложение через уведомление, а Android предоставит эти данные в `Intent`, если он указан.

```js
  var query = new Parse.Query(Parse.Installation);
  query.equalTo('channels', 'Indians');
  query.equalTo('injuryReports', true);
  Parse.Push.send({
    where: query,
    data: {
      action: "com.example.UPDATE_STATUS",
      alert: "Ricky Vaughn was injured in last night's game!",
      name: "Vaughn",
      newsItem: "Man bites dog"
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

### Настройка даты истечения срока действия

Если устройство пользователя выключено или не подключено к Интернету, уведомления не могут быть доставлены. Если ваше уведомление зависит от времени, и его не стоит доставлять поздно -  можно настроить дату истечения срока действия. Это позволяет избежать ненужных уведомлений с информацией, которая может быть уже неактуальной.

Предусмотрено два параметра, предоставленные Parse, при помощи которых можно выполнить настройку даты истечения срока действия для уведомлений. Первый метод `expiration_time` указывает поле `Date`, которое определяет, когда Parse следует прекратить попытки отправки уведомления. Чтобы установить дату истечения срока действия ровно через 1 неделю с этого момента, можно использовать следующее:

```js
var oneDayAway = new Date(...);
var sixDaysAwayEpoch = (new Date(...)).getTime();

Parse.Push.send({
  push_time: oneDayAway,
  expiration_interval: sixDaysAwayEpoch,
  data: {
    alert: "Season tickets on sale until next week!"
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

Или же можно использовать параметр `expiration_interval`, чтобы указать период времени, который должен пройти до истечения срока действия уведомления. Это значение относится к параметру `push_time`, используемому для [планирования уведомлений](#scheduled/JavaScript). То есть уведомление, которое согласно плану должно быть разослано в течение 1 дня, и срок действия которого становит 6 дней, может быть получено в течение недели, начиная с этого момента.

```js
var oneDayAway = new Date(...);
var sixDaysAwayEpoch = (new Date(...)).getTime();

Parse.Push.send({
  push_time: oneDayAway,
  expiration_interval: sixDaysAwayEpoch,
  data: {
    alert: "Season tickets on sale until next week!"
  }
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

### Таргетинг по платформе

При создании кроссплатформенного приложения, возможно вам нужен таргетинг только на устройства iOS или Android. Существует два метода фильтрации этих устройств для таргетинга. Обратите внимание, что обе платформы таргетируются по умолчанию.

В следующих примерах пользователям устройствам Android и iOS будут отправлены разные уведомления.

```js
  // Notification for Android users
  var query = new Parse.Query(Parse.Installation);
  query.equalTo('deviceType', 'android');
  Parse.Push.send({
    where: query,
    data: {
      alert: "Your suitcase has been filled with tiny robots!"
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
  // Notification for iOS users
  var query = new Parse.Query(Parse.Installation);
  query.equalTo('deviceType', 'ios');
  Parse.Push.send({
    where: query,
    data: {
      alert: "Your suitcase has been filled with tiny apples!"
    }
  }, {
    success: function() {
      // Push was successful
    },
    error: function(error) {
      // Handle error
    }
  });
```

## Планирование уведомлений

Можно запланировать отправку уведомления заранее, указав `push_time`. Например, если пользователь планирует напоминание в игре для игры 12PM в полдень по всемирному координированному времени можно запланировать уведомление, отправив:

```js
var tomorrowDate = new Date(...);

var query = new Parse.Query(Parse.Installation);
query.equalTo('user_id', 'user_123');

Parse.Push.send({
  where: query,
  data: {
    alert: "You previously created a reminder for the game today" 
  },
  push_time: tomorrowDate
}, {
  success: function() {
    // Push was successful
  },
  error: function(error) {
    // Handle error
  }
});
```

Если также указать `expiration_interval`, он будет рассчитан, начиная с запланированного времени отправки уведомления, а не с момента создания уведомления. То есть срок действия уведомления, которое согласно плану должно быть разослано в течение недели, со сроком действия в один день, истечет через 8 дней после отправки запроса.

Срок действия не может быть запланирован на прошедшую дату и позже чем за две недели в будущем. Срок действия может соответствовать стандарту ISO 8601 с датой, временем и часовым поясом, как показано в примере выше, или может быть числовым значением, которое представляет собой время начала отсчета UNIX в секундах (всемирное координированное время). Чтобы запланировать уведомление для 08/22/2015 в полдень по всемирному координированному времени, можно установить для `push_time` значение `2015-08-022T12:00:00.000Z` или `1440226800000`.

## Получение уведомлений

SDK JavaScript в настоящее время не поддерживает получение уведомлений.  Сведения о получении уведомлений на устройства iOS и Android см. в руководствах по эксплуатации платформ.
