# 개체

## Parse.Object

Parse에 데이터를 저장하면 `Parse.Object`를 중심으로 빌드됩니다. 각 `Parse.Object`에는 JSON 호환 데이터의 키-값 쌍이 포함됩니다. 이 데이터에는 스키마가 없습니다. 즉, 각 `Parse.Object`에 어떤 키가 있는지 미리 지정할 필요가 없습니다. 어떤 키-값 쌍이든 원하는 대로 설정하면 백엔드에서 저장합니다.

예를 들어 어떤 게임의 고득점을 추적하는 경우 싱글 `Parse.Object` 개체에 다음 항목이 포함될 수 있습니다.

```js
score: 1337, playerName: "Sean Plott", cheatMode: false
```

키는 영숫자 문자열이어야 합니다. 값은 문자열이나 숫자, 부울, 배열이나 딕셔너리 등 JSON 인코딩될 수 있는 항목이면 모두 값이 될 수 있습니다.

각 `Parse.Object`는 특정 하위 클래스의 인스턴스이며 클래스 이름을 사용하여 여러 데이터의 종류를 구별합니다. 예를 들어 고득점 개체를 `GameScore`라고 부를 수 있습니다. 클래스 이름과 키 이름을 각각 NameYourClassesLikeThis와 nameYourKeysLikeThis 같이 지정하여 코드를 보기 좋게 만드는 것이 좋습니다.

새 하위 클래스를 만들려면 `Parse.Object.extend` 메서드를 사용합니다.  모든 `Parse.Query`는 같은 클래스 이름을 가진 모든 `Parse.Object`의 새 클래스 인스턴스를 반환합니다.  `Backbone.Model`에 익숙한 경우 이미 `Parse.Object`의 사용 방법을 알고 있을 것입니다.  같은 기능을 수행하도록 고안되었기 때문입니다.

```js
// Simple syntax to create a new subclass of Parse.Object.
var GameScore = Parse.Object.extend("GameScore");

// Create a new instance of that class.
var gameScore = new GameScore();

// Alternatively, you can use the typical Backbone syntax.
var Achievement = Parse.Object.extend({ className: "Achievement" });
```

`Parse.Object`의 하위 클래스에 메서드와 속성을 더 추가할 수 있습니다.

```js
// A complex subclass of Parse.Object
var Monster = Parse.Object.extend("Monster", {
  // Instance methods
  hasSuperHumanStrength: function () {
    return this.get("strength") > 18;
  },
  // Instance properties go in an initialize method
  initialize: function (attrs, options) {
    this.sound = "Rawr"
  }
}, {
  // Class methods
  spawn: function(strength) {
    var monster = new Monster();
    monster.set("strength", strength);
    return monster;
  }
});

var monster = Monster.spawn(200);
alert(monster.strength());  // Displays 200.
alert(monster.sound); // Displays Rawr.
```

## 개체 저장

위에서 설명한 `GameScore`를 Parse Cloud에 저장한다고 가정해 보겠습니다. 인터페이스는 `Backbone.Model`과 비슷하며 `save` 메서드가 포함되어 있습니다.

```js
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();

gameScore.set("score", 1337);
gameScore.set("playerName", "Sean Plott");
gameScore.set("cheatMode", false);
gameScore.save(null, {
  success: function(gameScore) {
    // Execute any logic that should take place after the object is saved.
    alert('New object created with objectId: ' + gameScore.id);
  },
  error: function(gameScore, error) {
    // Execute any logic that should take place if the save fails.
    // error is a Parse.Error with an error code and description.
    alert('Failed to create new object, with error code: ' + error.description);
  }
});
```

이 코드를 실행한 후 실제로 어떤 일이 발생하는지 궁금할 것입니다. 데이터가 저장되었는지 확인하려면 Parse에서 앱의 Data Browser를 살펴볼 수 있습니다. 브라우저에 다음과 같이 표시됩니다.

```json
objectId: "xWMyZ4YEGZ", score: 1337, playerName: "Sean Plott", cheatMode: false, createdAt:"2011-06-10T18:33:42Z", updatedAt:"2011-06-10T18:33:42Z"
```

여기에 주목해야 할 두 가지 사항이 있습니다. 이 코드를 실행하기 전에 `GameScore`라는 새 클래스를 설정할 필요가 없었습니다. Parse 앱이 처음 이 클래스를 만나면 클래스를 천천히 만듭니다.

또한 편의를 위해 제공되는 몇 가지 필드도 지정할 필요가 없습니다. `objectId`는 저장된 각 개체의 고유 ID입니다. `createdAt`과 `updatedAt`은 각 개체가 클라우드에 생성되고 마지막으로 수정된 시간을 나타냅니다. 이러한 각 필드는 Parse에서 채우므로 저장 작업이 완료될 때까지 `Parse.Object`에 존재하지 않습니다.

원하는 경우에는 대신 `save`에 대한 호출에 직접 특성을 설정할 수도 있습니다.

```js
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();
gameScore.save({
  score: 1337,
  playerName: "Sean Plott",
  cheatMode: false
}, {
  success: function(gameScore) {
    // The object was saved successfully.
  },
  error: function(gameScore, error) {
    // The save failed.
    // error is a Parse.Error with an error code and description.
  }
});
```

## 개체 검색

클라우드에 손쉽게 데이터를 저장할 수 있으며 데이터 검색은 더욱 간편합니다. `objectId`가 있으면 `Parse.Query`를 사용하여 전체 `Parse.Object`를 검색할 수 있습니다.

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.get("xWMyZ4YEGZ", {
  success: function(gameScore) {
    // The object was retrieved successfully.
  },
  error: function(object, error) {
    // The object was not retrieved successfully.
    // error is a Parse.Error with an error code and description.
  }
});
```

`Parse.Object`에서 값을 받으려면 `get` 메서드를 사용합니다.

```js
var score = gameScore.get("score");
var playerName = gameScore.get("playerName");
var cheatMode = gameScore.get("cheatMode");
```

다음 세 가지 특수 값이 속성으로 제공됩니다.

```js
var objectId = gameScore.id;
var updatedAt = gameScore.updatedAt;
var createdAt = gameScore.createdAt;
```

Parse Cloud에 이미 있고 최신 데이터를 사용하는 개체를 새로 고쳐야 하는 경우 다음과 같이 `fetch` 메서드를 호출할 수 있습니다.

```js
myObject.fetch({
  success: function(myObject)
    // The object was refreshed successfully
  },
  error: function(myObject, error) {
    // The object was not refreshed successfully.
    // error is a Parse.Error with an error code and description.
  }
});
```

## 개체 업데이트

개체를 간단히 업데이트할 수 있습니다. 개체에 몇 가지 새로운 데이터를 설정하고 저장 메서드를 호출하면 됩니다. 예:

```js
// Create the object.
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();
gameScore.set("score", 1337);
gameScore.set("playerName", "Sean Plott");
gameScore.set("cheatMode", false);
gameScore.set("skills", ["pwnage", "flying"]);
gameScore.save(null, {
  success: function(gameScore) {
    // Now let's update it with some new data. In this case, only cheatMode and score
    // will get sent to the cloud. playerName hasn't changed.
    gameScore.set("cheatMode", true);
    gameScore.set("score", 1338);
    gameScore.save();
  }
});
```

Parse에서는 변경된 데이터를 자동으로 파악하므로 &quot;변경된&quot; 필드만 Parse Cloud로 전송됩니다. 업데이트하려고 하지 않았던 데이터가 포함될까봐 걱정할 필요가 없습니다.

### 카운터

위의 예는 일반적인 사용 사례를 포함합니다. &quot;score&quot; 필드는 플레이어의 최근 점수로 계속 업데이트되어야 하는 카운터입니다. 위의 메서드를 사용하면 작동은 하지만 작성하기 번거로우며 같은 여러 클라이언트가 같은 카운터를 업데이트하려는 경우 문제가 발생할 수 있습니다.

카운터 유형 데이터의 저장을 돕기 위해 Parse에서는 모든 숫자 필드를 아주 조금씩 증가하거나 감소하는 메서드를 제공합니다. 이에 따라 동일한 업데이트를 다음과 같이 다시 작성할 수 있습니다.

```js
gameScore.increment("score");
gameScore.save();
```

`increment`에 두 번째 인수를 전달하여 원하는 만큼 높일 수도 있습니다. 값을 지정하지 않으면 기본적으로 1이 사용됩니다.

### 배열

배열 데이터의 저장을 돕기 위해 지정된 키와 연결된 배열을 아주 조금씩 변경하는 데 사용할 수 있는 다음 세 가지 작업이 있습니다.

*   `add`는 지정된 개체를 배열 필드의 끝에 추가합니다.
*   `addUnique`는 이미 배열 필드에 포함되어 있지 않은 경우에만 지정된 개체를 추가합니다. 삽입 위치는 보장되지 않습니다.
*   `remove`는 배열 필드에서 지정된 개체의 모든 인스턴스를 삭제합니다.

예를 들어 세트와 유사한 &quot;skills&quot; 필드에 다음과 같이 항목을 추가할 수 있습니다.

```js
gameScore.addUnique("skills", "flying");
gameScore.addUnique("skills", "kungfu");
gameScore.save();
```

현재는 동일한 저장으로 배열에서 항목을 아주 조금씩 추가하거나 삭제할 수는 없습니다. 다른 모든 종류의 배열 작업 사이에 `save`를 호출해야 합니다.

## 개체 삭제

클라우드에서 개체를 삭제하려면 다음과 같이 하세요.

```js
myObject.destroy({
  success: function(myObject) {
    // The object was deleted from the Parse Cloud.
  },
  error: function(myObject, error) {
    // The delete failed.
    // error is a Parse.Error with an error code and description.
  }
});
```

다음과 같이 `unset` 메서드로 개체에서 싱글 필드를 삭제할 수 있습니다.

```js
// After this, the playerName field will be empty
myObject.unset("playerName");
// Saves the field deletion to the Parse Cloud
myObject.save();
```

## 관계형 데이터

개체는 다른 개체와 관련될 수 있습니다. 예를 들어 블로깅 앱에서 `Post` 개체 하나에 여러 개의 `Comment` 개체가 있을 수 있습니다. Parse는 일대일, 일대다, 다대다와 같은 모든 종류의 관계를 지원합니다.

### 일대일 및 일대다 관계

일대일 및 일대다 관계는 `Parse.Object`를 다른 개체의 값으로 저장하여 모델링합니다. 예를 들어 한 블로깅 앱의 각 `Comment`는 하나의 `Post`와 대응할 수 있습니다.

싱글 `Comment`를 가지는 새로운 `Post`를 만들려면 다음과 같이 작성할 수 있습니다.

```js
  // Declare the types.
  var Post = Parse.Object.extend("Post");
  var Comment = Parse.Object.extend("Comment");

  // Create the post var myPost = new Post();
  myPost.set("title", "I'm Hungry");
  myPost.set("content", "Where should we go for lunch?");

  // Create the comment var myComment = new Comment();
  myComment.set("content", "Let's do Sushirrito.");

  // Add the post as a value in the comment
  myComment.set("parent", myPost);

  // This will save both myPost and myComment
  myComment.save();
```

Parse 프레임워크는 참조된 개체를 한 곳에만 저장하여 일관성을 유지합니다. 다음과 같이 `objectId`만 사용하여 개체를 링크할 수도 있습니다.

```js
var post = new Post();
post.id = "1zEcyElZ80";
myComment.set("parent", post);
```

기본적으로 개체를 가져올 때 관련된 `Parse.Object`는 가져오지 않습니다.  개체의 값은 다음과 같이 가져올 때까지 검색할 수 없습니다.

```js
var post = fetchedComment.get("parent");
post.fetch({
  success: function(post) {
    var title = post.get("title");
  }
});
```

### 다대다 관계

다대다 관계는 `Parse.Relation`을 사용하여 모델링합니다. 키에 `Parse.Object` 배열을 저장하는 것과 비슷하지만 관계에 있는 개체 전부를 한 번에 불러올 필요가 없다는 점이 다릅니다.  또한 이 방식을 사용하면 `Parse.Relation`이 `Parse.Object` 방식의 배열보다 훨씬 더 많은 개체로 확장할 수 있습니다.  예를 들어 `User`에게 좋아하는 `Posts`가 많을 수 있습니다. 이 경우 `relation`을 사용하여 `User`가 좋아하는 `Posts` 세트를 저장할 수 있습니다.  `Post`를 `User`의 '좋아요' 목록에 추가하려면 다음과 같이 할 수 있습니다.

```js
var user = Parse.User.current();
var relation = user.relation("likes");
relation.add(post);
user.save();
```

`Parse.Relation`에서 게시물을 제거할 수 있습니다.

```js
relation.remove(post);
user.save();
```

save를 호출하기 전에 `add`와 `remove`를 여러 번 호출할 수 있습니다.

```js
relation.remove(post1);
relation.remove(post2);
user.save();
```

`Parse.Object` 배열을 `add`와 `remove`에 전달할 수 있습니다.

```js
relation.add([post1, post2, post3]);
user.save();
```

기본적으로 이러한 관계에 있는 개체의 목록은 다운로드되지 않습니다.  `query`에서 반환된 `Parse.Query`를 사용하여 사용자가 좋아하는 게시물의 목록을 가져올 수 있습니다.  코드는 다음과 같습니다.

```js
relation.query().find({
  success: function(list) {
    // list contains the posts that the current user likes.
  }
});
```

게시물의 일부만 가져오고 싶은 경우 다음과 같이 쿼리에서 반환한 `Parse.Query`에 조건을 추가할 수 있습니다.

```js
var query = relation.query();
query.equalTo("title", "I'm Hungry");
query.find({
  success:function(list) {
    // list contains post liked by the current user which have the title "I'm Hungry".
  }
});
```

`Parse.Query`에 대한 자세한 내용은 이 가이드의 쿼리 부분을 참조하세요. `Parse.Relation`은 쿼리에 사용되는 `Parse.Object` 배열과 유사하게 작동하므로 개체 배열에서 사용할 수 있는 모든 쿼리를 `Parse.Relation`에서 수행할 수 있습니다.

## 데이터 유형

지금까지 `String`, `Number` 및 `Parse.Object` 유형의 값을 사용했습니다. Parse는 JavaScript `Date`와 `null`도 지원합니다.

JavaScript `Object` 및 JavaScript `Array`를 중첩하여 싱글 `Parse.Object` 내에 더욱 구조화된 데이터를 저장할 수 있습니다.

예:

```js
var number = 42;
var string = "the number is " + number;
var date = new Date();
var array = [string, number];
var object = { number: number, string: string };

var BigObject = Parse.Object.extend("BigObject");
var bigObject = new BigObject();
bigObject.set("myNumber", number);
bigObject.set("myString", string);
bigObject.set("myDate", date);
bigObject.set("myArray", array);
bigObject.set("myObject", object);
bigObject.set("myNull", null);
bigObject.save();
```

`Parse.Object`의 크기는 128KB를 넘지 않아야 합니다.

Parse에서 데이터를 처리하는 방식에 대한 자세한 내용은 [데이터 및 보안](#data)에 대한 설명서를 참조하세요.
