# Файлы

## ParseFile

`ParseFile` позволяет хранить файлы приложения в облаке, иначе они будут слишком объемными, или их будет сложно поместить в обычный объект `ParseObject`. Чаще всего пользователи хранят изображения, но также можно хранить документы, видео, музыку и любые другие бинарные данные (до 10 мегабайт).

Начало работы с `ParseFile` представляет собой несложный процесс. Для начала следует располагать данными в форме `byte[]`, затем создать с ними класс `ParseFile`. В этом примере просто используется строка:

```java
byte[] data = "Working at Parse is great!".getBytes();
ParseFile file = new ParseFile("resume.txt", data);
```

Обратите внимание на то, что в этом примере файлу дается название `resume.txt`. Необходимо обратить внимание на два момента: 

*   Не беспокойтесь о конфликте названий файлов. Каждый загруженный файл получает уникальный идентификатор, поэтому не возникает проблем при загрузке нескольких файлов под названием `resume.txt`.
*   Важно давать файлам названия с определенным расширением файла. Это позволяет Parse определить тип файла и соответствующим образом его обработать. Поэтому при хранении изображений в формате PNG убедитесь, что файл имеет расширение `.png`.

Затем необходимо загрузить файл в облако. Как и для объекта `ParseObject`, существует множество вариантов метода `save`, который можно использовать, в зависимости от подходящего типа обратного вызова и обработки ошибок.

```java
file.saveInBackground();
```

Наконец, после завершения сохранения можно ассоциировать класс `ParseFile` с объектом `ParseObject`, как и любые другие данные:

```java
ParseObject jobApplication = new ParseObject("JobApplication");
jobApplication.put("applicantName", "Joe Smith");
jobApplication.put("applicantResumeFile", file);
jobApplication.saveInBackground();
```

Процесс извлечения предполагает вызов одного из вариантов метода `getData` для объекта `ParseObject`. Ниже представлен пример извлечения файла анкеты из другого объекта JobApplication:

```java
ParseFile applicantResume = (ParseFile)anotherApplication.get("applicantResumeFile");
applicantResume.getDataInBackground(new GetDataCallback() {
    public void done(byte[] data, ParseException e) {
        if (e == null) {
            // data has the bytes for the resume
        } else {
            // something went wrong
        }
    }
});
```

Как и для объекта `ParseObject`, вероятнее всего, вы пожелаете использовать фоновую версию метода `getData`.

## Ход выполнения

При помощи ParseFile можно получить ход выполнения выгрузки и загрузки путем отправки ProgressCallback к методу `saveInBackground` и `getDataInBackground`. Например:

```java
byte[] data = "Working at Parse is great!".getBytes();
ParseFile file = new ParseFile("resume.txt", data);

file.saveInBackground(new SaveCallback() {
    public void done(ParseException e) {
        // Handle success or failure here ...
    }
}, new ProgressCallback() {
    public void done(Integer percentDone) {
        // Update your progress spinner here. percentDone will be between 0 and 100.
    }
});
```

можно удалить файлы, на которые ссылаются объекты, при помощи интерфейса [REST API](/docs/rest#files-deleting). Для получения разрешения на удаление файла нужно предоставить главный ключ.

Если на ваши файлы не ссылаются объекты в приложении, будет невозможно удалить их через интерфейс REST API. Можно запросить очистку неиспользуемых файлов на странице настроек приложения. Помните, что это может нарушить функции, которые зависят от доступа к файлам, на которые нет ссылок, через свойство URL. Файлы, которые на данный момент связаны с объектом, не будут затронуты.
