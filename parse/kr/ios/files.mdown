# 파일

## PFFile

`PFFile`을 사용하면 일반 `%{ParseObject}`에 보관하기에 너무 크거나 번거로운 앱 파일을 클라우드에 저장할 수 있습니다. 가장 일반적인 사용 사례는 이미지 저장이지만 문서와 동영상, 음악, 기타 바이너리 데이터(최대 10MB) 저장에도 사용할 수 있습니다.

<div class='tip info'><div>
사용자가 사진을 찍고 곧바로 Parse에 업로드할 수 있도록 하는 앱을 만드는 방법은 [이미지 저장 튜토리얼](/tutorials/saving-images)을 참조하세요.
</div></div>

`PFFile`은 쉽게 시작할 수 있습니다. 먼저 `NSData` 형식의 데이터가 있어야 합니다. 그런 다음 이 데이터로 `PFFile`을 만듭니다. 다음 예에서는 문자열을 사용합니다.

```objc
NSData *data = [@"Working at Parse is great!" dataUsingEncoding:NSUTF8StringEncoding];
PFFile *file = [PFFile fileWithName:@"resume.txt" data:data];
```

이 예에서는 파일 이름을 `resume.txt`로 지정합니다. 여기에는 주목해야 할 두 가지 사항이 있습니다. 

*   파일 이름이 충돌할 것을 염려할 필요가 없습니다. 각 업로드에는 고유 ID가 부여되므로 `resume.txt`라는 파일을 여러 개 업로드해도 문제가 되지 않습니다.
*   파일에 파일 확장명이 있는 이름을 지정하는 것이 중요합니다. Parse에서는 확장명을 통해 파일 유형을 파악하고 이에 따라 처리합니다. 즉, PNG 이미지를 저장하는 경우 파일 이름이 `.png`로 끝나야 합니다.

그런 다음 파일을 클라우드에 저장합니다. `%{ParseObject}`에서와 같이 본인에게 맞는 콜백 종류나 오류 처리에 따라 사용할 수 있는 `save` 메서드의 다양한 변형이 있습니다.

```objc
[file saveInBackground];
```

마지막으로, 저장이 완료되면 다른 데이터와 마찬가지로 `PFFile`을 `%{ParseObject}`에 연결할 수 있습니다.

```objc
PFObject *jobApplication = [PFObject objectWithClassName:@"JobApplication"];
jobApplication[@"applicantName"] = @"Joe Smith";
jobApplication[@"applicantResumeFile"] = file;
[jobApplication saveInBackground];
```

다시 검색하면 `PFFile`의 `getData` 변형 중 하나를 호출합니다. 다음 예에서는 다른 JobApplication 개체에서 이력서 파일을 검색합니다.

```objc
PFFile *applicantResume = anotherApplication[@"applicantResumeFile"];
NSData *resumeData = [applicantResume getData];
```

`%{ParseObject}`에서와 같이 `getData`의 백그라운드 버전을 사용할 가능성이 높습니다.

## 이미지

이미지를 `NSData`로 변환한 다음 `PFFile`을 사용하여 쉽게 저장할 수 있습니다. `PFFile`로 저장하려는 `image`라는 `UIImage`가 있다고 가정해 보겠습니다.

```objc
NSData *imageData = UIImagePNGRepresentation(image);
PFFile *imageFile = [PFFile fileWithName:@"image.png" data:imageData];
PFObject *userPhoto = [PFObject objectWithClassName:@"UserPhoto"];
userPhoto[@"imageName"] = @"My trip to Hawaii!";
userPhoto[@"imageFile"] = imageFile;
[userPhoto saveInBackground];
```

`PFFile`은 `userPhoto` 개체를 저장할 때 업로드됩니다. 또한 `PFFile`의 [업로드 및 다운로드 진행 상태](/docs/kr/ios_guide#files-progress)를 추적할 수도 있습니다.

이미지를 다시 검색하면 `PFFile`의 `getData` 변형 중 하나를 호출합니다. 다음 예에서는 `anotherPhoto`라는 다른 `UserPhoto`에서 이미지 파일을 검색합니다.

```objc
PFFile *userImageFile = anotherPhoto[@"imageFile"];
[userImageFile getDataInBackgroundWithBlock:^(NSData *imageData, NSError *error) {
    if (!error) {
        UIImage *image = [UIImage imageWithData:imageData];
    }
}];
```

## 진행 상태

`PFFile`을 사용하는 업로드와 다운로드의 진행 상태는 각각 `saveInBackgroundWithBlock:progressBlock:` 및 `getDataInBackgroundWithBlock:progressBlock:`을 사용하여 쉽게 가져올 수 있습니다. 예:

```objc
NSData *data = [@"Working at Parse is great!" dataUsingEncoding:NSUTF8StringEncoding];
PFFile *file = [PFFile fileWithName:@"resume.txt" data:data];
[file saveInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {
    // Handle success or failure here ... 
} progressBlock:^(int percentDone) {
    // Update your progress spinner here. percentDone will be between 0 and 100.
}];
```

[REST API](/docs/rest#files-deleting)를 사용하여 개체에서 참조하는 파일을 삭제할 수 있습니다. 파일을 삭제할 수 있게 하려면 마스터 키를 제공해야 합니다.

앱의 어떤 개체에서도 파일을 참조하지 않는 경우 REST API를 통해 파일을 삭제할 수 없습니다. 앱의 설정 페이지에서 사용되지 않는 파일의 삭제를 요청할 수 있습니다. 이렇게 하면 URL 속성을 통해 참조되지 않는 파일 액세스에 의존하는 기능이 중단될 수 있습니다. 개체와 현재 연결된 파일은 영향을 받지 않습니다.
