# 用户

许多应用的核心理念是，用户帐户保护应能让用户安全访问他们的信息。我们提供一个类名为 `Parse.User` 的专门用户类，可自动处理用户帐户管理需要的很多功能。

您可以使用这个用户类在您的应用程序中添加用户帐户功能。

`Parse.User` 是 `Parse.Object` 的一个子类，拥有完全相同的特性，如灵活架构、自动留存和键值接口。`Parse.Object` 上的所有方法也存在于 `Parse.User` 中。所不同的是 Parse.User 具有针对用户帐户的一些特殊的附加功能。

## 属性

`Parse.User` 有几个值可以将其与 `Parse.Object` 区分开：

*   用户名：用户的用户名（必填）。
*   密码：用户的密码（注册时必填）。
*   电子邮箱：用户的电子邮箱地址（选填）。

我们在浏览用户的各种用例时，会逐条仔细查看这些信息。

## 注册

您的应用程序要做的第一件事就是让用户注册。以下代码阐释了典型注册：

```js
var user = new Parse.User();
user.set("username", "my name");
user.set("password", "my pass");
user.set("email", "email@example.com");

// other fields can be set just like with Parse.Object
user.set("phone", "415-392-0202");
user.signUp(null, {
  success: function(user) {
    // Hooray! Let them use the app now.
  },
  error: function(user, error) {
    // Show the error message somewhere and let the user try again.
    alert("Error: " + error.code + " " + error.message);
  }
});
```

这个调用将在您的 Parse 应用中异步创建一个新的用户。创建前，它还会检查确保用户名和邮箱唯一。此外，它还将密码安全散列在云中。我们从来不以纯文本格式储存密码，也不会以纯文本格式将密码传输回客户端。

注意，我们使用的是 `signUp` 方法，而不是 `save` 方法。应始终使用 `signUp` 方法创建新的 `Parse.User`。调用 `save` 可以完成用户的后续更新。

若未成功注册，您应该查看返回的错误对象。最可能的情况就是该用户名或邮箱已被其他用户使用。你应该将这种情况清楚地告诉用户，并要求他们尝试不同的用户名。

您可以使用电子邮箱地址作为用户名。只需让您的用户输入他们的电子邮箱，但是需要将它填写在用户名属性中 － `Parse.User` 将可以正常运作。我们将在重置密码部分说明是如何处理这种情况的。

## 登录

当然，您让用户注册后，需要让他们以后登录到他们的帐户。要如此，您可以使用类方法 `logIn`。

```js
Parse.User.logIn("myname", "mypass", {
  success: function(user) {
    // Do stuff after successful login.
  },
  error: function(user, error) {
    // The login failed. Check error to see why.
  }
});
```

## 验证电子邮箱

在应用程序的设置中启用电子邮箱验证，可以让应用程序将某些使用体验提供给验证过电子邮箱地址的用户。电子邮箱验证会将 `emailVerified` 键添加到 `Parse.User` 目标中。设置或修改 `Parse.User` 的 `email` 后，`emailVerified` 被设置为 `false`。随后，Parse 会向用户发送一个邮件，其中包含一个链接，可将 `emailVerified` 设置为 `true`。

有三种 `emailVerified` 状态需要考虑：

1.  `true` － 用户通过点击 Parse 发送给他们的链接确认电子邮箱地址。最初创建用户帐户时，`Parse.Users` 没有 `true` 值。
2.  `false` － `Parse.User` 对象最后一次刷新时，用户未确认其电子邮箱地址。若 `emailVerified` 为 `false`，可以考虑调用 `Parse.User` 中的 `fetch`。
3.  _缺失_ － 电子邮箱验证关闭或 `Parse.User` 没有 `email` 时创建了 `Parse.User`。

## 当前用户

若用户每次打开您的应用时都要登录，会很麻烦。您可以用缓存的当前 `Parse.User` 对象来避免这一繁琐操作。

每次您使用任何注册或登录方法时，用户都被缓存到 localStorage 中。您可以把这个缓存作为一个对话，并自动假设用户已登录：

```js
var currentUser = Parse.User.current();
if (currentUser) {
  // do stuff with the user
} else {
  // show the signup or login page
}
```

您可以通过注销用户来清除他们的当前登录状态：

```js
Parse.User.logOut();
var currentUser = Parse.User.current(); // this will now be null
```

## 设置当前用户

如果您已经创建了自己的身份验证例程，或以其他方式使用户在服务器端登录，您现在可以将会话令牌传递到客户端并使用 `become` 方法。这种方法将确保会话令牌在设置当前用户之前有效。

```js
Parse.User.become("session-token-here").then(function (user) 
  // The current user is now set to user.
}, function (error) {
  // The token could not be validated.
});
```

## 用户对象的安全性

`Parse.User` 类默认是受保护的。储存在 `Parse.User` 中的数据只能由用户修改。默认情况下，数据仍然可以被任何客户端读取。因此，一些 `Parse.User` 对象通过身份验证后可以修改，但是还有一些是只读形式。

特别地，您不能调用任何 `save` 或 `delete` 方法，除非使用已验证的方法获取了 `Parse.User`，如 `logIn` 或 `signUp`。这确保只有用户可以修改他们自己的数据。

以下阐释了这一安全策略：

```js
var user = Parse.User.logIn("my_username", "my_password", {
  success: function(user) {
    user.set("username", "my_new_username");  // attempt to change username
    user.save(null, {
      success: function(user) {
        // This succeeds, since the user was authenticated on the device
        // Get the user from a non-authenticated method
        var query = new Parse.Query(Parse.User);
        query.get(user.objectId, {
          success: function(userAgain) {
            userAgain.set("username", "another_username");
            userAgain.save(null, {
              error: function(userAgain, error) {
                // This will error, since the Parse.User is not authenticated
              }
            });
          }
        });
      }
    });
  }
});
```

从 `Parse.User.current()` 获得的 `Parse.User` 始终需要验证。

若您要检查 `Parse.User` 是否已验证，可以调用 `authenticated` 方法。您不需要检查通过已验证方法获取的 `Parse.User` 对象的 `authenticated`。

## 其他对象的安全性

适用于 `Parse.User` 的安全模型同样适用于其他对象。对于任何对象，您都可以指定哪些用户可以查看该对象，哪些用户可以修改该对象。为支持这类安全性，每个对象都有一个[访问控制列表](http://en.wikipedia.org/wiki/Access_control_list)，由 `Parse.ACL` 类实施。

使用 `Parse.ACL` 的最简单的方法就是规定某个对象只能由某一用户只读或只写。要创建这样一个对象，首先必须有一个已登录的 `Parse.User`。然后，`new Parse.ACL(user)` 生成一个限制用户访问权限的 `Parse.ACL`。像其他属性一样，保存对象时，对象的 ACL 会更新。因此，就会创建一个只能由当前用户访问的专用注释。

```js
var Note = Parse.Object.extend("Note");
var privateNote = new Note();
privateNote.set("content", "This note is private!");
privateNote.setACL(new Parse.ACL(Parse.User.current()));
privateNote.save();
```

随后，该注释仅供当前用户访问，不过用户可以从其注册的所有设备进行访问。对于您希望对用户数据（如个人待办事项列表）启用多设备访问权限的应用程序，这项功能非常有用。

还可以按每个用户进行授权。您可以用 `setReadAccess` 和 `setWriteAccess` 单独向 `Parse.ACL` 添加权限。例如，假设您要向一组用户发送消息，每个用户都有权限阅读和删除消息：

```js
var Message = Parse.Object.extend("Message");
var groupMessage = new Message();
var groupACL = new Parse.ACL();

// userList is an array with the users we are sending this message to.
for (var i = 0; i < userList.length; i++) {
  groupACL.setReadAccess(userList[i], true);
  groupACL.setWriteAccess(userList[i], true);
}

groupMessage.setACL(groupACL);
groupMessage.save();
```

您还可以用 `setPublicReadAccess` 和 `setPublicWriteAccess` 一次性向所有用户授权。该操作可实现让众多用户在消息公告板上发表评论的模式。例如，要创建仅作者可以编辑所有人可以阅读的帖子：

```js
var publicPost = new Post();
var postACL = new Parse.ACL(Parse.User.current());
postACL.setPublicReadAccess(true);
publicPost.setACL(postACL);
publicPost.save();
```

进行禁止操作，如删除您没有写权限的对象，会导致 `Parse.Error.OBJECT_NOT_FOUND` 错误代码。处于安全考虑，这样能阻止客户端区分存在但是受保护的对象 id 和完全不存在的对象 id。

## 重置密码

您刚刚将密码录入系统时就忘记密码的情况是存在的。这种情况下，我们的库提供一种方法让用户安全地重置密码。

若要开始密码重置流程，让用户填写电子邮箱地址，并调用：

```js
Parse.User.requestPasswordReset("email@example.com", {
  success: function() {
    // Password reset request was sent successfully
  },
  error: function(error) {
    // Show the error message somewhere
    alert("Error: " + error.code + " " + error.message);
  }
});
```

该操作将尝试将给定的电子邮箱与用户电子邮箱或用户名字段进行匹配，并向用户发送密码重置邮件。这样，您可以选择让用户使用其电子邮箱作为用户名，或者您可以单独收集它并把它储存在电子邮箱字段。

密码重置流程如下：

1.  用户输入电子邮箱地址，请求重置密码。
2.  Parse 向其电子邮箱发送一封包含专用密码重置链接的邮件。
3.  用户点击重置链接，进入专用 Parse 页面，用户在该页面输入新密码。
4.  用户输入新密码。现在，用户的密码已经被重置为他们指定的值。

注意，该流程中的消息传送操作将根据您在 Parse 上创建该应用时指定的名称引用您的应用程序。

## 查询

若要查询用户，您只需针对 `Parse.User` 创建一个新的 `Parse.Query`：

```js
var query = new Parse.Query(Parse.User);
query.equalTo(gender, "female");
// find all the women
query.find({
  success: function(women) {
    // Do stuff
  }
});
```

## 关联

关联是让 `Parse.User` 立即可用。例如，假设您正在创建一款博客应用程序。若要为用户保存新的帖子并检索其所有帖子：

```js
var user = Parse.User.current();
// Make a new post
var Post = Parse.Object.extend("Post");
var post = new Post();
post.set("title", "My New Post");
post.set("body", "This is some great content.");
post.set("user", user);
post.save(null, {
  success: function(post) {
    // Find all posts by the current user
    var query = new Parse.Query(Post);
    query.equalTo("user", user);
    query.find({
      success: function(usersPosts) {
        // userPosts contains all of the posts by the current user.
      }
    });
  }
});
```

## Facebook 用户

Parse 提供了一种简单的方法，用于将 Facebook 与您的应用程序整合起来。`Parse.FacebookUtils` 类将 `Parse.User` 与 Facebook Javascript SDK 整合，从而将您的用户与其 Facebook 身份轻松联系起来。

利用我们的 Facebook 整合功能，您可以将通过验证的 Facebook 用户与 `Parse.User` 相关联。只需几行代码，您就可以在应用程序中提供&ldquo;log in with Facebook&rdquo;（使用 Facebook 登录）选项，并能够将用户数据保存在 Parse 中。

### 设置

若要开始通过 Parse 使用 Facebook，您需要：

1.  [设置 Facebook 应用程序](https://developers.facebook.com/apps)（若您尚未设置）。选择&ldquo;Select how your app integrates with Facebook&rdquo;（选择您的应用程序与 Facebook 整合的方式）下方的&ldquo;Website with Facebook Login&rdquo;（带有 Facebook 登录的网站），并输入网站地址。
2.  在您的 Parse 应用程序设置页面添加应用程序的 Facebook 应用程序 ID。
3.  遵从[这些指示](https://developers.facebook.com/docs/reference/javascript/)，给您的应用程序加载 Facebook Javascript SDK。
4.  使用对 `Parse.FacebookUtils.init()` 的调用代替对 `FB.init()` 的调用。例如，如果您异步加载 Facebook SDK，您的 `fbAsyncInit` 函数将如此实现：
```js
window.fbAsyncInit = function() {
  Parse.FacebookUtils.init({
   appId: 'YOUR_APP_ID', // Facebook App ID
   channelUrl: '//WWW.YOUR_DOMAIN.COM/channel.html', // Channel File
   status: true, // check login status
   cookie: true, // enable cookies to allow Parse to access the session
   xfbml: true  // parse  });
  // Additional initialization code here
};
```

若您遇到与 Facebook 相关的任何问题，请参阅[ Facebook 官方入门指南](https://developers.facebook.com/docs/reference/javascript/)。

Parse 用户可通过以下两种主要方法使用 Facebook：(1) 以 Facebook 用户身份登录，并创建 `Parse.User`，或者 (2) 将 Facebook 与已有的 `Parse.User` 关联。

### 登录与注册

`Parse.FacebookUtils` 提供一种方法让您的 `Parse.User` 可以通过 Facebook 登录或注册。这可以使用 `logIn()` 方法实现：

```js
Parse.FacebookUtils.logIn(null, {
  success: function(user) {
    if (!user.existed()) {
      alert("User signed up and logged in through Facebook!");
    } else {
      alert("User logged in through Facebook!");
    }
  },
  error: function(user, error) {
    alert("User cancelled the Facebook login or did not fully authorize.");
  }
});
```

该代码运行时，会出现以下情况：

1.  用户会看到 Facebook 登录对话框。
2.  用户通过 Facebook 验证，您的应用程序会收到回调。
3.  我们的 SDK 会收到 Facebook 数据并将其保存在 `Parse.User` 中。如果是基于 Facebook ID 的新用户，那么该用户随后会被创建。
4.  您的 `success` 回调被该用户调用。

您可以选择性提供用逗号隔开的字符串，该字符串规定您的应用程序向 Facebook 用户要求什么[权限](https://developers.facebook.com/docs/authentication/permissions/)。例如：

```js
Parse.FacebookUtils.logIn("user_likes,email", {
  success: function(user) {
    // Handle successful login
  },
  error: function(user, error) {
    // Handle errors and cancellation
  }
});
```

`Parse.User` 整合不需要任何权限可以即时使用（即 `null` 或者不指定任何权限都完全可以接受）。[在 Facebook 开发人员指南上阅读关于权限的更多信息。](https://developers.facebook.com/docs/reference/api/permissions/)

<div class='tip info'><div>
您可以自行决定在用户验证后记录从 Facebook 用户处获取的所需的任何数据。要完成这一操作，您需要[通过 Facebook SDK 进行一项图表查询](https://parse.com/questions/how-can-i-find-parse-users-that-are-facebook-friends-with-the-current-user)。
</div></div>

### 关联

若您想要将已有的 `Parse.User` 与 Facebook 帐户关联起来，您可以按以下方式进行关联：

```js
if (!Parse.FacebookUtils.isLinked(user)) {
  Parse.FacebookUtils.link(user, null, {
    success: function(user) {
      alert("Woohoo, user logged in with Facebook!");
    },
    error: function(user, error) {
      alert("User cancelled the Facebook login or did not fully authorize.");
    }
  });
}
```

关联时发生的步骤与登录非常类似。区别是在成功登录时，将会使用来自 Facebook 的信息更新当前的 `Pars.eUser` 用户信息。今后通过 Facebook 进行的登录会将用户登录到其已有的帐户中。

若您想要取消用户与 Facebook 的关联，操作如下：

```js
Parse.FacebookUtils.unlink(user, {
  success: function(user) {
    alert("The user is no longer associated with their Facebook account.");
  }
});
```

### Facebook SDK 与 Parse

Facebook Javascript SDK 提供一个主 `FB` 对象，该对象是与 Facebook API 之间的许多互动的起点。[若要了解有关 SDK 的更多内容，请点击这里](https://developers.facebook.com/docs/reference/javascript/)。

使用 Parse SDK 进行 Facebook 登录需要在调用 `Parse.FacebookUtils.init()` 之前已经加载了 Facebook SDK。

我们的库为您管理 `FB` 对象。按默认，`FB` 单元集与当前用户同步，因此，您对它调用的任何方法都会作用于与当前 `Parse.User` 关联的 Facebook 用户。明确调用 `FB.login()` 或 `FB.logOut()` 将使 `Parse.User` 和 `FB` 对象失去同步，因此不建议使用。
