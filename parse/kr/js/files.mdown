# 파일

## Parse.File 만들기

`Parse.File`을 사용하면 일반 `Parse.Object`에 보관하기에 너무 크거나 번거로운 앱 파일을 클라우드에 저장할 수 있습니다. 가장 일반적인 사용 사례는 이미지 저장이지만 문서와 동영상, 음악, 기타 바이너리 데이터(최대 10MB) 저장에도 사용할 수 있습니다.

`Parse.File`은 쉽게 시작할 수 있습니다. 파일을 만드는 방법에는 두 가지가 있습니다. 하나는 base64 인코딩된 문자열을 사용하는 것입니다.

```js
var base64 = "V29ya2luZyBhdCBQYXJzZSBpcyBncmVhdCE=";
var file = new Parse.File("myfile.txt", { base64: base64 });
```

다른 하나는 바이트 값 배열에서 파일을 만드는 것입니다.

```js
var bytes = [ 0xBE, 0xEF, 0xCA, 0xFE ];
var file = new Parse.File("myfile.txt", bytes);
```

Parse는 파일 확장명을 바탕으로 업로드하는 파일의 유형을 자동으로 감지하지만 세 번째 매개변수를 사용하면 `Content-Type`을 지정할 수 있습니다.

```js
var file = new Parse.File("myfile.zzz", fileData, "image/png");
```

하지만 HTML5 앱에서는 파일 업로드 제어에 html 양식을 사용하는 경우가 가장 일반적입니다. 최신 브라우저에서는 간단하게 이렇게 할 수 있습니다. 사용자가 로컬 드라이브에서 업로드할 파일을 선택할 수 있게 하는 파일 입력 태그를 만듭니다.

```html
  <input type="file" id="profilePhotoFileUpload">
```

그런 다음 클릭 핸들러나 다른 함수에서 파일에 대한 참조를 가져옵니다.

```js
var fileUploadControl = $("#profilePhotoFileUpload")[0];
if (fileUploadControl.files.length > 0) {
  var file = fileUploadControl.files[0];
  var name = "photo.jpg";
  var parseFile = new Parse.File(name, file);
}
```

이 예에서는 파일 이름을 `photo.jpg`로 지정합니다. 여기에는 주목해야 할 두 가지 사항이 있습니다. 

*   파일 이름이 충돌할 것을 염려할 필요가 없습니다. 각 업로드에는 고유 ID가 부여되므로 `photo.jpg`라는 파일을 여러 개 업로드해도 문제가 되지 않습니다.
*   파일에 파일 확장명이 있는 이름을 지정하는 것이 중요합니다. Parse에서는 확장명을 통해 파일 유형을 파악하고 이에 따라 처리합니다. 즉, PNG 이미지를 저장하는 경우 파일 이름이 `.png`로 끝나야 합니다.

그런 다음 파일을 클라우드에 저장합니다. `Parse.Object`에서와 같이 본인에게 맞는 콜백 종류나 오류 처리에 따라 사용할 수 있는 `save` 메서드의 다양한 변형이 있습니다.

```js
parseFile.save().then(function() {
  // The file has been saved to Parse.
}, function(error) {
  // The file either could not be read, or could not be saved to Parse.
});
```

마지막으로, 저장이 완료되면 다른 데이터와 마찬가지로 `Parse.File`을 `Parse.Object`에 연결할 수 있습니다.

```js
var jobApplication = new Parse.Object("JobApplication");
jobApplication.set("applicantName", "Joe Smith");
jobApplication.set("applicantResumeFile", parseFile);
jobApplication.save();
```

## 파일 콘텐츠 검색

파일 콘텐츠를 검색하는 제일 좋은 방법은 앱의 컨텍스트에 따라 다릅니다. 도메인간 요청 문제 때문에 작업을 브라우저에 맡기는 것이 가장 좋습니다. 이것은 일반적으로 파일의 URL을 DOM에 렌더링하는 것을 의미합니다. 여기에서는 jQuery를 사용하여 페이지에 업로드한 프로필 사진을 렌더링합니다.

```js
var profilePhoto = profile.get("photoFile");
$("profileImg")[0].src = profilePhoto.url();
```

파일의 데이터를 Cloud Code에서 처리하려면 http 네트워킹 라이브러리를 사용하여 파일을 검색할 수 있습니다.

```js
Parse.Cloud.httpRequest({ url: profilePhoto.url() }).then(function(response) {
  // The file contents are in response.buffer.
});
```

[REST API](/docs/rest#files-deleting)를 사용하여 개체에서 참조하는 파일을 삭제할 수 있습니다. 파일을 삭제할 수 있게 하려면 마스터 키를 제공해야 합니다.

앱의 어떤 개체에서도 파일을 참조하지 않는 경우 REST API를 통해 파일을 삭제할 수 없습니다. 앱의 설정 페이지에서 사용되지 않는 파일의 삭제를 요청할 수 있습니다. 이렇게 하면 URL 속성을 통해 참조되지 않는 파일 액세스에 의존하는 기능이 중단될 수 있습니다. 개체와 현재 연결된 파일은 영향을 받지 않습니다.
