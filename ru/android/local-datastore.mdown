# Локальное хранилище данных

Parse Android SDK предоставляет локальное хранилище данных, которое можно использовать для хранения и извлечения объектов `ParseObject`, даже если сеть недоступна. Чтобы включить эту функцию, вызовите метод `Parse.enableLocalDatastore()` перед вызовом метода `initialize`.

```java
import com.parse.Parse;
import android.app.Application;

public class App extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        Parse.enableLocalDatastore(this);
        Parse.initialize(this, PARSE_APPLICATION_ID, PARSE_CLIENT_KEY);
    }
}
```

Существует несколько побочных эффектов включения локального хранилища данных, о которых следует знать. После включения будет доступна только один экземпляр любого заданного объекта `ParseObject`. Например, у вас есть экземпляр класса `"GameScore"` с идентификатором `objectId` `"xWMyZ4YEGZ"`, и вы создаете запрос `ParseQuery` для всех экземпляров класса `"GameScore"` с этим идентификатором `objectId`. В результате будет получен тот же экземпляр объекта, который уже есть в памяти.

Другим побочным эффектом является то, что текущий пользователь и текущая установка будут храниться в локальном хранилище данных. Таким образом, вы сможете сохранить несохраненные изменения этих объектов между запусками приложения при помощи указанных ниже методов.

Вызов метода `saveEventually` для объекта `ParseObject` закрепит объект в локальном хранилище данных, пока сохранение не будет завершено. Таким образом, при изменении текущего пользователя `ParseUser` и вызова метода `ParseUser.getCurrent().saveEventually()` ваше приложение всегда будет учитывать совершенные изменения.

## Закрепление

Объект `ParseObject` можно хранить в локальном хранилище данных, закрепив его. Закрепление объекта `ParseObject` является рекурсивным, как и сохранение, поэтому все объекты, на которые указывает закрепленный объект, будут также закреплены. При закреплении объекта каждый раз при получении объекта или сохранении новых данных копия в локальном хранилище данных будет обновлена автоматически. Вам вообще не нужно об этом думать.

```java
ParseObject gameScore = new ParseObject("GameScore");
gameScore.put("score", 1337);
gameScore.put("playerName", "Sean Plott");
gameScore.put("cheatMode", false);
gameScore.pinInBackground();
```

Если имеется несколько объектов, можно одновременно закрепить их все при помощи удобного метода `pinAllInBackground`.

```java
ParseObject.pinAllInBackground(listOfObjects);
```

## Извлечение из локального хранилища данных

Хранение объектов целесообразно только в том случае, если впоследствии их можно извлечь обратно. Извлечение объекта из локального хранилища данных действует как извлечение из сети. Разница заключается только в вызове метода `fromLocalDatastore` для указания в запросе `ParseQuery`, где искать результаты.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery("GameScore");
query.fromLocalDatastore();
query.getInBackground("xWMyZ4YE",
    new GetCallback<ParseObject>() {
        public void done(ParseObject object, ParseException e) {
            if (e == null) {
                // object will be your game score
            } else {
                // something went wrong
            }
        }
    });
```

## Запрос в локальное хранилище данных

Часто необходимо найти список объектов, которые соответствуют определенным критериям, а не единичный объект по идентификатору. Чтобы выполнить такой поиск можно использовать запрос [ParseQuery](#queries).

## Открепление

Если работа с объектом закончена, и его больше не нужно хранить в локальном хранилище данных, можно его просто открепить. Это освободит пространство на диске устройства и обеспечит быстрое выполнение запросов в локальном хранилище данных.

```java
gameScore.unpinInBackground();
```

Существует также метод одновременного открепления нескольких объектов.

```java
ParseObject.unpinAllInBackground(listOfObjects);
```

## Закрепление при помощи ярлыков

Закрепление и открепление каждого объекта вручную немного похоже на использование методов `malloc` и `free`. Это мощный инструмент, но может быть сложно управлять тем, какие объекты следует хранить в сложных сценариях. Например, вы создаете игру с отдельным списком мировых рекордов и списком рекордов друзей. Если ваш друг ставит мировой рекорд, необходимо убедиться, что этот результат не будет полностью откреплен при удалении его из кэшированных запросов. Чтобы упростить эти сценарии, объекты также можно закреплять при помощи ярлыков. Ярлыки указывают на группу объектов, которые следует хранить вместе.

```java
// Add several objects with a label.
ParseObject.pinAllInBackground("MyScores", someGameScores);

// Add another object with the same label.
anotherGameScore.pinInBackground("MyScores");
```

Чтобы одновременно открепить все объекты с одинаковым ярлыком, можно создать ярлык для открепления методов. Это позволяет не отслеживать физически, какие объекты находятся в каждой необходимой группе.

```java
ParseObject.unpinAllInBackground("MyScores");
```

Любой объект будет сохранен в хранилище данных, пока он закреплен при помощи ярлыка. Другими словами, при закреплении объекта при помощи двух разных ярлыков и последующем откреплении его при помощи одного ярлыка объект будет находиться в хранилище данных, пока он не будет откреплен при помощи другого ярлыка."

## Кэширование результатов запросов

Закрепление при помощи ярлыков упрощает кэширование результатов запросов. Также можно использовать один ярлык для закрепления результатов каждого запроса. Для получения новых результатов из сети просто выполните запрос и обновите закрепленные объекты.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery(“GameScore");
query.orderByDescending(“score”);

// Query for new results from the network.
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scores, ParseException e) {
        // Remove the previously cached results.
        ParseObject.unpinAllInBackground(“highScores”, new DeleteCallback() {
            public void done(ParseException e) {
                // Cache the new results.
                ParseObject.pinAllInBackground(“highScores”, scores);
            }
        });
    }
});
```

Если необходимо получить кэшированные результаты для запроса, можно после этого выполнить такой же запрос из локального хранилища данных.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery(“GameScore");
query.orderByDescending(“score”);
query.fromLocalDatastore();

query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scores, ParseException e) {
        // Yay! Cached scores!
    }
});
```

## Синхронизация локальных изменений

После локального сохранения некоторых изменений существует несколько различных способов сохранения этих изменений в Parse через сеть. Проще всего это сделать при помощи метода `saveEventually`. При вызове метода `saveEventually` для объекта `ParseObject` объект будет закреплен до выполнения сохранения. SDK обеспечивает сохранение объекта, когда в следующий раз будет доступна сеть.

```java
gameScore.saveEventually();
```

Если необходимо осуществлять управление синхронизацией объектов более широко, можно хранить их в локальном хранилище данных до того, как сохранить их самостоятельно при помощи метода `saveInBackground`. Чтобы управлять набором объектов, которые необходимо сохранить, можно повторно использовать ярлык. Метод `fromPin` в запросе `ParseQuery` упрощает получение только необходимых объектов.

```java
ParseQuery<ParseObject> query = ParseQuery.getQuery(“GameScore");
query.fromPin(“myChanges”);
query.findInBackground(new FindCallback<ParseObject>() {
    public void done(List<ParseObject> scores, ParseException e) {
        for (ParseObject score in scores) {
            score.saveInBackground();
            score.unpinInBackground(“myChanges”);
        }
    }
});
```
