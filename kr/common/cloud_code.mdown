# Cloud Code란?

Parse의 비전은 개발자가 서버와 작업하지 않고도 모바일 앱을 빌드할 수 있는 환경을 제공하는 것입니다. 복잡한 앱의 경우 모바일 기기에서 실행되지 않는 약간의 로직만 필요한 경우가 있습니다. Cloud Code로 이를 수행할 수 있습니다.

Cloud Code는 수천 개의 앱을 구동하는 동일한 JavaScript SDK를 기반으로 하므로 사용하기 쉽습니다. 유일한 차이라면 이 코드는 모바일 기기에서 실행되지 않고 Parse Cloud에서 실행된다는 점입니다. Cloud Code를 업데이트하면 모든 모바일 환경에서 즉시 적용됩니다. 앱의 새 릴리스가 나올 때까지 기다릴 필요 없이 앱 동작을 그때 그때 바로 변경하고 새 기능을 더 빨리 추가할 수 있습니다.

모바일 개발에 익숙한 개발자라면 Cloud Code를 쉽게 이해하고 사용할 수 있습니다.


## 시작하기

개발에 사용하는 컴퓨터에 Parse의 커맨드 라인 툴을 설치해야 합니다. 이 툴을 사용하여 Parse Cloud에서 코드를 관리할 수 있습니다.


### 커맨드 라인 툴 설치 또는 업데이트(Mac/Linux)

Mac OS와 Linux/Unix 환경에서 다음 커맨드를 실행하여 Parse 툴을 설치할 수 있습니다.

```bash
curl -s https://www.parse.com/downloads/cloud_code/installer.sh | sudo /bin/bash
```

커맨드를 실행하면 `/usr/local/bin/parse`에 &quot;parse&quot;라는 툴이 설치됩니다. 다른 파일이 없으므로 툴을 제거하려면 해당 파일을 삭제하면 됩니다. 툴을 이미 설치한 경우에는 커맨드 라인 툴이 업데이트됩니다.

### 커맨드 라인 툴 설치(Windows)

Windows용 Parse 커맨드 라인 툴은 [여기](/downloads/windows/console/parse.zip)에서 사용할 수 있습니다. zip 파일을 다운로드하고 파일 압축을 해제한 뒤 ParseConsole.exe를 두 번 클릭하여 Parse를 인식하는 powershell 세션을 실행할 수 있습니다. Win + R을 누르고 &quot;parse&quot;를 입력하여 powershell 세션을 시작할 수도 있습니다.


### Cloud Code 설정

다음 단계는 클라우드에서 실행할 코드를 저장하기 위한 디렉터리를 만드는 것입니다. `parse new` 커맨드를 실행하면 이 디렉터리를 설정하고 Cloud Code를 만들 앱을 선택하라는 메시지가 표시됩니다.

```bash
$ parse new MyCloudCode
Email: ninja@gmail.com
Password:
1:MyApp
Select an App: 1
$ cd MyCloudCode
```

Parse 계정의 이메일 주소와 비밀번호를 사용하여 로그인하세요. OAuth를 통해 가입하고 비밀번호를 설정하지 않았다면 지금 계정 설정을 수정하여 비밀번호를 설정해야 합니다. 이렇게 하면 현재 디렉터리에 이름이 `MyCloudCode`인 디렉터리가 만들어집니다. 다음과 같은 여러 파일이 자동으로 생성됩니다.

```bash
-config/
  global.json
-cloud/
  main.js
-public/
  index.html
```

`config` 디렉터리에는 대개는 처리할 필요가 없는 JSON 구성 파일이 포함되고, `cloud` 디렉터리에는 Cloud Code가 저장되며, `public` 디렉터리에는 Parse에서 호스팅할 정적 콘텐츠가 저장됩니다. `cloud` 디렉터리에서는 일반적으로 모든 Cloud Code 함수를 저장하는 `main.js` 파일만 수정합니다. 지금은 이런 파일이 모두 생성되었는지만 확인합니다. 소스 관리를 사용하는 경우 이 모든 파일이 들어있는지 확인할 수 있습니다.


### 기본 함수

기존 방식에 따라 클라우드에서 가장 단순한 함수를 실행하는 방법을 살펴보겠습니다. `cloud/main.js`를 살펴보면 문자열을 반환하는 예제 함수가 있습니다.

```js
Parse.Cloud.define("hello", function(request, response) {
  response.success("Hello world!");
});
```

사용하는 시스템의 코드를 Parse Cloud에 배포하려면 다음을 실행합니다.

```bash
$ parse deploy
```

배포된 후 이 함수를 실행하려면 다음을 실행합니다.

```common-java
ParseCloud.callFunctionInBackground("hello", new HashMap<String, Object>(), new FunctionCallback<String>() {
  void done(String result, ParseException e) {
    if (e == null) {
      // result is "Hello world!"
    }
  }
});
```
```common-objc
[PFCloud callFunctionInBackground:@"hello"
                   withParameters:@{}
                            block:^(NSString *result, NSError *error) {
   if (!error) {
     // result is @"Hello world!"
   }
}];
```
```common-swift
// no swift example
```
```common-php
// no php example
```
```common-csharp
var result = await ParseCloud.CallFunctionAsync<IDictionary<string, object>>("hello", new Dictionary<string, object>());
// result is "Hello world!"
```
```common-js
Parse.Cloud.run('hello', {}, {
  success: function(result) {
    // result is 'Hello world!'
  },
  error: function(error) {
  }
});
```

응답은 다음과 같습니다.

```json
{ "result": "Hello world!" }
```

축하합니다! Cloud Code를 성공적으로 배포하고 실행했습니다.

지금이 배포 주기를 시험해 보기 좋은 때입니다. `"Hello world!"`를 다른 문자열로 변경한 다음 함수를 다시 배포하고 실행하여 다른 결과를 얻어보세요. 전체 JavaScript SDK를 Cloud Code에 사용할 수 있으므로 할 수 있는 작업이 많습니다. 아래에서 몇 가지 예제를 자세히 검토하겠습니다.


## 클라우드 함수

Cloud Code가 도움이 되는 좀 더 복잡한 예를 살펴보겠습니다. 클라우드에서 계산을 수행하는 한 가지 이유는 정보가 조금만 필요한 경우에 대량 개체 목록을 기기로 보낼 필요가 없기 때문입니다. 예를 들어 영화 리뷰를 남길 수 있는 앱을 작성한다고 가정해 보겠습니다. 싱글 `Review` 개체는 다음과 같을 수 있습니다.

```json
{ 
  "movie": "The Matrix",
  "stars": 5,
  "comment": "Too bad they never made any sequels."
}
```

영화 '매트릭스'에 대한 평균 별 수를 확인하려면 기기에서 모든 리뷰를 쿼리하고 평균 별 수를 낼 수 있습니다. 그러나 이렇게 하면 숫자 1개만 필요한데 대역폭은 많이 소모됩니다. Cloud Code를 사용하면 영화 이름만 전달하여 평균 별점을 반환할 수 있습니다.

클라우드 함수에서는 `request` 개체에 JSON 매개변수 딕셔너리를 사용할 수 있으므로 이 딕셔너리를 사용하여 영화 이름을 전달할 수 있습니다. 클라우드 환경에서는 전체 Parse JavaScript SDK를 사용할 수 있으므로 이 SDK를 사용하여 `Review` 개체를 쿼리할 수 있습니다. 이를 종합하면 `averageStars`를 구현하는 코드는 다음과 같게 됩니다.

```js
Parse.Cloud.define("averageStars", function(request, response) 
  var query = new Parse.Query("Review");
  query.equalTo("movie", request.params.movie);
  query.find({
    success: function(results) {
      var sum = 0;
      for (var i = 0; i < results.length; ++i) {
        sum += results[i].get("stars");
      }
      response.success(sum / results.length);
    },
    error: function() {
      response.error("movie lookup failed");
    }
  });
});
```

`averageStars`를 사용할 때와 `hello`를 사용할 때의 유일한 차이는 클라우드 함수를 호출할 때 `request.params.movie`에서 액세스할 매개변수를 제공해야 한다는 점입니다. 클라우드 함수를 호출하는 방법은 이어서 자세히 설명합니다.

### 클라우드 함수 호출

클라우드 함수는 클라이언트 SDK 중 하나에서 호출할 수도 있고 REST API를 통해 호출할 수도 있습니다(SDK를 전환하려면 아래 예의 드롭다운 목록 사용). 예를 들어 `averageStars`라는 클라우드 함수를 `movie`라는 매개변수를 사용하여 호출하려면 다음과 같이 하세요.

```common-java
HashMap<String, Object> params = new HashMap<String, Object>();
params.put("movie", "The Matrix");
ParseCloud.callFunctionInBackground("averageStars", params, new FunctionCallback<Float>() {
   void done(Float ratings, ParseException e) {
       if (e == null) {
          // ratings is 4.5
       }
   }
});
```
```common-objc
[PFCloud callFunctionInBackground:@"averageStars"
                   withParameters:@{@"movie": @"The Matrix"}
                            block:^(NSNumber *ratings, NSError *error) {
  if (!error) {
     // ratings is 4.5
  }
}];
```
```common-swift
// no swift example
```
```common-php
// no php example
```
```common-csharp
IDictionary<string, object> params = new Dictionary<string, object>
{
    { "movie", "The Matrix" }
};
var result = await ParseCloud.CallFunctionAsync<IDictionary<string, object>>("averageStars", params);
```
```common-js
Parse.Cloud.run('averageStars', { movie: 'The Matrix' }, {
  success: function(ratings) {
    // ratings should be 4.5
  },
  error: function(error) {
  }
});
```

일반적으로 클라우드 함수에는 다음 두 개의 인수가 전달됩니다.

1.  `request` - 요청에 대한 정보를 포함하는 요청 개체입니다. 다음 필드를 설정합니다.
  1.  `params` - 클라이언트가 함수에 전송하는 매개변수 개체입니다.
  2.  `user` - 요청을 하는 `Parse.User`입니다.  로그인한 사용자가 없는 경우 이 필드가 설정되지 않습니다.

함수 호출에 성공하면 클라이언트의 응답은 다음과 같습니다.

```json
{ "result": 4.8 }
```

오류가 발생하는 경우 클라이언트의 응답은 다음과 같습니다.

```json
{ 
  "code": 141,
  "error": "movie lookup failed"
}
```

### 저장 시 코드 실행

클라우드에서 코드를 실행하는 또 하나의 이유는 특정 데이터 형식을 적용하기 위해서입니다. 예를 들어 Android 앱과 iOS 앱이 모두 있는데 각 앱의 데이터를 확인하려고 한다고 가정합니다. 이 경우 각 클라이언트 환경의 코드를 따로 작성하지 않고 Cloud Code를 사용하여 코드를 한 번만 작성할 수 있습니다.

위의 영화 리뷰 예를 살펴보겠습니다. 어떤 영화에 별을 몇 개 줄지 선택할 때 일반적으로 1, 2, 3, 4 또는 5개의 별만 줄 수 있습니다. 리뷰에서 -6개 별이나 1337개의 별을 줄 수는 없습니다. 이처럼 범위를 벗어나는 리뷰를 거부하려는 경우 `beforeSave` 메서드를 사용하면 됩니다.

```js
Parse.Cloud.beforeSave("Review", function(request, response) {
  if (request.object.get("stars") < 1) {
    response.error("you cannot give less than one star");
  } else if (request.object.get("stars") > 5) {
    response.error("you cannot give more than five stars");
  } else {
    response.success();
  }
});
```

`response.error`가 호출되면 `Review` 개체는 저장되지 않고 클라이언트에 오류가 발생합니다. `response.success`가 호출되면 개체가 정상적으로 저장됩니다. 코드에서 이 두 콜백 중 하나를 호출해야 합니다.

유용한 팁 하나를 알려드리면, 여러 버전의 모바일 앱이 있어도 동일한 버전의 Cloud Code가 모든 버전의 앱에 적용됩니다. 따라서 입력 데이터의 유효성을 확인하지 않는 앱을 출시하더라도 `beforeSave`를 사용해 유효성 검사를 추가하여 이 문제를 해결할 수 있습니다.

Parse JavaScript SDK에서 미리 정의된 클래스(예: [Parse.User](/docs/js/api/symbols/Parse.User.html))에 `beforeSave`를 사용하려면 첫 번째 인수로 문자열을 전달해서는 안 됩니다. 대신 클래스 자체를 전달해야 합니다.

```js
Parse.Cloud.beforeSave(Parse.User, function(request, response) {
  if (!request.object.get("email")) {
    response.error("email is required for signup");
  } else {
    response.success();
  }
});
```


### 저장 시 개체 수정

경우에 따라 잘못된 데이터를 삭제하지 않고, 약간만 조정해서 저장하기를 원할 수도 있습니다. 이 경우에도 `beforeSave`를 사용하여 처리할 수 있습니다. 변경된 개체에 대해 `response.success`를 호출하면 됩니다.

위의 영화 리뷰 예에서 댓글이 너무 길지 않게 하려고 합니다. 댓글 하나가 너무 길면 표시하기 어려울 수 있습니다. 다음과 같이 `beforeSave`를 사용하여 `comment` 필드를 140자로 자를 수 있습니다.

```js
Parse.Cloud.beforeSave("Review", function(request, response) {
  var comment = request.object.get("comment");
  if (comment.length > 140) {
    // Truncate and add a ...
    request.object.set("comment", comment.substring(0, 137) + "...");
  }
  response.success();
});
```


### 저장 후 작업 수행

경우에 따라 개체를 저장한 후 푸시와 같은 작업을 수행할 수 있습니다. 이렇게 하려면 `afterSave` 메서드에 핸들러를 등록합니다. 예를 들어 블로그 게시물에 대한 댓글 수를 추적하려 한다고 가정할 경우, 다음과 같은 함수를 작성하여 이렇게 할 수 있습니다.

```js
Parse.Cloud.afterSave("Comment", function(request) {
  query = new Parse.Query("Post");
  query.get(request.object.get("post").id, {
    success: function(post) {
      post.increment("comments");
      post.save();
    },
    error: function(error) {
      console.error("Got an error " + error.code + " : " + error.message);
    }
  });
});
```

클라이언트는 핸들러가 종료된 후 어떻게 종료되는지에 상관없이 저장 요청에 대한 성공적인 응답을 받습니다. 예를 들어 핸들러에서 예외가 발생하더라도 성공적인 응답을 받습니다. 핸들러 실행 중 발생한 오류는 Cloud Code 로그에서 볼 수 있습니다.

Parse JavaScript SDK에서 미리 정의된 클래스(예: [Parse.User](/docs/js/api/symbols/Parse.User.html))에 `afterSave`를 사용하려면 첫 번째 인수로 문자열을 전달해서는 안 됩니다. 대신 클래스 자체를 전달해야 합니다.


### 삭제 시 코드 실행

개체를 삭제하기 전에 사용자 지정 Cloud Code를 실행할 수 있습니다. `beforeDelete` 메서드로 수행할 수 있습니다. 예를 들어 이 메서드를 사용하면 제한된 삭제 정책을 [ACL](/docs/js/api/symbols/Parse.ACL.html)을 통해 표현할 때보다 더 정교하게 구현할 수 있습니다. 예를 들어 여러 사진이 각 사진첩에 연결되어 있는 사진첩 앱이 있는데, 사진이 들어있는 사진첩은 삭제할 수 없게 하고 싶다고 가정할 경우, 다음과 같은 함수를 작성하여 이렇게 할 수 있습니다.

```js
Parse.Cloud.beforeDelete("Album", function(request, response) {
  query = new Parse.Query("Photo");
  query.equalTo("album", request.object.id);
  query.count({
    success: function(count) {
      if (count > 0) {
        response.error("Can't delete album if it still has photos.");
      } else {
        response.success();
      }
    },
    error: function(error) {
      response.error("Error " + error.code + " : " + error.message + " when getting photo count.");
    }
  });
});
```

`response.error`가 호출되면 `Album` 개체가 삭제되지 않고 클라이언트에 오류가 발생합니다. `response.success`가 호출되면 개체가 정상적으로 삭제됩니다. 코드에서 이 두 콜백 중 하나를 호출해야 합니다.

Parse JavaScript SDK에서 미리 정의된 클래스(예: [Parse.User](/docs/js/api/symbols/Parse.User.html))에 `beforeDelete`를 사용하려면 첫 번째 인수로 문자열을 전달해서는 안 됩니다. 대신 클래스 자체를 전달해야 합니다.


### 삭제 후 작업 수행

경우에 따라 개체를 삭제한 후 푸시와 같은 작업을 수행할 수 있습니다. 이렇게 하려면 `afterDelete` 메서드에 핸들러를 등록합니다. 예를 들어 블로그 게시물을 삭제한 후 관련 댓글도 모두 삭제하고 싶다고 가정할 경우, 다음과 같은 함수를 작성하여 이렇게 할 수 있습니다.

```js
Parse.Cloud.afterDelete("Post", function(request) {
  query = new Parse.Query("Comment");
  query.equalTo("post", request.object.id);
  query.find({
    success: function(comments) {
      Parse.Object.destroyAll(comments, {
        success: function() {},
        error: function(error) {
          console.error("Error deleting related comments " + error.code + ": " + error.message);
        }
      });
    },
    error: function(error) {
      console.error("Error finding related comments " + error.code + ": " + error.message);
    }
  });
});
```

`afterDelete` 핸들러는 `request.object`를 통해 삭제된 개체에 액세스할 수 있습니다. 이 개체는 완전히 가져올 수는 있지만 다시 가져오거나 다시 저장할 수 없습니다.

클라이언트는 핸들러가 종료된 후 어떻게 종료되는지에 상관없이 삭제 요청에 대한 성공적인 응답을 받습니다. 예를 들어 핸들러에서 예외가 발생하더라도 성공적인 응답을 받습니다. 핸들러 실행 중 발생한 오류는 Cloud Code 로그에서 볼 수 있습니다.

Parse JavaScript SDK에서 미리 정의된 클래스(예: [Parse.User](/docs/js/api/symbols/Parse.User.html))에 `afterDelete`를 사용하려면 첫 번째 인수로 문자열을 전달해서는 안 됩니다. 대신 클래스 자체를 전달해야 합니다.


### 리소스 제한

#### 시간 초과

클라우드 함수는 15초 후에 종료됩니다. `beforeSave`, `afterSave`, `beforeDelete` 및 `afterDelete` 함수는 3초의 실행 시간 후 종료됩니다. 클라우드 함수 또는 `beforeSave`/`afterSave`/`beforeDelete`/`afterDelete` 함수를 다른 Cloud Code 호출에서 호출하면 호출하는 함수에서 남은 시간만큼 추가로 시간이 제한됩니다. 예를 들어 클라우드 함수가 13초 동안 실행된 후 `beforeSave` 함수를 트리거하면 `beforeSave` 함수는 일반적인 실행 시간인 3초가 아니라 2초간만 실행됩니다. Cloud Code에서 작업을 수행하는 데 시간이 추가로 필요한 경우 [백그라운드 작업](#jobs)을 사용해 보세요.

#### 네트워크 요청

`success` 또는 `error`가 호출된 후에도 실행 중인 네트워크 요청은 취소됩니다. 일반적으로 네트워크 요청이 모두 완료된 후에 `success`를 호출해야 합니다. `afterSave` 함수 및 `afterDelete` 함수의 경우 `success`/`error`를 호출하지 않으므로, Cloud Code에서는 네트워크 요청이 모두 완료될 때까지 기다립니다.


## 백그라운드 작업

Parse에서는 백그라운드에서 실행되는 작업을 설정할 수 있습니다. 백그라운드 작업은 응답 시간이 느릴 수 있는 외부 사이트와 통합 또는 일괄 처리된 푸시 알림 내보내기와 같이 오래 실행되는 작업에 사용하면 도움이 됩니다. 클라우드 함수를 실행하는 동안 시간 초과 오류가 일상적으로 발생하는 경우에는 백그라운드 작업을 사용해 보세요.

백그라운드 작업을 사용할 때는 다음과 같은 몇 가지 제한 사항에 유념해야 합니다.

*   작업은 15분의 실행 시간 후 종료됩니다.
*   앱의 요청 제한 내에서 앱에는 동시에 실행 중인 작업이 20req/s당 하나만 있을 수 있습니다.
*   최대 동시 제한에 도달한 이후 시작되는 작업은 즉시 종료됩니다.


### 백그라운드 작업 작성

백그라운드 작업은 클라우드 함수와 비슷하게 작성합니다. `Parse.User` 개체에 `plan` 필드를 추가한 후 사용자 마이그레이션 작업을 실행하려 한다고 가정해 보겠습니다. 이 경우 코드는 다음과 같습니다.

```js
Parse.Cloud.job("userMigration", function(request, status) 
  // Set up to modify user data
  Parse.Cloud.useMasterKey();
  var counter = 0;
  // Query for all users
  var query = new Parse.Query(Parse.User);
  query.each(function(user) {
    // Update to plan value passed in
    user.set("plan", request.params.plan);
    if (counter % 100 === 0) {
      // Set the  job's progress status
      status.message(counter + " users processed.");
    }
    counter += 1;
    return user.save();
  }).then(function() {
    // Set the job's success status
    status.success("Migration completed successfully.");
  }, function(error) {
    // Set the job's error status
    status.error("Uh oh, something went wrong.");
  });
});
```

다른 클라우드 함수와 마찬가지로 성공 및 오류 조건을 처리해야 합니다. 백그라운드 작업의 경우 이렇게 하려면 함수가 완료될 때 `status.success()` 또는 `status.error()`를 호출합니다. 그러면 작업 실행 상태가 완료됨으로 설정됩니다. 이러한 메서드를 호출하지 않으면 작업이 15분 후에 시간 초과됩니다. 선택적으로 `status.message()`를 호출하여 작업을 실행하는 동안 진행률 메시지를 설정할 수도 있습니다. `status.success()` 이후에 `status.message()`를 호출하면 진행률 메시지가 무시됩니다.

코드를 배포한 후에 마스터 키와 함께 다음 커맨드를 실행하여 작업을 테스트할 수 있습니다.

```bash
curl -X POST \
  -H "X-Parse-Application-Id: $PARSE_APPLICATION_ID" \
  -H "X-Parse-Master-Key: $PARSE_MASTER_KEY" \
  -H "Content-Type: application/json" \
  -d '{"plan":"paid"}' \
  https://api.parse.com/1/jobs/userMigration
```

### 일정 설정

백그라운드 작업 코드를 배포한 후에 Cloud Code 탭의 Dashboard 아래에서 작업을 예약할 수 있습니다. Scheduled Jobs 창에는 현재 예약된 작업이 모두 나열되며 새 작업을 예약할 수 있습니다. 작업 예약에 항목을 추가하려면 현재 배포된 작업을 선택한 다음 설명, 필수 매개변수, 시작 시간 및 빈도를 지정하세요. 예약한 작업을 필요 시 Run Now를 클릭하여 실행할 수 있습니다. 작업 예약에서 항목을 삭제할 수도 있습니다. Job Status 창에는 작업 실행 결과가 표시됩니다. 작업이 시작된 시간, 최근 상태 메시지 및 완료 여부를 확인할 수 있습니다.


## 사용자 지정 웹훅(Webhook)

Cloud Code에서 [Express](http://expressjs.com/)를 사용하면 다양한 형식의 데이터를 수신하는 사용자 지정 웹훅을 빌드할 수 있습니다.  다른 웹 서비스에서 호출하는 웹훅을 작성하는 경우 유용할 수 있습니다.  JSON이 아닌 데이터를 수신해야 하는 경우나 엔드포인트를 호출하는 웹 서비스에서 Parse의 REST API 헤더를 보낼 수 없는 경우에는 [클라우드 함수](#functions) 대신 이 웹훅을 사용해야 합니다.  Cloud Code 내에서 로직이 계속 실행 중이므로 사용자 지정 웹훅을 작성하는 동안 Parse JavaScript SDK의 모든 기능에 액세스할 수 있습니다.

사용자 지정 웹훅에서는 요청 헤더와 본문에 직접 액세스할 수 있습니다. 즐겨 사용하는 파서로 분석할 수 있는 JSON, 형식 인코딩 또는 raw byte로 데이터를 수신할 수 있습니다.  HTTP 기본 인증을 사용하여 웹훅을 보호할 수 있습니다.  다음은 메시지를 Parse Cloud에 저장하는 웹훅의 예입니다.

```js
var express = require('express');
var app = express();

// Global app configuration section
app.use(express.bodyParser());
// Populate req.body
app.post('/notify_message',
  express.basicAuth('YOUR_USERNAME', 'YOUR_PASSWORD'),
  function(req, res) {
    // Use Parse JavaScript SDK to create a new message and save it.
    var Message = Parse.Object.extend("Message");
    var message = new Message();
    message.save({ text: req.body.text }).then(function(message) {
      res.send('Success');
    }, function(error) {
      res.status(500);
      res.send('Error');
    });
  });
app.listen();
```

위 코드에서는 `express.bodyParser` 미들웨어를 사용하여 요청 본문을 읽고 `req.body.text`를 채웁니다.  여기서는 HTTP 기본 인증을 모든 엔드포인트에 전역으로 사용하지 않고 이 엔드포인트에만 사용하므로 global app configuration section에서 `app.use(express.basicAuth(вЂ¦))`를 작성하지 않았습니다.  따라서 이 앱의 다른 엔드포인트에는 공개적으로 액세스할 수 있습니다.

사용자 지정 엔드포인트를 테스트하려면 다음 커맨드를 실행하여 형식 인코딩 본문이 포함된 요청을 보낼 수 있습니다.

```bash
$ curl -X POST \
-H 'Content-Type: application/x-www-form-urlencoded' \
-d 'text=hi' http://YOUR_USERNAME:YOUR_PASSWORD@example.parseapp.com
```

요청 본문의 raw byte에 액세스하려면 코드에 `express.bodyParser` 대신 `parseExpressRawBody` 미들웨어를 사용해야 합니다. 요청 핸들러 일부에는 JSON 또는 www 형식 인코딩 분석이 필요하지만 다른 핸들러에는 요청 본문 바이트가 필요한 경우에는 미들웨어 구성요소를 둘 다 포함해도 괜찮습니다.

```js
var express = require('express');
var parseExpressRawBody = require('parse-express-raw-body');
var app = express();

// Global app configuration section
app.use(express.bodyParser());
app.use(parseExpressRawBody());

app.post('/receive_raw_data',
  express.basicAuth('YOUR_USERNAME', 'YOUR_PASSWORD'),
  function(req, res) {
    // If you send this endpoint JSON or www-form-encoded data, then
    // express.bodyParser will fill req.body with the corresponding data.
    // Otherwise, parseExpressRawBody will fill req.body with a Buffer
    // object containing the request body.  You can also convert this
    // Buffer to a string using req.body.toString().
  });
app.listen();
```


## 개발 및 프로덕션

개발 앱으로 새로운 코드를 사용해 볼 수 있으며 프로덕션 앱으로 전체에 배포되는 앱을 실행할 수 있습니다.


### 프로젝트에 새 앱 추가

프로젝트에 여러 앱을 링크해야 합니다. `parse new`는 첫 번째 앱을 프로젝트에 링크합니다.  `parse add [alias]`를 다음과 같이 실행하여 더 많은 앱을 추가할 수 있습니다.

```bash
$ parse add production
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounterProd
2:PiecesOfEightCounterDev
Select an App: 1
```

위의 예에서는 `PiecesOfEightCounterProd` 앱을 Cloud Code 프로젝트에 링크합니다. 또한 앱을 참조하기 위한 간단한 방식을 제공하는 `production`이라는 새 앱에 대한 별칭을 만듭니다.


### Cloud Code 개발

새 코드를 개발하는 동안 `develop` 커맨드를 사용하여 Parse 커맨드 라인 툴에서 지속적으로 프로젝트에 대한 업데이트가 있는지 확인하고 변경 사항을 Cloud Code에 업로드하도록 할 수 있습니다.  커맨드는 다음과 같습니다. 

```bash
$ parse develop development
E2013-03-19:20:17:01.423Z] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
New release is named v58 I2013-03-19T20:17:10.343Z]
Deployed v58 with triggers:
  GameScore:
    before_save
```

`develop` 커맨드에서 새로운 변경 사항을 푸시하려는 앱에 대해 명확하게 표시해야 합니다.  이렇게 해야 프로덕션 앱에서 실수로 `develop`이 실행되어 테스트되지 않은 코드가 배포되지 않도록 할 수 있습니다.  커맨드 라인 툴은 코드 변경 사항을 업로드하고 Ctrl-C를 누를 때까지 새 로그 메시지를 표시합니다.


### 프로덕션에 코드 배포

코드 테스트와 업데이트를 완료하면 다음과 같이 프로덕션 앱을 `deploy` 커맨드로 전달하여 프로덕션에 코드를 배포할 수 있습니다.

```bash
$ parse deploy production
New release is named v2
```


## Cloud Code에서 기록

`parse log`에서 표시한 로그 파일에 메시지를 기록하려면 `console.log`, `console.error` 또는 `console.warn`을 사용할 수 있습니다. `console.error`와 `console.warn`은 모두 오류 로그에 기록합니다.

```js
Parse.Cloud.define("Logger", function(request, response) {
  console.log(request.params);
  response.success();
});
```

클라우드 함수는 요청당 메시지를 최대 100개 기록할 수 있습니다.


## 네트워크

Cloud Code에서는 `Parse.Cloud.httpRequest`를 사용하여 HTTP 요청을 HTTP 서버에 보낼 수 있습니다.  이 함수에서는 옵션 개체를 사용하여 호출을 구성합니다.  동시 `httpRequest`는 2개로 제한되며 추가 요청은 대기열에 추가됩니다.

간단한 GET 요청은 다음과 같습니다.

```js
Parse.Cloud.httpRequest({
  url: 'http://www.parse.com/',
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

Http 상태 코드가 성공이면 `success`가 호출되고, 그렇지 않으면 `error`가 호출됩니다.


### 쿼리 매개변수

옵션 개체에 `params`를 설정하여 url 끝에 추가할 쿼리 매개변수를 지정할 수 있습니다.  다음과 같이 키 값 쌍의 JSON 개체를 전달하거나,

```js
Parse.Cloud.httpRequest({
  url: 'http://www.google.com/search',
  params: {
    q : 'Sean Plott'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

다음과 같이 raw `String`을 전달할 수 있습니다.

```js
Parse.Cloud.httpRequest({
  url: 'http://www.google.com/search',
  params: 'q=Sean Plott',
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```


### 헤더 설정

옵션 개체의 `header` 특성을 설정하여 HTTP 헤더를 보낼 수 있습니다.  예를 들어 요청의 Content-Type을 설정하려면 다음과 같이 할 수 있습니다.

```js
Parse.Cloud.httpRequest({
  url: 'http://www.example.com/',
  headers: {
    'Content-Type': 'application/json;charset=utf-8'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```


### POST 요청 보내기

옵션 개체의 `method` 특성을 설정하여 post 요청을 보낼 수 있습니다.  POST의 본문은 `body`를 사용하여 설정할 수 있습니다.  간단한 예는 다음과 같습니다.

```js
Parse.Cloud.httpRequest({
  method: 'POST',
  url: 'http://www.example.com/create_post',
  body: {
    title: 'Vote for Pedro',
    body: 'If you vote for Pedro, your wildest dreams will come true'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

이렇게 하면 게시물이 url 형식 인코딩된 `body` 특성인 본문과 함께 `http://www.example.com/create_post`에 전송됩니다.  JSON 인코딩된 본문이 필요한 경우 대신 다음을 수행할 수 있습니다.

```js
Parse.Cloud.httpRequest({
  method: 'POST',
  url: 'http://www.example.com/create_post',
  headers: {
    'Content-Type': 'application/json;charset=utf-8'
  },
  body: {
    title: 'Vote for Pedro',
    body: 'If you vote for Pedro, your wildest dreams will come true'
  },
  success: function(httpResponse) {
    console.log(httpResponse.text);
  },
  error: function(httpResponse) {
    console.error('Request failed with response code ' + httpResponse.status);
  }
});
```

HTTP 요청 본문을 올바로 인코딩하려면 항상 Content-Type 헤더에 charset를 포함하세요.


### 응답 개체

`success` 및 `error`에 전달된 응답 개체에는 다음이 포함됩니다.

1.  `status` - HTTP 응답 상태입니다.
     <li>`headers` - 응답 헤더입니다.
2.  `text` - 응답 본문의 원본입니다.
3.  `data` - Cloud Code에서 전송된 content-type을 분석하는 방법을 아는 경우 분석된 응답입니다.


## 모듈

Cloud Code에서는 JavaScript 코드를 모듈로 나눌 수 있습니다.  모듈을 로드할 때 원치 않는 부작용이 발생하지 않도록 Cloud Code의 모듈은 CommonJS 모듈과 유사하게 작동합니다. 모듈이 로드될 때 JavaScript 파일이 로드되고, 실행된 소스 및 전역 `exports` 개체가 반환됩니다.  예를 들어 `cloud/name.js`의 소스가 다음과 같은 경우

```js
var coolNames = ['Ralph', 'Skippy', 'Chip', 'Ned', 'Scooter'];
exports.isACoolName = function(name) {
  return coolNames.indexOf(name) !== -1;
}
```

 `cloud/main.js`에는 다음이 포함됩니다.

```js
var name = require('cloud/name.js');
name.isACoolName('Fred');
// returns false
name.isACoolName('Skippy');
// returns true;
name.coolNames;
// undefined.
```

`name`에는 `isACoolName`이라는 함수가 포함됩니다.  `require`에서 사용하는 경로는 Parse 프로젝트의 루트 디렉터리를 기준으로 합니다.  `cloud/` 디렉터리의 모듈만 로드할 수 있습니다.

### Cloud Module

Cloud Module은 Parse 앱을 타사 서비스 및 라이브러리와 통합하는 가장 쉬운 방법입니다. Cloud Module은 JavaScript 모듈처럼 작동하지만 누구나 쉽게 사용할 수 있습니다. 자세한 내용은 [Cloud Module 가이드](/docs/cloud_modules_guide)를 참조하세요.


## 커맨드 라인 툴

Parse의 커맨드 라인 툴로 새 코드를 클라우드에 배포하는 방법을 살펴보았습니다. 커맨드 라인 툴에는 몇 가지 유용한 다른 기능이 있습니다. 설치 안내에 대한 자세한 내용은 [툴 설치](#started-installing)를 참조하세요.


### 소개

여러 다른 앱에 동일한 코드를 배포할 수 있습니다. &quot;개발&quot; 앱과 &quot;프로덕션&quot; 앱을 별도로 가질 수 있으므로 유용합니다. 그런 다음 프로덕션에서 실행하기 전에 개발 앱에서 코드를 테스트합니다.

추가되는 첫 번째 앱(`new` 커맨드 사용)이 모든 커맨드 라인 운영의 기본 앱이 됩니다. `new`를 제외한 모든 커맨드는 커맨드가 수행될 선택적 앱을 사용합니다.


### 배포

새 릴리스를 배포하려면 커맨드 라인에서 `parse deploy`를 실행하세요.
```bash
$ parse deploy
New release is named v1
```
이렇게 하면 `cloud/main.js`의 새 코드가 Parse Cloud로 푸시되고 이 코드가 기본 대상에 배포됩니다. 기본 대상은 추가된 첫 번째 앱이나 `parse default`를 사용하여 설정한 앱입니다. 다음과 같이 `deploy`에 대상을 인수로 추가하여 다른 대상에 배포하도록 선택할 수 있습니다.

```bash
$ parse deploy "My Other App"
New release is named v2
```

`-d` 또는 `--description=` 옵션으로 배포에 릴리스 노트를 추가할 수 있습니다.

자동화된 테스트/배포 환경에서와같이 다른 스크립트 내에 `parse deploy`를 추가하면 Parse 커맨드 라인 툴의 종료 코드로 커맨드의 성공 여부를 나타낼 수 있습니다.  배포에 성공하면 종료 코드 0을 사용하고 실패하면 0이 아닌 종료 코드를 사용합니다.


### Cloud Code 개발

`develop` 커맨드를 사용하여 개발 모드에서 Parse 커맨드 라인 툴을 실행할 수 있습니다.  이렇게 하면 툴에서 소스 디렉터리에 업데이트가 있는지 확인하여 Parse에 배포할 뿐 아니라 실시간으로 로그를 제공합니다.

```bash
$ parse develop development
E2013-03-19:20:17:01.423Z] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
New release is named v58 I2013-03-19T20:17:10.343Z]
Deployed v58 with triggers:
  GameScore:
    before_save
```

다른 커맨드와 달리 `develop`의 경우 업데이트를 푸시할 Parse 앱을 지정해야 합니다.  이를 통해 프로덕션 앱에서 실수로 개발을 실행하여 테스트되지 않은 코드를 프로덕션 앱에서 실행하지 않도록 합니다.


### 새 대상 추가

`add` 커맨드를 실행하여 새 Parse 앱을 대상으로 추가할 수 있습니다. 이렇게 하면 Parse.com 이메일과 비밀번호를 입력하라는 메시지가 표시되고 선택할 앱 목록이 제공됩니다.

```bash
$ parse add
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounter
2:BootyDivider
Select an App: 1
```

`add` 커맨드는 앱 이름 대신 사용할 수 있는 앱에 할당할 별칭인 선택적 인수를 사용합니다.

대개 이러한 구성 데이터는 모두 `global.json`에 저장됩니다. 그렇지만 나머지 팀원과 공유하고 싶지 않은 개발에 사용하는 앱이 있을 수 있습니다. 이 경우 `--local`을 사용하여 이 구성을 별도의 `local.json` 파일에 대신 추가할 수 있습니다. 이런 식으로 `global.json`은 소스 제어에 보관하고 `local.json`은 본인의 컴퓨터에 보관할 수 있습니다.


### 기본 앱 설정

`parse deploy`, `parse log`, `parse rollback` 및 `parse releases`는 기본 앱을 사용하여 커맨드가 실행되도록 합니다. `parse default`로 이 기본 앱을 변경할 수 있습니다.

```bash
$ parse default MyApp
Default app set to MyApp.
$ parse default
Current default app is MyApp
```


### 롤백

`parse rollback`을 사용하여 릴리스를 롤백할 수 있습니다. `parse deploy`와 마찬가지로 선택적인 대상 인수를 지정할 수 있습니다.

```bash
$ parse rollback
Rolled back to v1
```

이렇게 하면 코드의 이전 버전으로 돌아갑니다. 또한 `-r`이나 `--release=` 옵션을 사용하여 롤백할 릴리스 이름을 지정할 수 있습니다.


### 로그 읽기

Cloud Code의 모든 배포와 롤백, 활성화는 기록됩니다. `parse log` 커맨드를 사용하여 로그의 끝을 검색할 수 있습니다. 다음 두 가지 유형의 로그가 있습니다.

*   `INFO` - 모든 것을 포함합니다.
*   `ERROR` - 오류만 포함합니다.

로그 커맨드는 선택적 인수와 다음 두 옵션을 사용합니다.

*   `-n` - 표시할 로그 줄 수(기본값: 10)
*   `--level/-l` - 사용할 로그 수준(기본값: INFO)
*   `-f` - tail -f 에뮬레이션

```bash
$ parse log -n 1
I2012-07-10:13:37:00] beforeSave handler in release 'v1' ran for GameScore with the input:
  {"original": null, "update":{"score": 1337}}
  and failed validation with Each GamesScore must have a playerName
```


### 릴리스 표시

`releases` 커맨드로 Parse Cloud에서 알려진 여러 릴리스를 표시할 수 있습니다. Parse에서는 최근 10개의 릴리스만 추적합니다.


### SDK 버전 설정

이 디렉터리의 Cloud Code에 사용되는 기본 Parse JavaScript SDK 버전은 이 디렉터리에 대해 `new` 커맨드가 실행되었을 당시의 최신 버전입니다. 버전을 변경하려면 `parse jssdk`를 사용하세요. `parse jssdk -a`를 사용하면 사용 가능한 모든 Parse JavaScript SDK가 표시됩니다. `parse jssdk`를 사용하여 현재 사용 중인 Parse JavaScript SDK 버전을 확인할 수도 있습니다.

```bash
$ parse jssdk
Current JavaScript SDK version is 1.2.13
$ parse jssdk -a
  1.2.18
  1.2.17
  1.2.16
  1.2.15
  1.2.14
* 1.2.13
  1.2.12
  1.2.11
$ parse jssdk 1.2.18
Current JavaScript SDK version is 1.2.18
$ parse jssdk -a
* 1.2.18
  1.2.17
  1.2.16
  1.2.15
  1.2.14
  1.2.13
  1.2.12
  1.2.11
```

### 커맨드 라인 툴 업데이트


`parse update`를 사용하여 커맨드 라인 툴을 업데이트할 수 있습니다. 실행하면 Parse 커맨드 라인 툴을 자동으로 최신 버전으로 업데이트합니다.

```bash
$ parse update
Fetching latest version ...
######################################################################## 100%
Installing ...
```
