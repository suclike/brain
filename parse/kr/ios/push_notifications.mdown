# 푸시 알림

푸시 알림은 사용자의 참여를 이끌어내고 앱에 대해 알리는 데 유용한 방법입니다. 전체 사용자 층에 빠르고 효과적으로 도달할 수 있습니다. 이 가이드는 푸시 알림을 보내도록 Parse를 설정하는 절차와 일반적인 사용법에 대해 안내합니다.

## 푸시 설정

푸시를 사용하려면 우선 [iOS 푸시 튜토리얼](/tutorials/ios-push-notifications)을 완료하여 앱을 구성하는 방법에 대해 알아보세요. 그런 다음 이 가이드로 돌아와서 Parse에서 제공하는 푸시 기능에 대해 자세히 알아보세요.

## 설치

푸시 알림을 받도록 등록된 기기에 설치된 모든 Parse 앱에는 연결된 `Installation` 개체가 있습니다. `Installation` 개체는 푸시 알림을 타게팅하는 데 필요한 모든 데이터를 저장하는 위치입니다. 예를 들어 야구 앱에서 사용자의 관심 팀을 저장하여 실적에 대한 업데이트를 보낼 수 있습니다.

iOS에서 `Installation` 개체는 `%{ParseInstallation}` 클래스(`%{ParseObject}`의 하위 클래스)를 통해 사용할 수 있습니다. 이 클래스는 데이터 저장과 검색에 [동일한 API](#objects)를 사용합니다. iOS 앱에서 현재 `Installation` 개체에 액세스하려면 `[PFInstallation currentInstallation]` 메서드를 사용합니다. 처음으로 `%{ParseInstallation}`을 저장하면 이 클래스가 `Installation` 클래스에 추가되고 `deviceToken` 필드가 설정되어 있는 동안에는 푸시 알림 타게팅에 사용할 수 있습니다.

```objc
- (void)application:(UIApplication *)application
        didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    // Store the deviceToken in the current Installation and save it to Parse.
    PFInstallation *currentInstallation = [PFInstallation currentInstallation];
    [currentInstallation setDeviceTokenFromData:deviceToken];
    [currentInstallation saveInBackground];
}
```

`%{ParseObject}`와 마찬가지로 `%{ParseInstallation}`을 수정할 수 있으며, 기기 관리와 타게팅에 도움이 되는 여러 특수 필드가 있습니다.

*   **`badge`**: iOS 앱용 아이콘 배지의 현재 값입니다. `%{ParseInstallation}`에서 이 값을 변경하면 앱 아이콘의 배지 값이 업데이트됩니다. 변경 사항은 이후의 배지 증가 푸시 알림에 사용할 수 있도록 서버에 저장되어야 합니다.
*   **`channels`**: 기기가 현재 가입된 채널의 배열입니다.
*   **`timeZone`**: 대상 기기가 위치한 지역의 현재 시간대입니다. 이 값은 기기에서 `Installation` 개체가 저장될 때마다 동기화됩니다_(읽기 전용)_.
*   **`deviceType`**: 기기 유형을 지정하며, &quot;ios&quot;, &quot;android&quot;, &quot;winrt&quot;, &quot;winphone&quot; 또는 &quot;dotnet&quot;입니다_(읽기 전용)_.
*   **`installationId`**: Parse에서 사용하는 기기의 고유 ID입니다_(읽기 전용)_.
*   **`deviceToken`**: Apple에서 생성한 토큰으로 iOS 기기에 사용됩니다_(읽기 전용)_.
*   **`channelUris`**: Microsoft에서 생성한 푸시 URI로, Windows 기기에 사용됩니다_(읽기 전용)_.
*   **`appName`**: 이 설치가 속한 클라이언트 앱의 표시 이름입니다_(읽기 전용)_.
*   **`appVersion`**: 이 설치가 속한 클라이언트 앱의 버전 문자열입니다_(읽기 전용)_.
*   **`parseVersion`**: 이 설치에서 사용하는 Parse SDK의 버전입니다_(읽기 전용)_.
*   **`appIdentifier`**: 이 설치의 클라이언트 앱에 대한 고유 ID입니다. iOS에서는 번들 ID입니다_(읽기 전용)_.

## 푸시 전송

Parse를 사용하여 푸시 알림을 보내는 방법에는  [채널](#sending-channels)과 [고급 타게팅](#sending-queries), 두 가지가 있습니다. 채널은 간단하고 사용하기 쉬운 푸시 전송 모델을 제공하는 반면 고급 타게팅은 보다 강력하고 유연한 모델을 제공합니다. 둘 다 서로 완전히 호환되며 이 섹션에서 다뤄집니다.

알림 전송은 주로 웹 콘솔이나 REST API, Cloud Code에서 수행됩니다. 하지만 기존 클라이언트 SDK에서 푸시 알림을 트리거할 수도 있습니다. 클라이언트 SDK에서 알림을 보내려는 경우 Parse 앱의 Push Notifications 설정에서 **Client Push Enabled** 를 설정해야 합니다.

![](/images/docs/client_push_settings.png)

### 채널 사용

알림을 보내는 가장 간단한 방법은 채널을 사용하는 것입니다. 채널을 사용하면 푸시 전송에 게시자-가입자 모델을 사용할 수 있습니다. 기기가 하나 이상의 채널에 가입하는 것으로 시작하고 나중에 가입자에게 알림이 전송될 수 있습니다. 지정된 `Installation`으로 가입된 채널은 `Installation` 개체의 `channels` 필드에 저장됩니다.

#### 채널에 가입

채널은 글자로 시작하는 문자열로 식별되며 영숫자와 밑줄, 대시로 구성됩니다. 사용하기 전에 명시적으로 생성할 필요가 없으며 각 `Installation`에서 한 번에 원하는 수의 채널에 가입할 수 있습니다.

채널 가입 추가는 `%{ParseObject}`에서 `addUniqueObject:` 메서드를 사용하여 수행할 수 있습니다. 예를 들어 야구 점수 앱에서 다음을 수행할 수 있습니다.

```objc
// When users indicate they are Giants fans, we subscribe them to that channel.
PFInstallation *currentInstallation = [PFInstallation currentInstallation];
[currentInstallation addUniqueObject:@"Giants" forKey:@"channels"];
[currentInstallation saveInBackground];
```

&quot;Giants&quot; 채널에 가입하면 `Installation` 개체의 `channels` 필드가 업데이트되어야 합니다.

![](/images/docs/installation_channel.png)

채널 해지도 다음과 같이 쉽게 수행할 수 있습니다.

```objc
// When users indicate they are no longer Giants fans, we unsubscribe them.
PFInstallation *currentInstallation = [PFInstallation currentInstallation];
[currentInstallation removeObject:@"Giants" forKey:@"channels"];
[currentInstallation saveInBackground];
```

가입된 채널 세트는 다음과 같이 `currentInstallation` 개체에 캐시됩니다.

```objc
NSArray *subscribedChannels = [PFInstallation currentInstallation].channels;
```

Cloud Code나 데이터 브라우저에서 채널을 변경하려는 경우 최신 채널을 가져오려면 이 줄 앞에 일부 `fetch`의 일부 형식을 호출해야 합니다.

#### 채널에 푸시 전송

iOS SDK에서 다음 코드를 사용하여 &quot;Giants&quot; 채널의 모든 가입자에게 자이언트 팀이 방금 득점했다는 알림을 보낼 수 있습니다. 알림을 보내면 iOS 사용자에게는 알림 센터에 알림이 표시되고 Android 사용자에게는 시스템 트레이에 알림이 표시됩니다.

```objc
// Send a notification to all devices subscribed to the "Giants" channel.
PFPush *push = [[PFPush alloc] init];
[push setChannel:@"Giants"];
[push setMessage:@"The Giants just scored!"];
[push sendPushInBackground];
```

한 개의 푸시 알림으로 여러 채널을 타게팅하려면 채널의 `NSArray`를 사용할 수 있습니다.

```objc
NSArray *channels = [NSArray arrayWithObjects:@"Giants", @"Mets", nil];
PFPush *push = [[PFPush alloc] init];
// Be sure to use the plural 'setChannels'.
[push setChannels:channels];
[push setMessage:@"The Giants won against the Mets 2-3."];
[push sendPushInBackground];
```

### 고급 타게팅 사용

채널은 많은 앱에 유용하지만 푸시 알림의 수신자를 좀 더 정확하게 타게팅해야 하는 경우가 있습니다. Parse에서는 [쿼리 API](#queries)를 사용하여 일부 `Installation` 개체에 대한 쿼리를 작성한 다음 푸시를 보낼 수 있습니다.

`%{ParseInstallation}`이 `%{ParseObject}`의 하위 클래스이므로 원하는 데이터를 저장하고 `Installation` 개체와 다른 개체 사이에 관계를 만들 수도 있습니다. 이렇게 하면 사용자 층의 맞춤화된 동적 세그먼트로 푸시를 보낼 수 있습니다.

#### 설치 데이터 저장

Parse에 [다른 데이터](#objects)를 저장하는 것만큼 쉽게 `Installation` 개체에 데이터를 저장할 수 있습니다. 야구 앱에서는 사용자가 경기 결과와 점수, 부상 정보에 대한 푸시를 받을 수 있습니다.

```objc
// Store app language and version
PFInstallation *installation = [PFInstallation currentInstallation];
[installation setObject:YES forKey:@"scores"];
[installation setObject:YES forKey:@"gameResults"];
[installation setObject:YES forKey:@"injuryReports"];
[installation saveInBackground];
```

`Installation` 개체와 Parse에 저장된 다른 클래스 사이에 관계를 생성할 수도 있습니다. PFInstallation을 특정 사용자에게 연결하려면 현재 사용자를 `%{ParseInstallation}`에 저장하면 됩니다.

```objc
// Associate the device with a user
PFInstallation *installation = [PFInstallation currentInstallation];
installation[@"user"] = [PFUser currentUser];
[installation saveInBackground];
```

#### 쿼리에 푸시 전송

`Installation` 개체에 데이터를 저장하고 나면 `PFQuery`를 사용하여 일부 기기를 타게팅할 수 있습니다. `Installation` 쿼리는 다른 [Parse 쿼리](#queries)와 같은 방식으로 작동하지만 이를 생성하기 위해 특별한 정적 메서드 `[PFInstallation query]`를 사용합니다. 또한 알림을 보내기 전에 이 쿼리를 `PFPush` 개체에 설정합니다.

```objc
// Create our Installation query
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"injuryReports" equalTo:YES];
// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
// Set our Installation query
[push setMessage:@"Willie Hayes injured by own pop fly."];
[push sendPushInBackground];
```

채널을 쿼리와 함께 사용할 수도 있습니다. 다음과 같이 &quot;Giants&quot; 채널의 모든 가입자에게 푸시를 보내지만 점수 업데이트를 원하는 가입자로 필터링할 ��� 있습니다.

```objc
// Create our Installation query
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"channels" equalTo:@"Giants"];
// Set channel
[pushQuery whereKey:@"scores" equalTo:YES];
// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
[push setMessage:@"Giants scored against the A's! It's now 2-2."];
[push sendPushInBackground];
```

`Installation` 클래스의 다른 개체에 관계를 저장하는 경우 쿼리에서 이를 사용할 수 있습니다. 예를 들어 다음과 같이 지정된 위치 근처의 모든 사용자에게 푸시 알림을 보낼 수 있습니다.

```objc
// Find users near a given location
PFQuery *userQuery = [PFUser query];
[userQuery whereKey:@"location"
           nearGeoPoint:stadiumLocation
           withinMiles:[NSNumber numberWithInt:1]]
// Find devices associated with these users
PFQuery *pushQuery = [PFInstallation query];
[pushQuery whereKey:@"user" matchesQuery:userQuery];

// Send push notification to query
PFPush *push = [[PFPush alloc] init];
[push setQuery:pushQuery];
// Set our Installation query
[push setMessage:@"Free hotdogs at the Parse concession stand!"];
[push sendPushInBackground];
```

## 전송 옵션

푸시 알림은 단순히 메시지를 전송하는 일 외에 더 많은 것을 할 수 있습니다. iOS에서 푸시는 재생할 사운드와 표시할 배지 번호뿐 아니라 보내려는 모든 맞춤 데이터를 포함할 수 있습니다. 또한 시간에 민감한 경우 알림에 만기일을 설정할 수 있습니다.

### 알림 사용자 지정

메시지뿐 아니라 더 많은 것을 보내려면 `NSDictionary`를 사용하여 모든 데이터를 패키지에 포함해야 합니다. 다음과 같이 특별한 의미가 있는 예약된 필드가 있습니다.

*   **`alert`**: 알림 메시지입니다.
*   **`badge`**: _(iOS에만 해당)_ 앱 아이콘의 오른쪽 상단에 표시되는 값입니다. 이 필드를 값에 설정하거나, `Increment`에 설정하여 현재 값을 1씩 증가시킬 수 있습니다.
*   **`sound`**: _(iOS에만 해당)_ 앱 번들에 있는 사운드 파일의 이름입니다.
*   **`content-available`**: _(iOS에만 해당)_ [뉴스스탠드](http://developer.apple.com/library/iOS/#technotes/tn2280/_index.html) 앱이나 [iOS7에 도입된](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW10) 원격 알림 백그라운드 모드(&quot;백그라운드 푸시&quot;라고도 함)를 사용하는 앱을 작성하는 경우 이 값을 1로 설정하여 백그라운드 다운로드를 트리거할 수 있습니다.
*   **`action`**: _(Android에만 해당)_ 푸시를 받으면 `Intent`가 시작됩니다. `title` 또는 `alert` 값을 지정하지 않으면 `Intent`가 시작되지만 사용자에게 알림이 표시되지 않습니다.
*   **`title`**: _(Android, Windows 8 및 Windows Phone 8에만 해당)_ Android 시스템 트레이나 Windows 토스트 알림에 표시되는 값입니다.

예를 들어 현재 배지 번호가 1씩 증가하고 사용자 지정 사운드를 재생하는 알림을 보내려면 다음과 같이 할 수 있습니다.

```objc
NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:
                       @"The Mets scored! The game is now tied 1-1!", @"alert",
                       @"Increment", @"badge",
                       @"cheering.caf", @"sound",
                       nil];
PFPush *push = [[PFPush alloc] init];
[push setChannels:[NSArray arrayWithObjects:@"Mets", nil]];
[push setData:data];
[push sendPushInBackground];
```

이 딕셔너리에 자신만의 데이터를 지정할 수도 있습니다. [알림 수신](#receiving) 섹션에서 설명한 것처럼 알림을 통해 앱을 열 때에만 이 데이터에 액세스할 수 있습니다. 이렇게 하면 사용자가 특정 알림을 열 때 다른 보기 컨트롤러를 표시하려는 경우 유용할 수 있습니다.

```objc
NSDictionary *data = [NSDictionary dictionaryWithObjectsAndKeys:
                        @"Ricky Vaughn was injured in last night's game!", @"alert",
                        @"Vaughn", @"name",
                        @"Man bites dog", @"newsItem",
                        nil];
PFPush *push = [[PFPush alloc] init];
[push setQuery:injuryReportsQuery];
[push setChannel:@"Indians"];
[push setData:data];
[push sendPushInBackground];
```

푸시 알림이 앱의 배지를 증가시키든 특정 값을 설정하든 관계없이 앱에서는 결국 배치를 삭제해야 합니다. 이에 대해서는 [배지 삭제](#receiving)에서 다룹니다.

### 만기일 설정

사용자의 기기가 꺼져있거나 인터넷에 연결되어 있지 않을 때에는 푸시 알림이 전달되지 않습니다. 시간에 민감한 알림이 있는 경우 만기일을 설정할 수 있습니다. 이렇게 하면 더 이상 관련이 없는 정보를 불필요하게 사용자에게 알리지 않습니다.

`PFPush` 클래스에서 제공하는 두 가지 메서드로 알림에 만기일을 설정할 수 있습니다. 첫 번째는 `expireAtDate:`이며, Parse에서 알림 전송을 중지해야 할 때를 지정하는 `NSDate`를 사용합니다.

```objc
// Create date object for tomorrow
NSDateComponents *comps = [[NSDateComponents alloc] init];
[comps setYear:2015];
[comps setMonth:8];
[comps setDay:14];
NSCalendar *gregorian =
  [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
NSDate *date = [gregorian dateFromComponents:comps];

// Send push notification with expiration date
PFPush *push = [[PFPush alloc] init];
[push expireAtDate:date];
[push setQuery:everyoneQuery];
[push setMessage:@"Season tickets on sale until August 8th!"];
[push sendPushInBackground];
```

하지만 이 메서드에는 주의해야 할 사항이 있습니다. 기기 시계의 정확성이 보장되지 않으므로 부정확한 결과가 발생할 수 있습니다. 이런 이유로 `PFPush` 클래스는 `NSTimeInterval` 개체를 허용하는 `expireAfterTimeInterval:` 메서드도 제공합니다. 알림은 지정된 간격이 경과한 후 만료됩니다.

```objc
// Create time interval
NSTimeInterval interval = 60*60*24*7; // 1 week

// Send push notification with expiration interval
PFPush *push = [[PFPush alloc] init];
[push expireAfterTimeInterval:interval];
[push setQuery:everyoneQuery];
[push setMessage:@"Season tickets on sale until next week!"];
[push sendPushInBackground];
```

### 플랫폼별 타게팅

플랫폼 간 앱을 빌드하는 경우 특정 운영 체제의 기기만 타게팅하고 싶을 수 있습니다. 고급 타게팅을 사용하면 대상 기기를 필터링할 수 있습니다.

다음 예에서는 Android와 iOS, Windows 8 사용자에게 서로 다른 알림을 보냅니다.

```objc
PFQuery *query = [PFInstallation query];
[query whereKey:@"channels" equalTo:@"suitcaseOwners"];

// Notification for Android users
[query whereKey:@"deviceType" equalTo:@"android"];
PFPush *androidPush = [[PFPush alloc] init];
[androidPush setMessage:@"Your suitcase has been filled with tiny robots!"];
[androidPush setQuery:query];
[androidPush sendPushInBackground];

// Notification for iOS users
[query whereKey:@"deviceType" equalTo:@"ios"];
PFPush *iOSPush = [[PFPush alloc] init];
[iOSPush setMessage:@"Your suitcase has been filled with tiny apples!"];
[iOSPush setChannel:@"suitcaseOwners"];
[iOSPush setQuery:query];
[iOSPush sendPushInBackground];

// Notification for Windows 8 users
[query whereKey:@"deviceType" equalTo:@"winrt"];
PFPush *winPush = [[PFPush alloc] init];
[winPush setMessage:@"Your suitcase has been filled with tiny glass!"];
[winPush setQuery:query];
[winPush sendPushInBackground];

// Notification for Windows 8 users
[query whereKey:@"deviceType" equalTo:@"winphone"];
PFPush *winPush = [[PFPush alloc] init];
[wpPush setMessage:@"Your suitcase is very hip; very metro."];
[wpPush setQuery:query];
[wpPush sendPushInBackground];
```

## 푸시 예약

현재 iOS SDK에서는 예약된 푸시 알림 전송이 지원되지 않습니다. REST API, JavaScript API 또는 웹 콘솔을 참조하세요.

## 푸시 수신

[알림 사용자 지정](#options-data) 섹션에서 살펴본 대로 알림 메시지와 함께 임의의 데이터를 보낼 수 있습니다. 이 데이터를 사용하여 사용자가 알림을 열 때 앱의 동작을 수정할 수 있습니다. 예를 들어 친구가 사용자의 사진에 대해 댓글을 달았다고 표시한 알림을 열었을 때 이 사진을 표시하면 좋을 것입니다.

Apple에서 지정한 패키지 크기 제한으로 인해 메시지의 최대 크기에 제한이 있으므로 전송하는 추가 데이터의 양을 주의해서 관리해야 합니다. 따라서 추가 키와 값을 가능한 한 작게 유지하는 것이 좋습니다.

```objc
NSDictionary *data = @{
    @"alert": @"James commented on your photo!",
    @"p": @"vmRZXZ1Dvo" // Photo's object id
};
PFPush *push = [[PFPush alloc] init];
[push setQuery:photoOwnerQuery];
[push setData:data];
[push sendPushInBackground];
```

### 페이로드에 응답

알림에서 앱을 열면 `launchOptions` 딕셔너리를 통해 `application:didFinishLaunchingWithOptions:` 메서드에서 데이터를 사용할 수 있습니다.

```objc
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    . . .
    // Extract the notification data
    NSDictionary *notificationPayload = launchOptions[UIApplicationLaunchOptionsRemoteNotificationKey];
    // Create a pointer to the Photo object
    NSString *photoId = [notificationPayload objectForKey:@"p"];
    PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@"Photo"
                                      objectId:photoId];
    // Fetch photo object
    [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
        // Show photo view controller
        if (!error && [PFUser currentUser]) {
            PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];
            [self.navController pushViewController:viewController animated:YES];
        }
    }];
}
```

알림을 수신했을 때 앱이 실행 중인 경우 `userInfo` 딕셔너리를 통해 `application:didReceiveRemoteNotification:fetchCompletionHandler:` 메서드에서 데이터를 사용할 수 있습니다.

```objc
- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))handler {
    // Create empty photo object
    NSString *photoId = [userInfo objectForKey:@"p"];
    PFObject *targetPhoto = [PFObject objectWithoutDataWithClassName:@"Photo"
                                      objectId:photoId];
    // Fetch photo object
    [targetPhoto fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
        // Show photo view controller
        if (error) {
            handler(UIBackgroundFetchResultFailed);
        } else if ([PFUser currentUser]) {
            PhotoVC *viewController = [[PhotoVC alloc] initWithPhoto:object];
            [self.navController pushViewController:viewController animated:YES];
            handler(UIBackgroundFetchResultNewData);
        } else {
            handler(UIBackgroundModeNoData);
        }
    }];
}
```

푸시 알림 처리에 대한 자세한 내용은 Apple의 [로컬 및 푸시 알림 프로그래밍 가이드](http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/IPhoneOSClientImp/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW1)를 참조하세요.

### 푸시 및 앱 오픈 횟수 추적

시간이 지남에 따른 사용자의 참여와 푸시 알림의 효과를 추적하기 위해 `PFAnalytics` 클래스에 일부 연결 기능이 제공됩니다. 앱 오픈 횟수와 푸시 관련 오픈율은 앱의 대시보드에 제공됩니다.

먼저 `application:didFinishLaunchingWithOptions:` 메서드에 다음을 추가하여 앱이 시작된 시기와 트리거한 동작에 대한 정보를 수집합니다. 추가로 iOS 7의 고급 백그라운드 푸시 기능을 사용하여 싱글 로직 app-open 이벤트나 push-open 이벤트 수가 계산되는지 확인합니다.

```objc
if (application.applicationState != UIApplicationStateBackground) {
    // Track an app open here if we launch with a push, unless
    // "content_available" was used to trigger a background push (introduced
    // in iOS 7). In that case, we skip tracking here to avoid double
    // counting the app-open.
    BOOL preBackgroundPush = ![application respondsToSelector:@selector(backgroundRefreshStatus)];
    BOOL oldPushHandlerOnly = ![self respondsToSelector:@selector(application:didReceiveRemoteNotification:fetchCompletionHandler:)];
    BOOL noPushPayload = ![launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];
    if (preBackgroundPush || oldPushHandlerOnly || noPushPayload) {
        [PFAnalytics trackAppOpenedWithLaunchOptions:launchOptions];
    }
}
```

두 번째로, 앱이 실행 중이거나 백그라운드 상태인 경우 `application:didReceiveRemoteNotification:` 메서드가 푸시 페이로드를 대신 처리합니다. 앱이 백그라운드 상태일 때 사용자가 푸시 알림에서 작업하면 앱이 포그라운드로 전환됩니다. 앱이 &quot;푸시 알림에서 열리는&quot; 이러한 전환을 추적하려면 추적 코드를 호출하기 전에 한 가지 검사를 더 수행합니다.

```objc
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
    if (application.applicationState == UIApplicationStateInactive) { 
        // The application was just brought from the background to the foreground, 
        // so we consider the app as having been "opened by a push notification." 
        [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];
    }
}
```

마지막으로 iOS 7에서 새 푸시 기능(새 &quot;콘텐츠 사용&quot; 푸시 기능 포함)을 사용하는 경우에는 iOS 7 전용 핸들러도 구현해야 합니다.

```objc
- (void)application:(UIApplication *)application
        didReceiveRemoteNotification:(NSDictionary *)userInfo
        fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
            if (application.applicationState == UIApplicationStateInactive) {
                [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:userInfo];
            }
}
```

#### OS X 추적

OS X 앱에서 푸시 알림 수신을 지원하고 푸시와 관련된 앱 오픈 횟수를 추적하려는 경우 `application:didReceiveRemoteNotification:` 메서드(iOS에서와 같이)에 대한 연결을 추가하고 다음을 `applicationDidFinishLaunching:`에 추가합니다.

```objc
- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {
    // ... other Parse setup logic here
    [PFAnalytics trackAppOpenedWithRemoteNotificationPayload:[aNotification userInfo]];
}
```

#### 로컬 알림 추적(iOS에만 해당)

로컬 알림에 대한 분석을 추적하려면 `application:didFinishLaunchingWithOptions:` _이외에도_(구현된 경우) `application:didReceiveLocalNotification:`을 호출해야 합니다. 중복 이벤트를 추적하지 않도록 조심하세요.

#### 배지 삭제

앱의 배지를 삭제하기 좋은 시점은 대개 앱이 열릴 때입니다. 현재 설치에 배지 속성을 설정하면 앱 아이콘 배지 번호가 업데이트되고 다음 번 저장 시 서버에 최신 배지 값이 지속되도록 합니다. 수행해야 할 작업은 다음과 같습니다.

```objc
- (void)applicationDidBecomeActive:(UIApplication *)application {
    PFInstallation *currentInstallation = [PFInstallation currentInstallation];
    if (currentInstallation.badge != 0) {
        currentInstallation.badge = 0;
        [currentInstallation saveEventually];
    }
    // ... 
}
```

[UIApplicationDelegate 설명서](http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIApplicationDelegate_Protocol/Reference/Reference.html)에 앱의 수명 주기와 연결하는 추가 정보가 포함되어 있습니다. 배지 카운트 재설정과 가장 관련성이 높은 것은 `applicationDidBecomeActive:`, `application:didFinishLaunchingWithOptions:` 및 `application:didReceiveRemoteNotification:`입니다.

## 문제 해결

푸시 알림 설정은 개발자에게 불편을 야기하는 경우가 많습니다. 과정이 복잡하고 진행하는 동안 문제가 발생합니다. 문제가 발생하면 다음 문제 해결 도움말을 사용해 보세요. 

*   `Info.plist` 파일([iOS 푸시 알림 튜토리얼](/tutorials/ios-push-notifications)의 4.1단계 &quot;Configuring a Push Enabled iOS Application&quot;에 설명)의 올바른 번들 식별자를 사용하는지 확인합니다.
*   Project &gt; Build Settings에서 올바른 프로비저닝 프로필(iOS 푸시 알림 튜토리얼의 4.3단계에 설명)을 설정했는지 확인합니다.
*   프로젝트를 삭제하고 Xcode를 다시 시작합니다.
*   [Certificates, Identifiers &amp; Profiles](https://developer.apple.com/account/overview.action)로 이동하여 프로비저닝 프로필을 다시 생성하고 프로비저닝 프로필의 앱 ID 세트를 변경한 다음 다시 변경합니다. 튜토리얼의 2단계(Creating the Provisioning Profile)에 설명된 대로 프로필을 다시 설치하고 4단계(Configuring a Push Enabled iOS Application)에 설명된 대로 프로젝트의 Build Settings에 프로필을 설정합니다.
*   Xcode Organizer를 열고 만료되어 사용되지 않은 모든 프로비저닝 프로필을 컴퓨터와 iOS 기기 모두에서 삭제합니다.
*   모두 컴파일되고 오류 없이 실행되지만 여전히 푸시를 받지 못한다면 앱이 알림을 받도록 권한을 설정했는지 확인합니다. 이 설정은 iOS 기기의 `Settings > Notification >        YourAppName`에서 확인할 수 있습니다.*   앱에 푸시 알림을 받을 수 있는 권한을 부여한 경우 올바른 프로비저닝 프로필로 앱에 코드 서명했는지 확인합니다. 개발 푸시 알림 인증서를 Parse에 업로드한 경우 개발 프로비저닝 프로필로 앱을 구축한 경우에만 푸시 알림이 수신됩니다. 프로덕션 푸시 알림 인증서를 업로드한 경우 배포 프로비저닝 프로필로 앱에 서명해야 합니다. 임시 및 App Store 배포 프로비저닝 프로필은 앱이 프로덕션 푸시 알림 인증서로 구성된 경우 작동합니다.
*   Apple iOS 프로비저닝 포털에서 기존 앱 ID에 대한 푸시 알림을 사용하도록 설정할 때는 프로비저닝 프로필을 다시 생성한 다음 업데이트된 프로필을 Xcode Organizer에 추가해야 합니다.
*   배포 푸시 알림은 App Store에 앱을 제출하기 전에 사용하도록 설정해야 합니다. 앱을 제출하기 전에 섹션 7, App Store 준비를 준수했는지 확인하세요. 이 중 한 단계라도 건너뛴 경우에는 새 바이너리를 App Store에 제출해야 할 수 있습니다.
*   앱이 임시 프로필로 가입된 경우 배포 푸시 알림을 수신할 수 있는지 한 번 더 확인합니다. 이 구성은 App Store에 프로비저닝된 앱에 가져올 수 있는 가장 근접한 구성입니다.
*   Parse Push 콘솔에서 사용자 수를 확인합니다. 예상 수신자 수와 일치하나요? 푸시가 잘못 타게팅되었을 수 있습니다.
