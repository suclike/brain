# クエリ

これまでに`Parse.Query`で`get`を使用して、Parseから単一の`Parse.Object`を取得する方法を確認しました。`Parse.Query`を使用したデータの取得には、一度に多数のオブジェクトを取得したり、取得するオブジェクトに条件を設定したりするなど、その他にも多数の方法があります。


## 基本的なクエリ

多くの場合、`get`には取得するオブジェクトを指定する機能はありません。`Parse.Query`には、単一のオブジェクトだけでなく、オブジェクトのリストを取得するさまざまな方法があります。

`Parse.Query`を作成してそれに条件を設定し、その後`find`を使用して`Parse.Object`が一致する`Array`を取得するというのが一般的なパターンです。たとえば、特定の`playerName`を持つスコアを取得するには、`equalTo`メソッドを使用してキーの値を絞り込みます。

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.equalTo("playerName", "Dan Stemkoski");
query.find({
  success: function(results) {
    alert("Successfully retrieved " + results.length + " scores.");
    // Do something with the returned Parse.Object values
    for (var i = 0; i < results.length; i++) {
      var object = results[i];
      alert(object.id + ' - ' + object.get('playerName'));
    }
  },
  error: function(error) {
    alert("Error: " + error.code + " " + error.message);
  }
});
```


## クエリ条件

`Parse.Query`で検索するオブジェクトに条件を設定する方法がいくつかあります。`notEqualTo`を使用すると特定のキーと値のペアを持つオブジェクトをフィルタで除外できます。

```js
query.notEqualTo("playerName", "Michael Yabuti");
```

条件は複数設定でき、そのすべての条件に一致したオブジェクトのみが結果に表示されます。つまり、AND条件のように機能します。

```js
query.notEqualTo("playerName", "Michael Yabuti");
query.greaterThan("playerAge", 18);
```

`limit`を設定すると結果の数を制限できます。デフォルトでは、結果は100件に制限されていますが、1～1000件の範囲で自由に制限を設定できます。

```js
query.limit(10); // limit to at most 10 results
```

結果を1件だけ表示したいときには、`find`の代わりに`first`を使用すると便利な場合があります。

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.equalTo("playerEmail", "dstemkoski@example.com");
query.first({
  success: function(object) {
    // Successfully retrieved the object.
  },
  error: function(error) {
    alert("Error: " + error.code + " " + error.message);
  }
});
```

`skip`を設定すると最初の結果をスキップできます。ページネーションに便利です。

```js
query.skip(10); // skip the first 10 results
```

数字や文字列のように並べ替え可能なタイプの場合は、返される結果の順番を制御できます。

```js
// Sorts the results in ascending order by the score field
query.ascending("score");
// Sorts the results in descending order by the score field
query.descending("score");
```

並べ替え可能なタイプの場合、クエリ内で比較も使用できます。

```js
// Restricts to wins < 50
query.lessThan("wins", 50);

// Restricts to wins <= 50
query.lessThanOrEqualTo("wins", 50);

// Restricts to wins > 50
query.greaterThan("wins", 50);

// Restricts to wins >= 50
query.greaterThanOrEqualTo("wins", 50);
```

複数の異なる値に一致するオブジェクトを取得する場合は、`containedIn`を使用して許容される値の配列を指定します。通常は、複数のクエリを1つのクエリで置き換えるときに便利です。たとえば、特定のリストにあるプレイヤーがあげたスコアを取得する場合は、次のように設定します。

```js
// Finds scores from any of Jonathan, Dario, or Shawn
query.containedIn("playerName",
                  ["Jonathan Walsh", "Dario Wunsch", "Shawn Simon"]);
```

複数の値のいずれかに一致しないオブジェクトを取得する場合は、`notContainedIn`を使用して許容される値の配列を指定します。たとえば、リストにあるプレイヤー以外のプレイヤーがあげたスコアを取得する場合は、次のように設定します。

```js
// Finds scores from anyone who is neither Jonathan, Dario, nor Shawn
query.notContainedIn("playerName",
                     ["Jonathan Walsh", "Dario Wunsch", "Shawn Simon"]);
```

特定のキーセットを持つオブジェクトを取得するには、`exists`を使用します。反対に、特定のキーセットを持たないオブジェクトを取得する場合は、`doesNotExist`を使用します。

```js
// Finds objects that have the score set
query.exists("score");

// Finds objects that don't have the score set
query.doesNotExist("score");
```

`matchesKeyInQuery`メソッドでは、別のクエリで取得した一連のオブジェクトが持つキーの値に一致するキーを持つオブジェクトを取得できます。たとえば、スポーツチームを持つクラスがあり、利用者のクラスに利用者の出身地を格納してある場合、クエリを1つ発行するだけで、出身地のチームが勝ち越している利用者のリストを取得できます。クエリは次のようになります。

```js
var Team = Parse.Object.extend("Team");
var teamQuery = new Parse.Query(Team);
teamQuery.greaterThan("winPct", 0.5);
var userQuery = new Parse.Query(Parse.User);
userQuery.matchesKeyInQuery("hometown", "city", teamQuery);
userQuery.find({
  success: function(results) {
    // results has the list of users with a hometown team with a winning record
  }
});
```

逆に、別のクエリで取得した一連のオブジェクトが持つキーの値に一致しないオブジェクトを取得するには、`doesNotMatchKeyInQuery`を使用します。たとえば、出身地のチームが負け越している利用者を取得するには、次のように設定します。

```js
var losingUserQuery = new Parse.Query(Parse.User);
losingUserQuery.doesNotMatchKeyInQuery("hometown", "city", teamQuery);
losingUserQuery.find({
  success: function(results) {
    // results has the list of users with a hometown team with a losing record
  }
});
```

キーのリストと共に`select`を呼び出すことで、返されるフィールドを制限できます。`score`フィールドと`playerName`フィールドのみ（さらには特別に組み込まれたフィールド`objectId`、`createdAt`、`updatedAt`）を持つドキュメントを取得するには、次のように設定します。

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.select("score", "playerName");
query.find().then(function(results) {
  // each of results will only have the selected fields available.
});
```

返されたオブジェクトに`fetch`を呼び出すと、残りのフィールドを後から取得できます。

```js
query.first().then(function(result) {
  // only the selected fields of the object will now be available here.
  return result.fetch();
}).then(function(result) {
  // all fields of the object will now be available here.
});
```


## 配列の値についてのクエリ

配列タイプのキーの場合、キーの配列の値に2が入っているオブジェクトを取得するには、次のようにします。

```js
// Find objects where the array in arrayKey contains 2.
query.equalTo("arrayKey", 2);
```

また、キーの配列の値に要素2、3、4がすべて入っているオブジェクトを取得するには、次のようにします。

```js
// Find objects where the array in arrayKey contains all of the elements 2, 3, and 4.
query.containsAll("arrayKey", [2, 3, 4]);
```


## 文字列の値についてのクエリ

特定の文字列で始まる文字列の値のみを取得するには、`startsWith`を使用します。MySQL LIKE演算子と同じようにインデックス化されることから、大規模なデータセットに効果的です。

```js
// Finds barbecue sauces that start with "Big Daddy's".
var query = new Parse.Query(BarbecueSauce);
query.startsWith("name", "Big Daddy's");
```


## リレーショナルクエリ

リレーショナルデータにはいくつかの方法でクエリを発行できます。特定の`Parse.Object`に一致するフィールドを持つオブジェクトを取得する場合は、他のデータタイプと同じように`equalTo`を使用できます。たとえば、各`Comment`が`post`フィールドに`Post`オブジェクトを持つ場合、特定の`Post`のコメントを取得できます。

```js
// Assume Parse.Object myPost was previously created.
var query = new Parse.Query(Comment);
query.equalTo("post", myPost);
query.find({
  success: function(comments) {
    // comments now contains the comments for myPost
  }
});
```

別のクエリに一致する`Parse.Object`をフィールドに持つオブジェクトを取得する場合は、`matchesQuery`を使用します。デフォルトの制限100と最大制限1000が内部クエリにも適用されることから、大規模なデータセットの場合は、目的の動作が得られるまで慎重にクエリを作成する必要があります。画像のある投稿のコメントを取得するには、次のようにします。

```js
var Post = Parse.Object.extend("Post");
var Comment = Parse.Object.extend("Comment");
var innerQuery = new Parse.Query(Post);
innerQuery.exists("image");
var query = new Parse.Query(Comment);
query.matchesQuery("post", innerQuery);
query.find({
  success: function(comments) {
    // comments now contains the comments for posts with images.
  }
});
```

別のクエリに一致しない`Parse.Object`をフィールドに持つオブジェクトを取得する場合は、`doesNotMatchQuery`を使用します。画像のない投稿のコメントを取得するには、次のようにします。

```js
var Post = Parse.Object.extend("Post");
var Comment = Parse.Object.extend("Comment");
var innerQuery = new Parse.Query(Post);
innerQuery.exists("image");
var query = new Parse.Query(Comment);
query.doesNotMatchQuery("post", innerQuery);
query.find({
  success: function(comments) {
    // comments now contains the comments for posts without images.
  }
});
```

次のように、`objectId`によってリレーショナルクエリを実行することもできます。

```js
var post = new Post();
post.id = "1zEcyElZ80";
query.equalTo("post", post);
```

状況によっては、1つのクエリで複数タイプの関連するオブジェクトを返したい場合があります。その場合は`include`メソッドを使用します。たとえば、最新10件のコメントを取得し、その関連する投稿を同時に取得する場合は、次のようにします。

```js
var query = new Parse.Query(Comment);

// Retrieve the most recent ones
query.descending("createdAt");

// Only retrieve the last ten 
query.limit(10);

// Include the post data with each comment
query.include("post");

query.find({
  success: function(comments) {
    // Comments now contains the last ten comments, and the "post" field
    // has been populated. For example
    for (var i = 0; i < comments.length; i++) 
      // This does not require a network access.
      var post = comments[i].get("post");
    }
  }
});
```

また、ドット表記を使用すると複数レベルを指定できます。コメントの投稿と投稿の作成者も指定したい場合は、次のようにします。

```js
query.include(["post.author"]);
```

`include`を複数回呼び出すことで、複数のフィールドを持つクエリを発行できます。この機能は、`first`や`get`といったParse.Queryヘルパーでも使用できます。


## オブジェクトのカウント

クエリに一致するオブジェクトの数をカウントするが、一致するすべてのオブジェクトを取得する必要がない場合は、`find`の代わりに`count`を使用します。たとえば、特定のプレイヤーがプレイしたゲームの回数をカウントするには、次のように設定します。

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.equalTo("playerName", "Sean Plott");
query.count({
  success: function(count) {
    // The count request succeeded. Show the count
    alert("Sean has played " + count + " games");
  },
  error: function(error) {
    // The request failed
  }
});
```

1000を超えるオブジェクトを持つクラスの場合、タイムアウトによってカウント操作が制限されます。常にタイムアウトエラーが発生したり、おおよその結果のみが返されたりすることがあります。従って、こういったカウント操作が発生しないようにアプリケーションを構築することをお勧めします。


## 複合クエリ

複数のクエリのいずれかに一致するオブジェクトを検出する場合は、渡されたクエリをORでつなげる`Parse.Query.or`メソッドを使用できます。たとえば、優勝回数が多いまたは少ないプレイヤーを検出する場合は、次のように設定します。

```js
var lotsOfWins = new Parse.Query("Player");
lotsOfWins.greaterThan("wins", 150);

var fewWins = new Parse.Query("Player");
fewWins.lessThan("wins", 5);

var mainQuery = Parse.Query.or(lotsOfWins, fewWins);
mainQuery.find({
  success: function(results) {
    // results contains a list of players that either have won a lot of games or won only a few games.
  },
  error: function(error) {
    // There was an error.
  }
});
```

「AND」演算子として機能する新たに作成した`Parse.Query`に条件を追加できます。

ただし、複合クエリのサブクエリ内ではフィルタ以外の条件（`limit`、`skip`、`ascending`/`descending`、`include`など）はサポートされません。
