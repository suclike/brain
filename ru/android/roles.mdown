# Роли

По мере увеличения масштабов и базы пользователей приложения вам может понадобиться более широкий контроль над доступом к участкам данных, чем могут предоставить связанные с пользователями ACL. Для обеспечения этого требования Parse поддерживает форму [управления доступом на основе ролей](http://en.wikipedia.org/wiki/Role-based_access_control). Роли обеспечивают логическую группировку пользователей с основными правами доступа к данным Parse. Роли являются проименованными объектами, которые включают пользователей и другие роли.  Любое разрешение, предоставленное для роли, косвенным образом предоставляется всем пользователям этой роли, а также пользователям всех ролей, которые она содержит.

Например, в приложении с отобранными материалами может быть определенное количество пользователей с ролью &laquo;Модераторы&raquo;, которые могут изменять и удалять материалы, созданные другими пользователями.  Также может быть группа пользователей с ролью &laquo;Администраторы&raquo;, которые имеют такие же права, как и модераторы, но также могут изменять глобальные параметры приложения. Предоставив пользователям эти роли, вы предоставляете возможность новым пользователям получить роли модератора или администратора без необходимости вручную предоставлять права для каждого ресурса каждому пользователю.

Мы предлагаем специальный класс под названием `ParseRole`, который представляет эти объекты-роли в коде клиента. `ParseRole` &mdash; это подкласс объекта `ParseObject`, который имеет такие же функции, например гибкую схему, автоматическое сохранение и интерфейс значений ключа.  Все методы, существующие для класса `ParseObject`, также существуют для класса `ParseRole`.  Разница заключается в том, что класс `ParseRole` имеет специальные дополнения, специфические для управления ролями.

## Свойства

Класс `ParseRole` имеет свойства, которые отличают его от класса `ParseObject`:

*   name: название роли.  Это обязательное значение, которое можно установить только один раз при создании роли.  Название должно состоять из цифр, букв, пробелов, дефисов (-) или знаков подчеркивания (_).  Это название будет использоваться для определения роли без указания ее идентификатора objectId.
*   users: [связь](#objects-pointers) с набором пользователей, которые унаследуют разрешения, предоставленные роли.
*   roles: [связь](#objects-pointers) с набором ролей, для которых связанные пользователи и роли унаследуют разрешения, предоставленные роли.

## Безопасность объектов роли

Класс `ParseRole` использует такую же схему безопасности (ACL), как и все другие объекты Parse, кроме того, что для этого класса ACL должно быть четко настроено. Как правило, только пользователи с повышенным уровнем доступа (например, администратор) должны иметь возможность создавать или изменять роли, поэтому следует соответствующим образом определить ACL для них.  Помните, что при предоставлении пользователю доступа с правом записи для роли `ParseRole` этот пользователь может добавлять других пользователей для этой роли или полностью удалить эту роль.

Чтобы создать новую роль `ParseRole`, следует написать такой код:

```java
// By specifying no write privileges for the ACL, we can ensure the role cannot be altered.
ParseACL roleACL = new ParseACL();
roleACL.setPublicReadAccess(true);
ParseRole role = new ParseRole("Administrator", roleACL);
role.saveInBackground();
```

Можно добавлять пользователей и роли, которые унаследуют новые разрешения для роли через связи &quot;users&quot; (&laquo;пользователи&raquo;) и &quot;roles&quot; (&laquo;роли&raquo;) для роли `ParseRole`:

```java
ParseRole role = new ParseRole(roleName, roleACL);
for (ParseUser user : usersToAddToRole) {
    role.getUsers().add(user)
}
for (ParseRole childRole : rolesToAddToRole) {
    role.getRoles().add(childRole);
}
role.saveInBackground();
```

Будьте особенно внимательны при назначении ACL ролям, чтобы роли могли изменяться только теми пользователями, которые должны иметь разрешение на их изменение.

## Безопасность других объектов

После создания набора ролей для приложения их можно использовать с ACL для определения прав, которые получат соответствующие пользователи. Каждый объект `ParseObject` может указать класс `ParseACL`, который предоставляет список управления доступом, указывающий на то, какие пользователи и роли должны получить доступ с правом чтения или записи для объекта.

Предоставление роли разрешения на чтение или запись для объекта является простым процессом.  Также можно воспользоваться классом `ParseRole`:

```java
ParseRole moderators = /* Query for some ParseRole */;
ParseObject wallPost = new ParseObject("WallPost");
ParseACL postACL = new ParseACL();
postACL.setRoleWriteAccess(moderators);
wallPost.setACL(postACL);
wallPost.saveInBackground();
```

Можно не выполнять запрос на роль, указав ее имя в ACL:

```java
ParseObject wallPost = new ParseObject("WallPost");
ParseACL postACL = new ParseACL();
postACL.setRoleWriteAccess("Moderators", true);
wallPost.setACL(postACL);
wallPost.save();
```

Классы `ParseACL` на основе роли можно также использовать при указании ACL по умолчанию для вашего приложения, упрощая защиту данных пользователей и предоставляя доступ пользователям с дополнительными правами.  Например, для приложения модерируемого форума необходимо указать ACL по умолчанию следующим образом:

```java 
ParseACL defaultACL = new ParseACL();
// Everybody can read objects created by this user
defaultACL.setPublicReadAccess(true);
// Moderators can also modify these objects
defaultACL.setRoleWriteAccess("Moderators");
// And the user can read and modify its own objects
ParseACL.setDefaultACL(defaultACL, true);
```

## Иерархия ролей

Как описано выше, одна роль может содержать другую, устанавливая иерархическую связь между двумя ролями. Следствием этой связи является косвенное предоставление всем дочерним ролям любого разрешения, предоставленного родительской роли.

Такие типы связей можно найти в приложениях с материалами, управляемыми пользователями, например на форумах. Небольшой подкласс пользователей &laquo;Администраторы&raquo; имеет наивысший уровень доступа с возможностью изменения параметров приложения, создания новых форумов, настройки глобальных сообщений и т.д. Другой подкласс пользователей &laquo;Модераторы&raquo; ответственен за обеспечение соответствия нормам материалов, создаваемых пользователями. Любой пользователь с правами администратора должен также иметь права модератора. Чтобы установить эту связь, необходимо сделать роль &laquo;Администраторы&raquo; дочерней ролью по отношению к роли &laquo;Модераторы&raquo; следующим образом:

```java
ParseRole administrators = /* Your "Administrators" role */;
ParseRole moderators = /* Your "Moderators" role */;
moderators.getRoles().add(administrators);
moderators.saveInBackground();
```
