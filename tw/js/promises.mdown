# Promise

除了回呼之外，Parse JavaScript SDK 中的每個非同步方法都會傳回一個 `Promise`。若使用 Promise，程式碼將比您使用回呼的巢狀化程式碼還要簡潔。

## `then` 方法

每個 `Promise` 都有一個命名為 `then` 的方法。此方法會取得一對回呼。如果 Promise _已解析_，就會呼叫第一個回呼；如果 Promise _遭拒絕_，則會呼叫第二個回呼。

```js
obj.save().then(function(obj) {
  // the object was saved successfully.
},
function(error) {
  // the save failed.
});
```

## 串連 Promise

Promise 有一點神奇之處在於能讓您不必巢狀化處理即可串連它們。如果某個 Promise 的回呼傳回新的 Promise，則在解析第二個 Promise 之前，不會解析第一個 Promise。這樣做能讓您執行多個動作，而不會在使用回呼時產生金字塔型程式碼。

```js
var query = new Parse.Query("Student");
query.descending("gpa");
query.find().then(function(students) {
  students[0].set("valedictorian", true);
  return students[0].save();
}).then(function(valedictorian) {
  return query.find();
}).then(function(students) {
  students[1].set("salutatorian", true);
  return students[1].save();
}).then(function(salutatorian) {
  // Everything is done!
});
```

## 錯誤處理

如果一個鏈結中的任何 Promise 傳回錯誤，則會略過它後面的所有成功回呼，直到遇到錯誤回呼為止。此錯誤回呼可以轉換該錯誤，或是可以透過傳回未被拒絕的新 Promise 來處理該錯誤。您可以把被拒絕的 Promise 想成就像是擲出例外狀況。錯誤回呼就像是 Catch 區塊，會處理錯誤或重新擲回錯誤。

```js
var query = new Parse.Query("Student");
query.descending("gpa");
query.find().then(function(students) {
  students[0].set("valedictorian", true);
  // Force this callback to fail.
  return Parse.Promise.error("There was an error.");
}).then(function(valedictorian) {
  // Now this will be skipped.
  return query.find();
}).then(function(students) {
  // This will also be skipped.
  students[1].set("salutatorian", true);
  return students[1].save();
}, function(error) {
  // This error handler WILL be called. error will be "There was an error.".
  // Let's handle the error by returning a new promise.
  return Parse.Promise.as("Hello!");
}).then(function(hello) {
  // Everything is done!
}, function(error) {
  // This isn't called because the error was already handled.
});
```

如果具有一長串成功回呼的鏈結，只在末端有一個錯誤處理常式，通常會很方便。

## 建立 Promise

剛開始時，您可以只使用如 `find` 或 `save` 方法傳回的 Promise。不過，在更進階的案例中，您可能會想要建立自己的 Promise。在您建立 `Promise` 之後，您必須呼叫 `resolve` 或 `reject` 以觸發其回呼。

```js
var successful = new Parse.Promise();
successful.resolve("The good result.");

var failed = new Parse.Promise();
failed.reject("An error message.");
```

如果您在建立 Promise 時就知道其結果，則您可以使用一些便利的方法。

```js
var successful = Parse.Promise.as("The good result.");
var failed = Parse.Promise.error("An error message.");
```

## 以序列方式使用 Promise

當您想一次執行一系列的工作，而每個都要先等待前一個完成，此時 Promise 會很方便。舉例來說，請想像您想刪除部落格上的所有留言。

```js
var query = new Parse.Query("Comments");
query.equalTo("post", 123);

query.find().then(function(results) {
  // Create a trivial resolved promise as a base case.
  var promise = Parse.Promise.as();
  _.each(results, function(result) {
    // For each item, extend the promise with a function to delete it.
    promise = promise.then(function() {
      // Return a promise that will be resolved when the delete is finished.
      return result.destroy();
    });
  });
  return promise;
}).then(function() {
  // Every comment was deleted.
});
```

## 以平行方式使用 Promise

您也可以利用 Promise，使用 `when` 方法平行執行多個工作。您可以一次開始多個作業，並使用 `Parse.Promise.when` 建立在所有輸入 Promise 完成解析時才解析的新 Promise。如果傳入的 Promise 都沒有失敗，新的 Promise 會成功執行，否則就會因最後錯誤而導致失敗。平行執行作業會比序列執行還要快，但可能會佔用更多的系統資源和頻寬。

```js
var query = new Parse.Query("Comments");
query.equalTo("post", 123);

query.find().then(function(results) {
  // Collect one promise for each delete into an array.
  var promises = [];
  _.each(results, function(result) {
    // Start this delete immediately and add its promise to the list.
    promises.push(result.destroy());
  });
  // Return a new promise that is resolved when all of the deletes are finished.
  return Parse.Promise.when(promises);
}).then(function() {
  // Every comment was deleted.
});
```

## 建立非同步方法

有了這些工具，便可輕鬆建立可傳回 Promise 的專屬非同步函數。例如，您可以建立 Promise 版本的 `setTimeout`。

```js
var delay = function(millis) {
  var promise = new Parse.Promise();
  setTimeout(function() {
    promise.resolve();
  }, millis);
  return promise;
};
delay(100).then(function() {
  // This ran after 100ms!
});
```
