# 物件

## Parse.Object

Parse 上的儲存資料是以 `Parse.Object` 為建置基礎。每個 `Parse.Object` 內含與 JSON 相容資料的鍵值組。此資料沒有結構描述，代表您不需要預先指定哪個索引鍵存在於哪個 `Parse.Object`。您只要設定任何想要的鍵值組，我們的後端將會儲存您的設定。

舉例而言，假設您正在追蹤某個遊戲的高分排行榜，某個 `Parse.Object` 可能包含：

```js
score: 1337, playerName: "Sean Plott", cheatMode: false
```

索引鍵必須是英數字串。值可以是字串、數字、布林值，甚至是陣列和字典，換句話說，任何可以是 JSON 編碼的值。

每個 `Parse.Object` 都是特定子類別的執行個體，具有可用來區別不同資料的類別名稱。舉例來說，我們可以將高分物件稱作 `GameScore`。我們建議，以 NameYourClassesLikeThis 和 nameYourKeysLikeThis 的方式為您的類別和鍵命名，讓您的程式碼比較容易判讀。

若要建立新的子類別，請使用 `Parse.Object.extend` 方法。對於任何具有相同類別名稱的 `Parse.Object`，任何 `Parse.Query` 將傳回其新類別的執行個體。如果您熟悉 `Backbone.Model`，應該已經知道如何使用 `Parse.Object`。它是採用可直接替換的設計。

```js
// Simple syntax to create a new subclass of Parse.Object.
var GameScore = Parse.Object.extend("GameScore");

// Create a new instance of that class.
var gameScore = new GameScore();

// Alternatively, you can use the typical Backbone syntax.
var Achievement = Parse.Object.extend({ className: "Achievement" });
```

您可以將其他方法和屬性新增至 `Parse.Object` 的子類別。

```js
// A complex subclass of Parse.Object
var Monster = Parse.Object.extend("Monster", {
  // Instance methods
  hasSuperHumanStrength: function () {
    return this.get("strength") > 18;
  },
  // Instance properties go in an initialize method
  initialize: function (attrs, options) {
    this.sound = "Rawr"
  }
}, {
  // Class methods
  spawn: function(strength) {
    var monster = new Monster();
    monster.set("strength", strength);
    return monster;
  }
});

var monster = Monster.spawn(200);
alert(monster.strength());  // Displays 200.
alert(monster.sound); // Displays Rawr.
```

## 儲存物件

假設您想將上述的 `GameScore` 儲存至 Parse Cloud。介面與 `Backbone.Model` 相似，包括 `save` 方法：

```js
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();

gameScore.set("score", 1337);
gameScore.set("playerName", "Sean Plott");
gameScore.set("cheatMode", false);
gameScore.save(null, {
  success: function(gameScore) {
    // Execute any logic that should take place after the object is saved.
    alert('New object created with objectId: ' + gameScore.id);
  },
  error: function(gameScore, error) {
    // Execute any logic that should take place if the save fails.
    // error is a Parse.Error with an error code and description.
    alert('Failed to create new object, with error code: ' + error.description);
  }
});
```

執行程式碼後，您也許會存疑是否發生任何變化。若要確認資料已經儲存，您可以檢視您 Parse 應用程式中的「資料瀏覽器」。您應該會看見以下類似資料：

```json
objectId: "xWMyZ4YEGZ", score: 1337, playerName: "Sean Plott", cheatMode: false, createdAt:"2011-06-10T18:33:42Z", updatedAt:"2011-06-10T18:33:42Z"
```

在這裡有兩件事需要注意。您不用在執行程式碼之前，設定或是建立名稱為 `GameScore` 的新「類別」。您的 Parse 應用程式初次遇到此「類別」時，就先幫您建立好了。

為了方便起見，已事先提供一些不需再行指定的欄位。`objectId` 是每個已儲存物件的唯一識別碼。`createdAt` 和 `updatedAt` 代表每個物件在雲端中的建立和最後修改時間。每個欄位都由 Parse 填入，所以在儲存操作完成前，都不會存在於 `Parse.Object` 上。

如果您喜歡，可以改為在對 `save` 的呼叫中直接設定屬性。

```js
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();
gameScore.save({
  score: 1337,
  playerName: "Sean Plott",
  cheatMode: false
}, {
  success: function(gameScore) {
    // The object was saved successfully.
  },
  error: function(gameScore, error) {
    // The save failed.
    // error is a Parse.Error with an error code and description.
  }
});
```

## 擷取物件

將資料儲存於雲端很有趣，但是更有趣的是將資料再次取出。如果您有 `objectId`，您可以使用 `Parse.Query` 擷取整個 `Parse.Object`：

```js
var GameScore = Parse.Object.extend("GameScore");
var query = new Parse.Query(GameScore);
query.get("xWMyZ4YEGZ", {
  success: function(gameScore) {
    // The object was retrieved successfully.
  },
  error: function(object, error) {
    // The object was not retrieved successfully.
    // error is a Parse.Error with an error code and description.
  }
});
```

若要從 `Parse.Object` 將值取出，請使用 `get` 方法。

```js
var score = gameScore.get("score");
var playerName = gameScore.get("playerName");
var cheatMode = gameScore.get("cheatMode");
```

這三個特殊值是當成屬性來提供：

```js
var objectId = gameScore.id;
var updatedAt = gameScore.updatedAt;
var createdAt = gameScore.createdAt;
```

如果您需要使用 Parse Cloud 內的最新資料來更新您擁有的物件，您可依照下列說明呼叫 `fetch` 方法：

```js
myObject.fetch({
  success: function(myObject)
    // The object was refreshed successfully
  },
  error: function(myObject, error) {
    // The object was not refreshed successfully.
    // error is a Parse.Error with an error code and description.
  }
});
```

## 更新物件

更新物件相當簡單。只需要在物件上設定一些新資料，再呼叫 save 方法。例如：

```js
// Create the object.
var GameScore = Parse.Object.extend("GameScore");
var gameScore = new GameScore();
gameScore.set("score", 1337);
gameScore.set("playerName", "Sean Plott");
gameScore.set("cheatMode", false);
gameScore.set("skills", ["pwnage", "flying"]);
gameScore.save(null, {
  success: function(gameScore) {
    // Now let's update it with some new data. In this case, only cheatMode and score
    // will get sent to the cloud. playerName hasn't changed.
    gameScore.set("cheatMode", true);
    gameScore.set("score", 1338);
    gameScore.save();
  }
});
```

Parse 會自動算出變更的資料，所以只有「已變更」欄位會被傳送至 Parse Cloud。您無須擔心那些您無意更新的資料會遭到破壞。

### 計數器

上方範例包含一個常見用法的案例。「Score」欄位為計數器，是我們持續更新玩家最新得分所需的欄位。上述的方法是可行的，但是相當麻煩，且如果您有多個用戶端試圖更新相同的計數器，可能會產生問題。

為了協助存放計數器類型資料，Parse 提供能夠自動遞增（或遞減）任何數字欄位的方法。因此，同樣的更新可以重新編寫為：

```js
gameScore.increment("score");
gameScore.save();
```

您也可以將第二個引數傳至 `increment` 以遞增任何數量。依照預設，未指定引數時會使用 1。

### 陣列

為協助存放陣列資料，有三種操作方式能夠自動變更與特定索引鍵相關聯的陣列：

*   `add` 能將特定物件附加於陣列欄位的末端。
*   `addUnique` 只會在特定物件尚未包含於陣列欄位中時，才會新增該物件。無法保證插入的位置。
*   `remove` 能從陣列欄位移除特定物件的所有執行個體。

舉例而言，我們可以新增項目至「Skills」欄位，如下所示：

```js
gameScore.addUnique("skills", "flying");
gameScore.addUnique("skills", "kungfu");
gameScore.save();
```

請注意，目前無法在相同儲存動作中從某個陣列自動新增和移除項目。您必須在每一個不同類型的陣列操作之間呼叫 `save`。

## 刪除物件

若要從雲端刪除物件：

```js
myObject.destroy({
  success: function(myObject) {
    // The object was deleted from the Parse Cloud.
  },
  error: function(myObject, error) {
    // The delete failed.
    // error is a Parse.Error with an error code and description.
  }
});
```

您可以使用 `unset` 方法從物件刪除單一欄位：

```js
// After this, the playerName field will be empty
myObject.unset("playerName");
// Saves the field deletion to the Parse Cloud
myObject.save();
```

## 關聯式資料

物件與其他物件可能具有關聯性。例如，在部落格應用程式中 `Post` 物件可能會有許多 `Comment` 物件。Parse 支援各種類型的關聯性，包括一對一、一對多和多對多。

### 一對一和一對多關聯性

一對一和一對多關聯性可透過將 `Parse.Object` 儲存為其他物件的值加以模型化。舉例而言，部落格應用程式中的每個 `Comment` 可能會對應到一個 `Post`。

若要使用單一 `Comment` 建立新 `Post`，您可以這樣編寫：

```js
  // Declare the types.
  var Post = Parse.Object.extend("Post");
  var Comment = Parse.Object.extend("Comment");

  // Create the post var myPost = new Post();
  myPost.set("title", "I'm Hungry");
  myPost.set("content", "Where should we go for lunch?");

  // Create the comment var myComment = new Comment();
  myComment.set("content", "Let's do Sushirrito.");

  // Add the post as a value in the comment
  myComment.set("parent", myPost);

  // This will save both myPost and myComment
  myComment.save();
```

為了維持一致性，Parse 架構內部會將引用物件只存放於一個地方。您也可以只使用 `objectId` 連結物件，如下所示：

```js
var post = new Post();
post.id = "1zEcyElZ80";
myComment.set("parent", post);
```

依據預設，擷取物件時不會擷取相關的 `Parse.Object`。在透過下列方式擷取物件之前，您無法擷取這些物件的值：

```js
var post = fetchedComment.get("parent");
post.fetch({
  success: function(post) {
    var title = post.get("title");
  }
});
```

### 多對多關聯性

利用 `Parse.Relation` 來模型化多對多關聯性。這個方式與在索引鍵中儲存 `Parse.Object` 的陣列類似，不過您不需要一次擷取同一個關聯中的所有物件。此外，與 `Parse.Object` 的陣列相較之下，這使得 `Parse.Relation` 能夠擴大至更多物件。例如，一名 `User` 或許會有許多喜歡的 `Posts`。在這種情況下，您可以使用 `relation` 存放 `User` 喜歡的 `Posts` 集。若要將 `Post` 新增至 `User` 的「喜愛」清單，您可以這樣做：

```js
var user = Parse.User.current();
var relation = user.relation("likes");
relation.add(post);
user.save();
```

您可以從 `Parse.Relation` 中移除貼文：

```js
relation.remove(post);
user.save();
```

您可以在呼叫 save 之前，呼叫 `add` 和 `remove` 多次：

```js
relation.remove(post1);
relation.remove(post2);
user.save();
```

您也可以將 `Parse.Object` 陣列傳入 `add` 和 `remove`：

```js
relation.add([post1, post2, post3]);
user.save();
```

依據預設，此關聯中的物件清單並未被下載。您可以使用 `query` 傳回的 `Parse.Query`，取得使用者喜歡的貼文清單。程式碼看起來像這樣：

```js
relation.query().find({
  success: function(list) {
    // list contains the posts that the current user likes.
  }
});
```

如果您只希望取得貼文的子集，您可以在查詢傳回的 `Parse.Query` 上新增額外限制，像這樣：

```js
var query = relation.query();
query.equalTo("title", "I'm Hungry");
query.find({
  success:function(list) {
    // list contains post liked by the current user which have the title "I'm Hungry".
  }
});
```

更多關於 `Parse.Query` 的細節，請參閱本指南的查詢部分。用於查詢時，`Parse.Relation` 作用與 `Parse.Object` 陣列類似，因此任何可於物件陣列上執行的查詢，皆能用於 `Parse.Relation`。

## 資料類型

目前為止我們使用過 `String`、`Number`和`Parse.Object` 等類型的值。Parse 也支援 JavaScript `Date` 和 `null`。

若要在單一 `Parse.Object` 中存放更多結構化資料，您可以將 JavaScript `Object` 和 JavaScript `Array` 巢狀化。

部分範例：

```js
var number = 42;
var string = "the number is " + number;
var date = new Date();
var array = [string, number];
var object = { number: number, string: string };

var BigObject = Parse.Object.extend("BigObject");
var bigObject = new BigObject();
bigObject.set("myNumber", number);
bigObject.set("myString", string);
bigObject.set("myDate", date);
bigObject.set("myArray", array);
bigObject.set("myObject", object);
bigObject.set("myNull", null);
bigObject.save();
```

`Parse.Object` 的大小不應該超過 128 KB。

關於 Parse 如何處理資料的更多資訊，請至[資料與安全性](#data)查看我們的說明文件。
