# Совокупности

`Parse.Collection` &mdash; это упорядоченная совокупность `Parse.Object`. Она совместима с `[Backbone.Collection](http://documentcloud.github.com/backbone/#Collection)` и имеет те же функции.  Можно создать новый подкласс с помощью класса модели или определенного запроса `Parse.Query`.

```js
// A Collection containing all instances of TestObject.
var TestCollection = Parse.Collection.extend({
  model: TestObject
});
var collection = new TestCollection();

// A Collection of TestObjects whose temperature is "hot".
var HotCollection = Parse.Collection.extend({
  model: TestObject,
  query: (new Parse.Query(TestObject)).equalTo("temperature", "hot")
});
var collection = new HotCollection();

// The Collection of TestObjects that match a complex query.
var query = new Parse.Query(TestObject);
query.equalTo("temperature", "hot");
query.greaterThan("degreesF", 100);
var collection = query.collection();
```

## Извлечение совокупностей

Чтобы загрузить все элементы в совокупность, используйте метод `fetch`.

```js
var collection = new TestCollection();
collection.fetch({
  success: function(collection) {
    collection.each(function(object) {
      console.warn(object);
    });
  },
  error: function(collection, error) {
    // The collection could not be retrieved.
  }
});
```

## Сортировка совокупностей

Можно сохранить все элементы в совокупности в определенном порядке, установив `comparator`.

```js
var collection = new TestCollection();
collection.comparator = function(object) {
  return object.get("temperature");
};
```

## Изменение совокупности

Совокупности можно изменять.  Можно получить доступ ко всем элементам, а затем добавлять или удалять элементы.

```js
var collection = new TestCollection();
collection.add([
  {"name": "Duke"},
  {"name": "Scarlett"}
]);
// Get the "Duke" Parse.Object by its sorted position.
var model = collection.at(0);
// Or you can get it by Parse objectId.
var modelAgain = collection.get(model.id);
// Remove "Duke" from the collection.
collection.remove(model);
// Completely replace all items in the collection.
collection.reset([
  {"name": "Hawk"},
  {"name": "Jane"}
]);
```

# Представления

Мы включили представление `Parse.View`, который является только копией `Backbone.View`. Его можно свободно использовать при создании представлений в приложении. Для получения сведений о том, как использовать этот класс, ознакомьтесь с [Backbone.View API](http://documentcloud.github.com/backbone/#View).  Обратите внимание на то, что после использования `Parse.View` потребуется включить jQuery или совместимый с jQuery метод `$`.

# Преобразование приложений Backbone

При наличии уже существующего приложения [Backbone](http://documentcloud.github.com/backbone/) его легко преобразовать для использования нашего SDK JavaScript. В конечном итоге после преобразования вы получите совокупность статических файлов, содержащих все функции приложения.

<div class='tip info'><div>
  Ознакомьтесь с [руководством по созданию приложения списка дел с помощью JavaScript](/tutorials/todo-app-with-javascript), в котором объясняется, как создать [классическое приложение списка дел Backbone](http://addyosmani.github.com/todomvc/) с помощью Parse в качестве серверного приложения для хранения аккаунтов и данных пользователей.
</div></div>

Наш SDK JavaScript совместим с Backbone, поэтому  `Parse.Object` и `Parse.Collection` могут использоваться для `Backbone.Model` и `Backbone.Collection` с небольшими настройками. Как преобразовать приложение:

1.  [Следуйте инструкциям для установки SDK для существующего приложения JavaScript](/apps/quickstart#js/existing).
2.  Замените все экземпляры `Backbone.Model` на `Parse.Object`. При этом `url` и `urlRoot` должны заменяться соответствующим `className`, который преобразовывает объекты в класс Parse:

```js
var BackboneTodo = Backbone.Model.extend({
  urlRoot: "/todos"
});

    var ParseTodo = Parse.Object.extend({
  className: "Todo"
});
```
3.  Замените все экземпляры `Backbone.Collection` на `Parse.Collection` и укажите класс `Parse.Object` в качестве `model`. Следует также указать `query`, чтобы совокупность представляла, как извлекать объекты:

```js
var ParseTodoCollection = Parse.Collection.extend({
  model: ParseTodo
});
var todos = new ParseTodoCollection();
// Construct a query to get the current user's todo items
var query = new Parse.Query(ParseTodo);
query.equalTo("user", Parse.User.current());
todos.query = query;
todos.fetch();
```
4.  Во всех случаях создания моделей с сервера потребуется сконструировать запрос `Parse.Query`, чтобы охватить все интересующие вас объекты, подобно тому, как нужно было сделать для атрибута `query` по совокупности `Parse.Collection`.

5.  Добавьте или обновите приложение для использования [аутентификации пользователя](/docs/js_guide#users), и примените к объектам списки управления доступом, при необходимости.

Это все необходимые операции. Теперь приложение должно функционировать и использовать Parse в качестве серверного приложения.
