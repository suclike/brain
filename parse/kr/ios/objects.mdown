# 개체

## PFObject

Parse에 데이터를 저장하면 `%{ParseObject}`를 중심으로 빌드됩니다. 각 `%{ParseObject}`에는 JSON 호환 데이터의 키-값 쌍이 포함됩니다. 이 데이터에는 스키마가 없습니다. 즉, 각 `%{ParseObject}`에 어떤 키가 있는지 미리 지정할 필요가 없습니다. 어떤 키-값 쌍이든 원하는 대로 설정하면 백엔드에서 저장합니다.

예를 들어 어떤 게임의 고득점을 추적하는 경우 싱글 `%{ParseObject}` 개체에 다음 항목이 포함될 수 있습니다.

```js
score: 1337, playerName: "Sean Plott", cheatMode: false
```

키는 영숫자 문자열이어야 합니다. 값은 문자열이나 숫자, 부울, 배열이나 딕셔너리 등 JSON 인코딩될 수 있는 항목이면 모두 값이 될 수 있습니다.

각 `%{ParseObject}`에는 다른 종류의 데이터를 구분하는 데 사용할 수 있는 클래스 이름이 있습니다. 예를 들어 고득점 개체를 `GameScore`라고 부를 수 있습니다. 클래스 이름과 키 이름을 각각 NameYourClassesLikeThis와 nameYourKeysLikeThis 같이 지정하여 코드를 보기 좋게 만드는 것이 좋습니다.

## 개체 저장

위에서 설명한 `GameScore`를 Parse Cloud에 저장한다고 가정해 보겠습니다. 인터페이스는 `NSMutableDictionary`와 비슷하며 여기에 추가로 `saveInBackground` 메서드가 있습니다.

```objc
PFObject *gameScore = [PFObject objectWithClassName:@"GameScore"];
gameScore[@"score"] = @1337;
gameScore[@"playerName"] = @"Sean Plott";
gameScore[@"cheatMode"] = @NO;
[gameScore saveInBackground];
```

이 코드를 실행한 후 실제로 어떤 일이 발생하는지 궁금할 것입니다. 데이터가 저장되었는지 확인하려면 Parse에서 앱의 Data Browser를 살펴볼 수 있습니다. 브라우저에 다음과 같이 표시됩니다.

```js
objectId: "xWMyZ4YEGZ", score: 1337, playerName: "Sean Plott", cheatMode: false,
createdAt:"2011-06-10T18:33:42Z", updatedAt:"2011-06-10T18:33:42Z"
```

여기에 주목해야 할 두 가지 사항이 있습니다. 이 코드를 실행하기 전에 `GameScore`라는 새 클래스를 설정할 필요가 없었습니다. Parse 앱이 처음 이 클래스를 만나면 클래스를 천천히 만듭니다.

또한 편의를 위해 제공되는 몇 가지 필드도 지정할 필요가 없습니다. `objectId`는 저장된 각 개체의 고유 ID입니다. `createdAt`과 `updatedAt`은 각 개체가 Parse Cloud에 생성되고 마지막으로 수정된 시간을 나타냅니다. 이러한 각 필드는 Parse에서 채우므로 저장 작업이 완료될 때까지 `%{ParseObject}`에 존재하지 않습니다.

참고: `saveInBackgroundWithBlock` 또는 `saveInBackgroundWithTarget:selector:` 메서드를 사용하여 저장이 완료된 뒤 실행할 추가 로직을 제공할 수 있습니다.

## 개체 검색

클라우드에 손쉽게 데이터를 저장할 수 있으며 데이터 검색은 더욱 간편합니다. `objectId`가 있으면 `PFQuery`를 사용하여 전체 `%{ParseObject}`를 검색할 수 있습니다.  검색은 비동기 방식이며 블록 또는 콜백 메서드를 사용하여 변화를 줄 수 있습니다.

```objc
PFQuery *query = [PFQuery queryWithClassName:@"GameScore"];
[query getObjectInBackgroundWithId:@"xWMyZ4YEGZ" block:^(PFObject *gameScore, NSError *error) {
    // Do something with the returned PFObject in the gameScore variable.
    NSLog(@"%@", gameScore);
}];
// The InBackground methods are asynchronous, so any code after this will run
// immediately.  Any code that depends on the query result should be moved
// inside the completion block above.
```

`%{ParseObject}`에서 값을 가져오려면 다음과 같이 `objectForKey:` 메서드 또는 `[]` 서브스크립팅(subscripting) 연산자를 사용할 수 있습니다.

```objc
int score = [[gameScore objectForKey:@"score"] intValue];
NSString *playerName = gameScore[@"playerName"];
BOOL cheatMode = [gameScore[@"cheatMode"] boolValue];
```

다음 세 가지 특수 값이 속성으로 제공됩니다.

```objc
NSString *objectId = gameScore.objectId;
NSDate *updatedAt = gameScore.updatedAt;
NSDate *createdAt = gameScore.createdAt;
```

Parse Cloud에 이미 있고 최신 데이터를 사용하는 개체를 새로 고쳐야 하는 경우 다음과 같이 `refresh` 메서드를 호출할 수 있습니다.

```objc
[myObject refresh];
```

## 개체를 오프라인으로 저장

대부분의 저장 함수는 즉시 실행되고 저장이 완료되면 앱에 알립니다. 저장이 끝났을 때 알 필요가 없는 경우 `saveEventually`를 대신 사용할 수 있습니다. 이 함수는 사용자가 현재 네트워크에 연결되어 있지 않은 경우 네트워크에 다시 연결될 때까지 `saveEventually`에서 기기에 업데이트를 저장하는 장점이 있습니다. 다시 연결되기 전에 앱이 종료되면 다음에 앱이 실행될 때 Parse에서 다시 시도합니다. `saveEventually`(및 `deleteEventually`)에 대한 모든 호출은 호출 순서대로 실행되므로 개체에서 여러 번 `saveEventually`를 호출해도 안전합니다.

```objc
// Create the object.
PFObject *gameScore = [PFObject objectWithClassName:@"GameScore"];
gameScore[@"score"] = @1337;
gameScore[@"playerName"] = @"Sean Plott";
gameScore[@"cheatMode"] = @NO;
[gameScore saveEventually];
```

## 개체 업데이트

개체를 간단히 업데이트할 수 있습니다. 개체에 몇 가지 새로운 데이터를 설정하고 저장 메서드 중 하나를 호출하면 됩니다. 개체를 저장하고 `objectId`가 있는 경우 `PFQuery`를 사용하여 `%{ParseObject}`를 검색하고 데이터를 업데이트할 수 있습니다.

```objc
PFQuery *query = [PFQuery queryWithClassName:@"GameScore"];
// Retrieve the object by id
[query getObjectInBackgroundWithId:@"xWMyZ4YEGZ" block:^(PFObject *gameScore, NSError *error) {
    // Now let's update it with some new data. In this case, only cheatMode and score
    // will get sent to the cloud. playerName hasn't changed.
    gameScore[@"cheatMode"] = @YES;
    gameScore[@"score"] = @1338;
    [gameScore saveInBackground];
}];
```

클라이언트는 변경된 데이터를 자동으로 파악하므로 &quot;변경된&quot; 필드만 Parse로 전송됩니다. 업데이트하려고 하지 않았던 데이터가 포함될까봐 걱정할 필요가 없습니다.

### 카운터

위의 예는 일반적인 사용 사례를 포함합니다. &quot;score&quot; 필드는 플레이어의 최근 점수로 계속 업데이트되어야 하는 카운터입니다. 위의 메서드를 사용하면 작동은 하지만 작성하기 번거로우며 같은 여러 클라이언트가 같은 카운터를 업데이트하려는 경우 문제가 발생할 수 있습니다.

카운터 유형 데이터의 저장을 돕기 위해 Parse에서는 모든 숫자 필드를 아주 조금씩 증가하거나 감소하는 메서드를 제공합니다. 이에 따라 동일한 업데이트를 다음과 같이 다시 작성할 수 있습니다.

```objc
[gameScore incrementKey:@"score"];
[gameScore saveInBackground];
```

`incrementKey:byAmount:`를 사용하여 특정 양만큼 증가시킬 수도 있습니다.

### 배열

배열 데이터의 저장을 돕기 위해 배열 필드를 아주 조금씩 변경하는 데 사용할 수 있는 다음 세 가지 작업이 있습니다.

*   `addObject:forKey:` 및 `addObjectsFromArray:forKey:`는 지정된 개체를 배열 필드의 끝에 추가합니다.
*   `addUniqueObject:forKey:` 및 `addUniqueObjectsFromArray:forKey:`는 아직 배열 필드에 포함되지 않은 지정된 개체를 해당 필드에 추가합니다. 삽입 위치는 보장되지 않습니다.
*   `removeObject:forKey:` 및 `removeObjectsInArray:forKey:`는 배열 필드에서 지정된 각 개체의 모든 인스턴스를 삭제합니다.

예를 들어 세트와 유사한 &quot;skills&quot; 필드에 다음과 같이 항목을 추가할 수 있습니다.

```objc
[gameScore addUniqueObjectsFromArray:@[@"flying", @"kungfu"] forKey:@"skills"];
[gameScore saveInBackground];
```

현재는 동일한 저장으로 배열에서 항목을 아주 조금씩 추가하거나 삭제할 수는 없습니다. 다른 모든 종류의 배열 작업 사이에 `save`를 호출해야 합니다.

## 개체 삭제

클라우드에서 개체를 삭제하려면 다음과 같이 하세요.

```objc
[myObject deleteInBackground];
```

삭제가 확인되었을 때 콜백을 실행하려면 `deleteInBackgroundWithBlock:` 또는 `deleteInBackgroundWithTarget:selector:` 메서드를 사용할 수 있습니다. 호출 스레드를 차단하려면 `delete` 메서드를 사용할 수 있습니다.

다음과 같이 `removeObjectForKey` 메서드로 개체에서 싱글 필드를 삭제할 수 있습니다.

```objc
// After this, the playerName field will be empty
[myObject removeObjectForKey:@"playerName"];
// Saves the field deletion to the Parse Cloud
[myObject saveInBackground];
```

## 관계형 데이터

개체는 다른 개체와 관련될 수 있습니다. 이러한 동작을 모델링하려면 어느 `%{ParseObject}`든 다른 `%{ParseObject}`의 값으로 사용할 수 있습니다. 내부적으로 Parse 프레임워크는 참조된 개체를 한 곳에만 저장하여 일관성을 유지합니다.

<div class='tip info'><div>
  [일대다 관계](/tutorials/one-to-many-relationships) 튜토리얼에서 간단한 블로깅 앱에서 두 `PFObjects` 사이에 일대다 관계를 만드는 방법에 대해 알아볼 수 있습니다.
</div></div>

예를 들어 한 블로깅 앱의 각 `Comment`는 하나의 `Post`와 대응할 수 있습니다. 싱글 `Comment`를 가지는 새로운 `Post`를 만들려면 다음과 같이 작성할 수 있습니다.

```objc
// Create the post
PFObject *myPost = [PFObject objectWithClassName:@"Post"];
myPost[@"title"] = @"I'm Hungry";
myPost[@"content"] = @"Where should we go for lunch?";

// Create the comment
PFObject *myComment = [PFObject objectWithClassName:@"Comment"];
myComment[@"content"] = @"Let's do Sushirrito.";

// Add a relation between the Post and Comment
myComment[@"parent"] = myPost;

// This will save both myPost and myComment
[myComment saveInBackground];
```

다음과 같이 `objectId`만 사용하여 개체를 링크할 수도 있습니다.

```objc
// Add a relation between the Post with objectId "1zEcyElZ80" and the comment
myComment[@"parent"] = [PFObject objectWithoutDataWithClassName:@"Post" objectId:@"1zEcyElZ80"];
```

기본적으로 개체를 가져올 때 관련된 `%{ParseObject}`는 가져오지 않습니다.  개체의 값은 다음과 같이 가져올 때까지 검색할 수 없습니다.

```objc
PFObject *post = fetchedComment[@"parent"];
[post fetchIfNeededInBackgroundWithBlock:^(PFObject *object, NSError *error) {
    NSString *title = post[@"title"]; }];
```

`PFRelation` 개체를 사용하여 일대다 관계를 모델링할 수도 있습니다.  이 개체는 `PFObjects`의 `NSArray`와 유사하게 작동하지만 관계의 모든 개체를 즉시 다운로드할 필요가 없다는 점이 다릅니다.  따라서 `PFRelation`이 `%{ParseObject}`의 `NSArray` 방식보다 훨씬 더 많은 개체로 확장할 수 있습니다.  예를 들어 `User`에게 좋아하는 `Post`가 많을 수 있습니다.  이 경우 `relationForKey:`를 사용하여 `User`가 좋아하는 `Post` 세트를 저장할 수 있습니다.  게시물을 목록에 추가하려는 경우 코드는 다음과 같습니다.

```objc
PFUser *user = [PFUser currentUser];
PFRelation *relation = [user relationForKey:@"likes"];
[relation addObject:post];
[user saveInBackground];
```

다음과 같이 `PFRelation`에서 게시물을 삭제할 수 있습니다.

```objc
[relation removeObject:post];
```

기본적으로 이러한 관계에 있는 개체의 목록은 다운로드되지 않습니다.  `query`에서 반환한 `PFQuery`에서 `findObjectsInBackgroundWithBlock:`을 호출하여 `Post`의 목록을 가져올 수 있습니다.  코드는 다음과 같습니다.

```objc
[[relation query] findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
    if (error) {
        // There was an error
    } else {
        // objects has all the Posts the current user liked.
    }
}];
```

`Post`의 일부만 가져오고 싶은 경우 다음과 같이 `query`에서 반환한 `PFQuery`에 조건을 추가할 수 있습니다.

```objc
PFQuery *query = [relation query];
// Add other query constraints.
```

`PFQuery`에 대한 자세한 내용은 이 가이드의 쿼리 부분을 참조하세요.  `PFRelation`은 `%{ParseObject}`의 `NSArray`와 유사하게 작동하므로 개체의 배열에서 수행할 수 있는 모든 쿼리(`includeKey:` 제외)를 `PFRelation`에서 수행할 수 있습니다.

## 데이터 유형

지금까지 `NSString`, `NSNumber` 및 `%{ParseObject}` 유형의 값을 사용했습니다. Parse에서도 `NSDate`, `NSData` 및 `NSNull`을 지원합니다.

`NSDictionary` 및 `NSArray` 개체를 중첩하여 싱글 `%{ParseObject}` 내에 더욱 구조화된 데이터를 저장할 수 있습니다.

예:

```objc
NSNumber *number = @42;
NSString *string = [NSString stringWithFormat:@"the number is %@", number];
NSDate *date = [NSDate date];
NSData *data = [@"foo" dataUsingEncoding:NSUTF8StringEncoding];
NSArray *array = @[string, number];
NSDictionary *dictionary = @{@"number": number,
                             @"string": string};
NSNull *null = [NSNull null];

PFObject *bigObject = [PFObject objectWithClassName:@"BigObject"];
bigObject[@"myNumber"] = number;
bigObject[@"myString"] = string;
bigObject[@"myDate"] = date;
bigObject[@"myData"] = data;
bigObject[@"myArray"] = array;
bigObject[@"myDictionary"] = dictionary;
bigObject[@"myNull"] = null;
[bigObject saveInBackground];
```

`%{ParseObject}`에서 `NSData` 필드를 사용하여 이미지나 문서 등 대용량의 바이너리 데이터를 저장하지 않는 것이 좋습니다. `%{ParseObject}` 크기는 128KB를 넘지 않아야 합니다. 더 많이 저장하려면 `PFFile`을 사용하는 것이 좋습니다. 자세한 내용은 [가이드 섹션](#files)을 참조하세요.

Parse에서 데이터를 처리하는 방식에 대한 자세한 내용은 [데이터 및 보안](#data)에 대한 설명서를 참조하세요.

## 하위 클래스

Parse는 가능한 한 빨리 설정하여 실행하도록 설계되었습니다. `%{ParseObject}` 클래스를 사용하여 모든 데이터에 액세스하고 `objectForKey:` 또는 `[]` 서브스크립팅(subscripting) 연산자로 모든 필드에 액세스할 수 있습니다. 완성된 코드베이스에서는 하위 클래스에 간결성과 확장성, 자동 완성 지원 등 많은 이점이 있습니다. 하위 클래스 지정은 완전히 선택사항이며, 다음 코드를

```objc
PFObject *shield = [PFObject objectWithClassName:@"Armor"];
shield[@"displayName"] = @"Wooden Shield";
shield[@"fireProof"] = @NO;
shield[@"rupees"] = @50;
```

다음과 같이 변형할 수 있습니다.

```objc
Armor *shield = [Armor object];
shield.displayName = @"Wooden Shield";
shield.fireProof = NO;
shield.rupees = 50;
```

### PFObject 하위 클래스 지정

`%{ParseObject}` 하위 클래스를 만들려면 다음 단계를 따르세요.

1.  `PFSubclassing` 프로토콜을 따르는 하위 클래스를 선언합니다.
2.  클래스 메서드 `parseClassName`을 구현합니다. 이 메서드는 `initWithClassName:`에 전달하는 문자열이며 이후 모든 클래스 이름 참조가 필요 없습니다.
3.  .m 파일에 `PFObject+Subclass`를 가져옵니다. 이렇게 하면 `parseClassName`을 넘어 `PFSubclassing`에 모든 메서드를 구현합니다.
4.  Parse `setApplicationId:clientKey:` 전에 ApplicationDelegate에서 `[YourClass registerSubclass]`를 호출합니다.

다음 코드는 `%{ParseObject}`의 `Armor` 하위 클래스를 선언하고 구현하며 등록합니다.

```objc
// Armor.h
@interface Armor : PFObject<PFSubclassing>
+ (NSString *)parseClassName;
@end

// Armor.m
// Import this header to let Armor know that PFObject privately provides most
// of the methods for PFSubclassing.
##import <Parse/PFObject+Subclass.h>

@implementation Armor
+ (void)load {
    [self registerSubclass];
}

+ (NSString *)parseClassName {
    return @"Armor";
}
@end
```

### 속성 및 메서드

사용자 지정 속성과 메서드를 `%{ParseObject}` 하위 클래스에 추가하면 클래스에 대한 로직을 캡슐화할 수 있습니다. `PFSubclassing`을 사용하면 비즈니스 로직과 저장소/전송 로직에 대한 별도 클래스를 사용하지 않고 주제에 대한 모든 로직을 한곳에 보관할 수 있습니다.

`%{ParseObject}`는 `NSManagedObject`와 마찬가지로 동적 합성기를 지원합니다. 평소대로 속성을 선언하지만 .m 파일에서 `@synthesize`가 아니라 `@dynamic`을 사용합니다. 다음 예에서는 `Armor` 클래스에 `displayName` 속성을 만듭니다.

```objc
// Armor.h
@interface Armor : PFObject<PFSubclassing>
+ (NSString *)parseClassName;
@property (retain) NSString *displayName;
@end

// Armor.m
@dynamic displayName;
```

`armor.displayName` 또는 `[armor displayName]`을 사용하여 displayName 속성에 액세스하고 `armor.displayName = @"Wooden Shield"` 또는 `[armor setDisplayName:@"Wooden Sword"]`를 사용하여 할당할 수 있습니다. 동적 속성을 사용하면 Xcode가 자동 완성을 제공하고 오타를 발견할 수 있습니다.

`NSNumber` 속성은 `NSNumber` 또는 대응하는 초기 속성으로 구현될 수 있습니다. 다음 예를 참조하세요.

```objc
@property BOOL fireProof;
@property int rupees;
```

이 경우 `game[@"fireProof"]`는 `boolValue`를 사용하여 액세스되는 `NSNumber`를 반환하고 `game[@"rupees"]`는 `intValue`를 사용하여 액세스되는 `NSNumber`를 반환하지만 `fireProof` 속성은 실제 `BOOL`이고 `rupees` 속성은 실제 `int`입니다. 동적 getter는 자동으로 `BOOL`이나 `int` 값을 추출하고 동적 setter는 자동으로 값을 `NSNumber`에 포함합니다. 어느 형식이든 사용할 수 있습니다. 초기 속성 유형은 사용하기 쉽지만 `NSNumber` 속성 유형은 nil 값을 더 확실하게 지원합니다.

간단한 속성 액세스보다 더 복잡한 로직이 필요한 경우 다음과 같이 자체 메서드도 선언할 수 있습니다.

```objc
@dynamic iconFile;

- (UIImageView *)iconView {
    PFImageView *view = [[PFImageView alloc] initWithImage:kPlaceholderImage];
    view.file = self.iconFile;
    [view loadInBackground];
    return [view autorelease];
}
```

### 하위 클래스 초기화

`object` 클래스 메서드로 새 개체를 만들어야 합니다. 이 메서드는 유형의 자동 출시 인스턴스를 만들고 이후의 하위 클래스 지정을 올바로 처리합니다. 기존 개체에 대한 참조를 만들려면 `objectWithoutDataWithObjectId:`를 사용합니다.

### 쿼리

`query` 클래스 메서드를 사용하여 특정 하위 클래스의 개체를 쿼리할 수 있습니다. 다음 예는 사용자가 구입할 수 있는 갑옷을 쿼리합니다.

```objc
PFQuery *query = [Armor query];
[query whereKey:@"rupees" lessThanOrEqualTo:PFUser.currentUser.rupees];
[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
    if (!error) {
        Armor *firstArmor = objects[0];
        // ...
    }
}];
```
