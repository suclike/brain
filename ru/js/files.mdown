# Файлы

## Создание Parse.File

Класс `Parse.File` позволяет хранить файлы приложения в облаке, иначе они будут слишком крупными или их будет сложно поместить в обычный объект `Parse.Object`. Чаще всего пользователи хранят изображения, но также можно хранить документы, видео, музыку и любые другие бинарные данные (до 10 мегабайт).

Приступить к работе с `Parse.File` довольно просто. Существует несколько способов создания файла. Первый заключается в использовании строки с кодировкой base64.

```js
var base64 = "V29ya2luZyBhdCBQYXJzZSBpcyBncmVhdCE=";
var file = new Parse.File("myfile.txt", { base64: base64 });
```

Кроме того, можно создать файл из массива значений байта:

```js
var bytes = [ 0xBE, 0xEF, 0xCA, 0xFE ];
var file = new Parse.File("myfile.txt", bytes);
```

Parse автоматически определит тип загружаемого файла на основе его расширения, однако вы можете указать `Content-Type` с помощью третьего параметра:

```js
var file = new Parse.File("myfile.zzz", fileData, "image/png");
```

Но чаще всего для приложений HTML5 используется форма HTML с управлением загрузкой файла. На современных браузерах это легко выполнимая операция. Создайте тег входных данных файла, который позволяет пользователю выбрать файл из локального диска для загрузки:

```html
  <input type="file" id="profilePhotoFileUpload">
```

Затем с помощью обработчика щелчка или другой функции получите ссылку на этот файл:

```js
var fileUploadControl = $("#profilePhotoFileUpload")[0];
if (fileUploadControl.files.length > 0) {
  var file = fileUploadControl.files[0];
  var name = "photo.jpg";
  var parseFile = new Parse.File(name, file);
}
```

Обратите внимание, что в этом примере файлу дается название `photo.jpg`. Необходимо обратить внимание на два момента: 

*   Не беспокойтесь о конфликте названий файлов. Каждый загруженный файл получает уникальный идентификатор, поэтому не возникает проблем при загрузке нескольких файлов под названием `photo.jpg`.
*   Важно давать файлам названия с определенным расширением файла. Это позволяет Parse определить тип файла и соответствующим образом его обработать. Поэтому при хранении изображений в формате PNG убедитесь, что название файла имеет расширение `.png`.

Затем необходимо загрузить файл в облако. Как и для объекта `Parse.Object`, существует множество вариантов метода `save`, который можно использовать, в зависимости от подходящего типа обратного вызова и обработки ошибок.

```js
parseFile.save().then(function() {
  // The file has been saved to Parse.
}, function(error) {
  // The file either could not be read, or could not be saved to Parse.
});
```

Наконец, после завершения сохранения можно ассоциировать класс `Parse.File` с объектом `Parse.Object`, как и любые другие данные:

```js
var jobApplication = new Parse.Object("JobApplication");
jobApplication.set("applicantName", "Joe Smith");
jobApplication.set("applicantResumeFile", parseFile);
jobApplication.save();
```

## Извлечение содержимого файла

Наилучший способ извлечения содержимого файла зависит от контекста приложения. Из-за проблем с междоменными запросами наилучшим решением будет заставить браузер сделать работу за вас. Как правило, это означает преобразование URL-адреса файла в DOM. Ниже показано преобразование загруженной фотографии профиля на странице с помощью jQuery:

```js
var profilePhoto = profile.get("photoFile");
$("profileImg")[0].src = profilePhoto.url();
```

Если нужно обработать данные файла в Cloud Code, можно получить файл с помощью наших сетевых библиотек HTTP:

```js
Parse.Cloud.httpRequest({ url: profilePhoto.url() }).then(function(response) {
  // The file contents are in response.buffer.
});
```

Можно удалить файлы, на которые ссылаются объекты, с помощью [REST API](/docs/rest#files-deleting). Для получения разрешения на удаление файла нужно предоставить главный ключ.

Если на ваши файлы не ссылаются объекты в приложении, будет невозможно удалить их через интерфейс REST API. Можно запросить очистку неиспользуемых файлов на странице настроек приложения. Помните, что это может нарушить функции, которые зависят от доступа к файлам, на которые нет ссылок, через свойство URL. Файлы, которые на данный момент связаны с объектом, не будут затронуты.
