# Аналитика

Parse предоставляет ряд обработчиков для получения картины работы вашего приложения. Важно понимать, как работает ваше приложение, насколько часто и в какое время.

В данном разделе описываются разные способы оснащения вашего приложения. Чтобы реализовать преимущества серверной аналитики Parse разработчики, использующие Parse для хранения и извлечения данных, уже могут воспользоваться статистикой на Parse.

Без необходимости внедрения логики со стороны клиента можно просматривать графики в режиме реального времени и сводные таблицы (по типу устройства, имени класса Parse или глаголу REST) запросов API в панели приложения, а также сохранять эти фильтры графиков для быстрого доступа только к тем данным, которые вас интересуют.

## Аналитика по запуску приложения и уведомлениям

Основной обработчик аналитики позволяет отслеживать запуск вашего приложения. Добавление указанной ниже строки к методу `onCreate` основного объекта `Activity` начинает сбор данных о времени и частоте запуска вашего приложения.

```java
ParseAnalytics.trackAppOpened(getIntent());
```

Графики и сводные таблицы статистики доступны в панели вашего приложения.

Доступны данные последующей аналитики, касающиеся доставки уведомлений и показателей просмотра. Ознакомьтесь с [подразделом &laquo;Отслеживание уведомлений и запусков приложений&raquo;](#receiving-tracking) нашего &laquo;Руководства по уведомлениям&raquo; для получения более подробных сведений об информационном наполнении уведомлений и связанных с уведомлениями обратных вызовах.

## Пользовательская аналитика

`ParseAnalytics` также позволяет отслеживать произвольные события с рядом ключей и значений `String`. Эти дополнительные данные позволяют сегментировать пользовательские события через панель вашего приложения.

Допустим, в вашем приложении предлагается функция поиска списков квартир, и вы хотите отслеживать частоту использования этой функции с дополнительными метаданными.

```java
Map<String, String> dimensions = new HashMap<String, String>();
// Define ranges to bucket data points into meaningful segments
dimensions.put("priceRange", "1000-1500");
// Did the user filter the query?
dimensions.put("source", "craigslist");
// Do searches happen more often on weekdays or weekends?
dimensions.put("dayType", "weekday");
// Send the dimensions to Parse along with the 'search' event
ParseAnalytics.trackEvent("search", dimensions);
```

`ParseAnalytics` может использоваться даже как упрощенный перечень ошибок &mdash; просто используйте следующий код для получения доступа к обзору количества и частоты ошибок в вашем приложении с разбивкой по коду ошибки:

```java
Map<String, String> dimensions = new HashMap<String, String>();
dimensions.put('code', Integer.toString(error.getCode()));
ParseAnalytics.trackEvent('error', dimensions);
```

Обратите внимание на то, что в Parse хранятся только первые восемь пар параметров для каждого вызова `ParseAnalytics.trackEvent()`.
